{"remainingRequest":"G:\\aa-tong\\my-project\\jewelry-admin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!G:\\aa-tong\\my-project\\jewelry-admin\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!G:\\aa-tong\\my-project\\jewelry-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!G:\\aa-tong\\my-project\\jewelry-admin\\src\\components\\Warehouse-management.vue?vue&type=template&id=0ac9c11f&scoped=true&","dependencies":[{"path":"G:\\aa-tong\\my-project\\jewelry-admin\\src\\components\\Warehouse-management.vue","mtime":1639643213520},{"path":"G:\\aa-tong\\my-project\\jewelry-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\aa-tong\\my-project\\jewelry-admin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"G:\\aa-tong\\my-project\\jewelry-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\aa-tong\\my-project\\jewelry-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJ3YXJlaG91c2UtbWFuYWdlbWVudC1jb250YWluZXIiLGF0dHJzOnsiaWQiOiJ3YXJlaG91c2UifX0sW19jKCdkaXYnLHtzdGF0aWNTdHlsZTp7Im1hcmdpbi10b3AiOiIyMHB4In19LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6Im1hdGVyaWFscy1hcHBseS1hZGQifSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJhZGQtbGVmdCJ9LFtfYygncCcse3N0YXRpY0NsYXNzOiJ0aXRsZS1mb250In0sW192bS5fdigi5b6F5Ye65bqT5riF5Y2VIildKSxfYygnZWwtdGFibGUnLHtzdGF0aWNTdHlsZTp7IndpZHRoIjoiMTAwJSJ9LGF0dHJzOnsiZGF0YSI6X3ZtLmRlbGl2ZXJ5RGF0YS5zdG9ja0luSWRMaXN0LCJib3JkZXIiOiIiLCJpZCI6ImxlZnQifX0sW19jKCdlbC10YWJsZS1jb2x1bW4nLHthdHRyczp7InByb3AiOiJtYXRlcmlhbE5hbWUiLCJsYWJlbCI6IuadkOaWmeWQjeensCJ9fSksX2MoJ2VsLXRhYmxlLWNvbHVtbicse2F0dHJzOnsicHJvcCI6InByb2R1Y3ROdW1iZXIiLCJsYWJlbCI6Iue7n+S4gOe8luWPtyJ9fSksX2MoJ2VsLXRhYmxlLWNvbHVtbicse2F0dHJzOnsibGFiZWwiOiLlupPlrZjmgLvmlbDph48ifSxzY29wZWRTbG90czpfdm0uX3UoW3trZXk6ImRlZmF1bHQiLGZuOmZ1bmN0aW9uKHNjb3BlKXtyZXR1cm4gW19jKCdkaXYnLFtfYygnc3BhbicsW192bS5fdihfdm0uX3Moc2NvcGUucm93LmNoYXJnZVVuaXQgPT0gIueykiIgPyBzY29wZS5yb3cudG90YWxOdW0gKyAiICIgKyBzY29wZS5yb3cuY2hhcmdlVW5pdCA6IHNjb3BlLnJvdy50b3RhbE51bSkpXSldKV19fV0pfSksX2MoJ2VsLXRhYmxlLWNvbHVtbicse2F0dHJzOnsibGFiZWwiOiLlupPlrZjmgLvph43ph48ifSxzY29wZWRTbG90czpfdm0uX3UoW3trZXk6ImRlZmF1bHQiLGZuOmZ1bmN0aW9uKHNjb3BlKXtyZXR1cm4gW19jKCdkaXYnLFtfYygnc3BhbicsW192bS5fdihfdm0uX3Moc2NvcGUucm93LnRvdGFsV2VpZ2h0ID09IDAgPyBzY29wZS5yb3cudG90YWxXZWlnaHQgOiBzY29wZS5yb3cudG90YWxXZWlnaHQgKyAiICIgKyBzY29wZS5yb3cuY2hhcmdlVW5pdCkpXSldKV19fV0pfSksX2MoJ2VsLXRhYmxlLWNvbHVtbicse2F0dHJzOnsibGFiZWwiOiLlh7rlupPmlbDph48iLCJ3aWR0aCI6IjEzMCJ9LHNjb3BlZFNsb3RzOl92bS5fdShbe2tleToiZGVmYXVsdCIsZm46ZnVuY3Rpb24oc2NvcGUpe3JldHVybiBbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJudW0ifSxbX2MoJ2VsLWlucHV0Jyx7b246eyJpbnB1dCI6ZnVuY3Rpb24oJGV2ZW50KXtyZXR1cm4gX3ZtLmNoYW5nZU51bShzY29wZS4kaW5kZXgpfX0sbW9kZWw6e3ZhbHVlOihzY29wZS5yb3cubnVtYmVyKSxjYWxsYmFjazpmdW5jdGlvbiAoJCR2KSB7X3ZtLiRzZXQoc2NvcGUucm93LCAibnVtYmVyIiwgJCR2KX0sZXhwcmVzc2lvbjoic2NvcGUucm93Lm51bWJlciJ9fSxbX2MoJ2knLHtzdGF0aWNTdHlsZTp7ImNvbG9yIjoiIzYwNjI2NiIsIm1hcmdpbi1yaWdodCI6IjEwJSIsImZvbnQtc3R5bGUiOiJub3JtYWwifSxhdHRyczp7InNsb3QiOiJzdWZmaXgifSxzbG90OiJzdWZmaXgifSxbX3ZtLl92KF92bS5fcyhzY29wZS5yb3cuY2hhcmdlVW5pdCA9PSAi57KSIiA/IHNjb3BlLnJvdy5jaGFyZ2VVbml0IDogc2NvcGUucm93LmNoYXJnZVVuaXQgPT0gIuS7tiIgPyBzY29wZS5yb3cuY2hhcmdlVW5pdCA6ICIiKSldKV0pXSwxKV19fV0pfSksX2MoJ2VsLXRhYmxlLWNvbHVtbicse2F0dHJzOnsibGFiZWwiOiLlh7rlupPph43ph48iLCJ3aWR0aCI6IjEzMCJ9LHNjb3BlZFNsb3RzOl92bS5fdShbe2tleToiZGVmYXVsdCIsZm46ZnVuY3Rpb24oc2NvcGUpe3JldHVybiBbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJudW0ifSxbX2MoJ2VsLWlucHV0Jyx7b246eyJpbnB1dCI6ZnVuY3Rpb24oJGV2ZW50KXtyZXR1cm4gX3ZtLmNoYW5nZVdlaWdodChzY29wZS4kaW5kZXgpfX0sbW9kZWw6e3ZhbHVlOihzY29wZS5yb3cud2VpZ2h0KSxjYWxsYmFjazpmdW5jdGlvbiAoJCR2KSB7X3ZtLiRzZXQoc2NvcGUucm93LCAid2VpZ2h0IiwgJCR2KX0sZXhwcmVzc2lvbjoic2NvcGUucm93LndlaWdodCJ9fSxbX2MoJ2knLHtzdGF0aWNTdHlsZTp7ImNvbG9yIjoiIzYwNjI2NiIsIm1hcmdpbi1yaWdodCI6IjEwJSIsImZvbnQtc3R5bGUiOiJub3JtYWwifSxhdHRyczp7InNsb3QiOiJzdWZmaXgifSxzbG90OiJzdWZmaXgifSxbX3ZtLl92KF92bS5fcyhzY29wZS5yb3cuY2hhcmdlVW5pdCAhPT0gIueykiIgPyBzY29wZS5yb3cuY2hhcmdlVW5pdCAhPSAi5Lu2IiA/IHNjb3BlLnJvdy5jaGFyZ2VVbml0IDogIiIgOiAiIikpXSldKV0sMSldfX1dKX0pLF9jKCdlbC10YWJsZS1jb2x1bW4nLHthdHRyczp7ImxhYmVsIjoi56e76Zmk5p2Q5paZIiwid2lkdGgiOiIxMjAifSxzY29wZWRTbG90czpfdm0uX3UoW3trZXk6ImRlZmF1bHQiLGZuOmZ1bmN0aW9uKHNjb3BlKXtyZXR1cm4gW19jKCdkaXYnLHtzdGF0aWNDbGFzczoibnVtIn0sW19jKCdlbC1idXR0b24nLHtzdGF0aWNTdHlsZTp7ImNvbG9yIjoicmVkIn0sYXR0cnM6eyJ0eXBlIjoidGV4dCJ9LG9uOnsiY2xpY2siOmZ1bmN0aW9uKCRldmVudCl7cmV0dXJuIF92bS5kZWxOdW0oc2NvcGUuJGluZGV4KX19fSxbX3ZtLl92KCLnp7vpmaQiKV0pXSwxKV19fV0pfSldLDEpLF9jKCdlbC1mb3JtJyx7cmVmOiJkZWxpdmVyeUZvcm0iLHN0YXRpY1N0eWxlOnsibWFyZ2luLXRvcCI6IjIwcHgifSxhdHRyczp7Im1vZGVsIjpfdm0uZGVsaXZlcnlEYXRhLCJydWxlcyI6X3ZtLmRlbGl2ZXJ5UnVsZXMsImxhYmVsLXdpZHRoIjoiMTYwcHgifX0sW19jKCdlbC1mb3JtLWl0ZW0nLHthdHRyczp7ImxhYmVsIjoi5Ye65bqT57G75Z6L77yaIiwicHJvcCI6InR5cGUifX0sW19jKCdlbC1zZWxlY3QnLHtzdGF0aWNDbGFzczoiaW5wdXQtc3R5bGUiLGF0dHJzOnsicG9wcGVyLWFwcGVuZC10by1ib2R5IjpmYWxzZX0sb246eyJjaGFuZ2UiOl92bS50eXBlQ2hhbmdlfSxtb2RlbDp7dmFsdWU6KF92bS5kZWxpdmVyeURhdGEudHlwZSksY2FsbGJhY2s6ZnVuY3Rpb24gKCQkdikge192bS4kc2V0KF92bS5kZWxpdmVyeURhdGEsICJ0eXBlIiwgJCR2KX0sZXhwcmVzc2lvbjoiZGVsaXZlcnlEYXRhLnR5cGUifX0sX3ZtLl9sKChfdm0uZGVsaXZlcnlUeXBlKSxmdW5jdGlvbihpdGVtKXtyZXR1cm4gX2MoJ2VsLW9wdGlvbicse2tleTppdGVtLmlkLGF0dHJzOnsibGFiZWwiOml0ZW0ubmFtZSwidmFsdWUiOml0ZW0uaWR9fSl9KSwxKV0sMSksKF92bS5kZWxpdmVyeURhdGEudHlwZSA9PSAwKT9fYygnZWwtZm9ybS1pdGVtJyx7YXR0cnM6eyJsYWJlbCI6IuebrueahOWcsO+8miIsInByb3AiOiJlbmRTdG9yYWdlSWQifX0sW19jKCdlbC1zZWxlY3QnLHtzdGF0aWNDbGFzczoiaW5wdXQtc3R5bGUiLGF0dHJzOnsicGxhY2Vob2xkZXIiOiLor7fpgInmi6kiLCJwb3BwZXItYXBwZW5kLXRvLWJvZHkiOmZhbHNlfSxtb2RlbDp7dmFsdWU6KF92bS5kZWxpdmVyeURhdGEuZW5kU3RvcmFnZUlkKSxjYWxsYmFjazpmdW5jdGlvbiAoJCR2KSB7X3ZtLiRzZXQoX3ZtLmRlbGl2ZXJ5RGF0YSwgImVuZFN0b3JhZ2VJZCIsICQkdil9LGV4cHJlc3Npb246ImRlbGl2ZXJ5RGF0YS5lbmRTdG9yYWdlSWQifX0sX3ZtLl9sKChfdm0ud2FyZWhvdXNlRmlsdGVyTGlzdCksZnVuY3Rpb24oaXRlbSl7cmV0dXJuIF9jKCdlbC1vcHRpb24nLHtrZXk6aXRlbS5pZCxhdHRyczp7ImxhYmVsIjppdGVtLm5hbWUsInZhbHVlIjppdGVtLmlkfX0pfSksMSldLDEpOl92bS5fZSgpLChfdm0uZGVsaXZlcnlEYXRhLnR5cGUgPT0gMSk/X2MoJ2VsLWZvcm0taXRlbScse2F0dHJzOnsibGFiZWwiOiLplIDllK7lkZjvvJoiLCJwcm9wIjoic29sZGVyIn19LFtfYygnZWwtaW5wdXQnLHtzdGF0aWNDbGFzczoiaW5wdXQtc3R5bGUiLGF0dHJzOnsicGxhY2Vob2xkZXIiOiLor7fovpPlhaUiLCJjbGVhcmFibGUiOiIifSxtb2RlbDp7dmFsdWU6KF92bS5kZWxpdmVyeURhdGEuc29sZGVyKSxjYWxsYmFjazpmdW5jdGlvbiAoJCR2KSB7X3ZtLiRzZXQoX3ZtLmRlbGl2ZXJ5RGF0YSwgInNvbGRlciIsICQkdil9LGV4cHJlc3Npb246ImRlbGl2ZXJ5RGF0YS5zb2xkZXIifX0pXSwxKTpfdm0uX2UoKSwoX3ZtLmRlbGl2ZXJ5RGF0YS50eXBlID09IDEpP19jKCdlbC1mb3JtLWl0ZW0nLHthdHRyczp7ImxhYmVsIjoi57uE77yaIiwicHJvcCI6Imdyb3VwIn19LFtfYygnZWwtaW5wdXQnLHtzdGF0aWNDbGFzczoiaW5wdXQtc3R5bGUiLGF0dHJzOnsicGxhY2Vob2xkZXIiOiLor7fovpPlhaUiLCJjbGVhcmFibGUiOiIifSxtb2RlbDp7dmFsdWU6KF92bS5kZWxpdmVyeURhdGEuZ3JvdXApLGNhbGxiYWNrOmZ1bmN0aW9uICgkJHYpIHtfdm0uJHNldChfdm0uZGVsaXZlcnlEYXRhLCAiZ3JvdXAiLCAkJHYpfSxleHByZXNzaW9uOiJkZWxpdmVyeURhdGEuZ3JvdXAifX0pXSwxKTpfdm0uX2UoKSwoX3ZtLmRlbGl2ZXJ5RGF0YS50eXBlID09IDEpP19jKCdlbC1mb3JtLWl0ZW0nLHthdHRyczp7ImxhYmVsIjoi6aG+5a6i5aeT5ZCN77yaIiwicHJvcCI6ImN1c3RvbWVyIn19LFtfYygnZWwtaW5wdXQnLHtzdGF0aWNDbGFzczoiaW5wdXQtc3R5bGUiLGF0dHJzOnsicGxhY2Vob2xkZXIiOiLor7fovpPlhaUiLCJjbGVhcmFibGUiOiIifSxtb2RlbDp7dmFsdWU6KF92bS5kZWxpdmVyeURhdGEuY3VzdG9tZXIpLGNhbGxiYWNrOmZ1bmN0aW9uICgkJHYpIHtfdm0uJHNldChfdm0uZGVsaXZlcnlEYXRhLCAiY3VzdG9tZXIiLCAkJHYpfSxleHByZXNzaW9uOiJkZWxpdmVyeURhdGEuY3VzdG9tZXIifX0pXSwxKTpfdm0uX2UoKSwoX3ZtLmRlbGl2ZXJ5RGF0YS50eXBlID09IDEpP19jKCdlbC1mb3JtLWl0ZW0nLHthdHRyczp7ImxhYmVsIjoi5Ye65ZSu5biB56eN77yaIiwicHJvcCI6InNhbGVDdXJyZW5jeSJ9fSxbX2MoJ2VsLXJhZGlvLWdyb3VwJyx7b246eyJjaGFuZ2UiOl92bS5jdXJyZW5jeUNoYW5nZX0sbW9kZWw6e3ZhbHVlOihfdm0uZGVsaXZlcnlEYXRhLnNhbGVDdXJyZW5jeSksY2FsbGJhY2s6ZnVuY3Rpb24gKCQkdikge192bS4kc2V0KF92bS5kZWxpdmVyeURhdGEsICJzYWxlQ3VycmVuY3kiLCAkJHYpfSxleHByZXNzaW9uOiJkZWxpdmVyeURhdGEuc2FsZUN1cnJlbmN5In19LFtfYygnZWwtcmFkaW8nLHthdHRyczp7ImxhYmVsIjoiQ05ZIn19LFtfdm0uX3YoIkNOWSIpXSksX2MoJ2VsLXJhZGlvJyx7YXR0cnM6eyJsYWJlbCI6IkVVUiJ9fSxbX3ZtLl92KCJFVVIiKV0pLF9jKCdlbC1yYWRpbycse2F0dHJzOnsibGFiZWwiOiJVU0QifX0sW192bS5fdigiVVNEIildKSxfYygnZWwtcmFkaW8nLHthdHRyczp7ImxhYmVsIjoiSEtEIn19LFtfdm0uX3YoIkhLRCIpXSldLDEpXSwxKTpfdm0uX2UoKSwoX3ZtLmRlbGl2ZXJ5RGF0YS50eXBlID09IDEpP19jKCdlbC1mb3JtLWl0ZW0nLHthdHRyczp7ImxhYmVsIjoi5Ye65ZSu6YeR6aKd77yaIiwicHJvcCI6InNhbGVNb25leSJ9fSxbX2MoJ2VsLWlucHV0Jyx7c3RhdGljQ2xhc3M6ImlucHV0LXN0eWxlIixhdHRyczp7InBsYWNlaG9sZGVyIjoi6K+36L6T5YWl5Ye65ZSu6YeR6aKdIiwiY2xlYXJhYmxlIjoiIn0sb246eyJpbnB1dCI6X3ZtLmN1cnJlbmN5Q2hhbmdlfSxtb2RlbDp7dmFsdWU6KF92bS5kZWxpdmVyeURhdGEuc2FsZU1vbmV5KSxjYWxsYmFjazpmdW5jdGlvbiAoJCR2KSB7X3ZtLiRzZXQoX3ZtLmRlbGl2ZXJ5RGF0YSwgInNhbGVNb25leSIsICQkdil9LGV4cHJlc3Npb246ImRlbGl2ZXJ5RGF0YS5zYWxlTW9uZXkifX0pXSwxKTpfdm0uX2UoKSwoX3ZtLmRlbGl2ZXJ5RGF0YS50eXBlID09IDEpP19jKCdlbC1mb3JtLWl0ZW0nLHthdHRyczp7ImxhYmVsIjoi5aSW5biB5YWR5o2i5Lq65rCR5biB5rGH546H77yaIiwicHJvcCI6InRvdGFsIn19LFtfYygnZWwtaW5wdXQnLHtzdGF0aWNDbGFzczoiaW5wdXQtc3R5bGUiLGF0dHJzOnsicGxhY2Vob2xkZXIiOiLor7fovpPlhaUiLCJjbGVhcmFibGUiOiIifSxvbjp7ImlucHV0Ijpfdm0udG90YWxDblJhdGVDaGFuZ2V9LG1vZGVsOnt2YWx1ZTooX3ZtLmRlbGl2ZXJ5RGF0YS50b3RhbFRvQ25SYXRlKSxjYWxsYmFjazpmdW5jdGlvbiAoJCR2KSB7X3ZtLiRzZXQoX3ZtLmRlbGl2ZXJ5RGF0YSwgInRvdGFsVG9DblJhdGUiLCAkJHYpfSxleHByZXNzaW9uOiJkZWxpdmVyeURhdGEudG90YWxUb0NuUmF0ZSJ9fSldLDEpOl92bS5fZSgpLChfdm0uZGVsaXZlcnlEYXRhLnR5cGUgPT0gMSk/X2MoJ2VsLWZvcm0taXRlbScse2F0dHJzOnsibGFiZWwiOiLlh7rllK7kurrmsJHluIHph5Hpop3vvJoiLCJwcm9wIjoidG90YWwifX0sW19jKCdlbC1pbnB1dCcse3N0YXRpY0NsYXNzOiJpbnB1dC1zdHlsZSIsYXR0cnM6eyJwbGFjZWhvbGRlciI6Iuivt+i+k+WFpSIsImNsZWFyYWJsZSI6IiJ9LG1vZGVsOnt2YWx1ZTooX3ZtLmRlbGl2ZXJ5RGF0YS5zZWxsVG90YWxDblByaWNlKSxjYWxsYmFjazpmdW5jdGlvbiAoJCR2KSB7X3ZtLiRzZXQoX3ZtLmRlbGl2ZXJ5RGF0YSwgInNlbGxUb3RhbENuUHJpY2UiLCAkJHYpfSxleHByZXNzaW9uOiJkZWxpdmVyeURhdGEuc2VsbFRvdGFsQ25QcmljZSJ9fSldLDEpOl92bS5fZSgpLChfdm0uZGVsaXZlcnlEYXRhLnR5cGUgPT0gMSk/X2MoJ2VsLWZvcm0taXRlbScse2F0dHJzOnsibGFiZWwiOiLmuK/luIHlhZHmjaLkurrmsJHluIHmsYfnjofvvJoiLCJwcm9wIjoidG90YWwifX0sW19jKCdlbC1pbnB1dCcse3N0YXRpY0NsYXNzOiJpbnB1dC1zdHlsZSIsYXR0cnM6eyJwbGFjZWhvbGRlciI6Iuivt+i+k+WFpSIsImNsZWFyYWJsZSI6IiJ9LG9uOnsiaW5wdXQiOl92bS50b3RhbEhrUmF0ZUNoYW5nZX0sbW9kZWw6e3ZhbHVlOihfdm0uZGVsaXZlcnlEYXRhLnRvdGFsVG9Ia1JhdGUpLGNhbGxiYWNrOmZ1bmN0aW9uICgkJHYpIHtfdm0uJHNldChfdm0uZGVsaXZlcnlEYXRhLCAidG90YWxUb0hrUmF0ZSIsICQkdil9LGV4cHJlc3Npb246ImRlbGl2ZXJ5RGF0YS50b3RhbFRvSGtSYXRlIn19KV0sMSk6X3ZtLl9lKCksKF92bS5kZWxpdmVyeURhdGEudHlwZSA9PSAxKT9fYygnZWwtZm9ybS1pdGVtJyx7YXR0cnM6eyJsYWJlbCI6IuWHuuWUrua4r+W4gemHkemine+8miIsInByb3AiOiJ0b3RhbCJ9fSxbX2MoJ2VsLWlucHV0Jyx7c3RhdGljQ2xhc3M6ImlucHV0LXN0eWxlIixhdHRyczp7InBsYWNlaG9sZGVyIjoi6K+36L6T5YWlIiwiY2xlYXJhYmxlIjoiIn0sbW9kZWw6e3ZhbHVlOihfdm0uZGVsaXZlcnlEYXRhLnNlbGxUb3RhbEhrUHJpY2UpLGNhbGxiYWNrOmZ1bmN0aW9uICgkJHYpIHtfdm0uJHNldChfdm0uZGVsaXZlcnlEYXRhLCAic2VsbFRvdGFsSGtQcmljZSIsICQkdil9LGV4cHJlc3Npb246ImRlbGl2ZXJ5RGF0YS5zZWxsVG90YWxIa1ByaWNlIn19KV0sMSk6X3ZtLl9lKCksKF92bS5kZWxpdmVyeURhdGEudHlwZSA9PSAxKT9fYygnZWwtZm9ybS1pdGVtJyx7YXR0cnM6eyJsYWJlbCI6IumUgOWUruWPkeelqOWPt++8miIsInByb3AiOiJ0b3RhbCJ9fSxbX2MoJ2VsLWlucHV0Jyx7c3RhdGljQ2xhc3M6ImlucHV0LXN0eWxlIixhdHRyczp7InBsYWNlaG9sZGVyIjoi6K+36L6T5YWlIiwiY2xlYXJhYmxlIjoiIn0sbW9kZWw6e3ZhbHVlOihfdm0uZGVsaXZlcnlEYXRhLnNlbGxCaWxsTnVtYmVyKSxjYWxsYmFjazpmdW5jdGlvbiAoJCR2KSB7X3ZtLiRzZXQoX3ZtLmRlbGl2ZXJ5RGF0YSwgInNlbGxCaWxsTnVtYmVyIiwgJCR2KX0sZXhwcmVzc2lvbjoiZGVsaXZlcnlEYXRhLnNlbGxCaWxsTnVtYmVyIn19KV0sMSk6X3ZtLl9lKCksX2MoJ2VsLWZvcm0taXRlbScse2F0dHJzOnsibGFiZWwiOiLlh7rlupPml7bpl7TvvJoiLCJwcm9wIjoic3RvY2tPdXRUaW1lIn19LFtfYygnZWwtZGF0ZS1waWNrZXInLHtzdGF0aWNDbGFzczoiaW5wdXQtc3R5bGUiLGF0dHJzOnsidHlwZSI6ImRhdGUiLCJwbGFjZWhvbGRlciI6Iuivt+mAieaLqSIsInZhbHVlLWZvcm1hdCI6Inl5eXktTU0tZGQiLCJmb3JtYXQiOiJ5eXl5LU1NLWRkIn0sbW9kZWw6e3ZhbHVlOihfdm0uZGVsaXZlcnlEYXRhLnN0b2NrT3V0VGltZSksY2FsbGJhY2s6ZnVuY3Rpb24gKCQkdikge192bS4kc2V0KF92bS5kZWxpdmVyeURhdGEsICJzdG9ja091dFRpbWUiLCAkJHYpfSxleHByZXNzaW9uOiJkZWxpdmVyeURhdGEuc3RvY2tPdXRUaW1lIn19KV0sMSksX2MoJ2VsLWZvcm0taXRlbScse2F0dHJzOnsibGFiZWwiOiLpoobotKfkurrvvJoiLCJwcm9wIjoicmVjZWl2ZXIifX0sW19jKCdlbC1pbnB1dCcse3N0YXRpY0NsYXNzOiJpbnB1dC1zdHlsZSIsbW9kZWw6e3ZhbHVlOihfdm0uZGVsaXZlcnlEYXRhLnJlY2VpdmVyKSxjYWxsYmFjazpmdW5jdGlvbiAoJCR2KSB7X3ZtLiRzZXQoX3ZtLmRlbGl2ZXJ5RGF0YSwgInJlY2VpdmVyIiwgJCR2KX0sZXhwcmVzc2lvbjoiZGVsaXZlcnlEYXRhLnJlY2VpdmVyIn19KV0sMSksX2MoJ2VsLWZvcm0taXRlbScse2F0dHJzOnsibGFiZWwiOiLlpIfms6jvvJoiLCJwcm9wIjoibm90ZSJ9fSxbX2MoJ2VsLWlucHV0Jyx7c3RhdGljQ2xhc3M6ImlucHV0LXN0eWxlIixhdHRyczp7InR5cGUiOiJ0ZXh0YXJlYSJ9LG1vZGVsOnt2YWx1ZTooX3ZtLmRlbGl2ZXJ5RGF0YS5ub3RlKSxjYWxsYmFjazpmdW5jdGlvbiAoJCR2KSB7X3ZtLiRzZXQoX3ZtLmRlbGl2ZXJ5RGF0YSwgIm5vdGUiLCAkJHYpfSxleHByZXNzaW9uOiJkZWxpdmVyeURhdGEubm90ZSJ9fSldLDEpXSwxKSxfYygnZGl2Jyx7c3RhdGljU3R5bGU6eyJtYXJnaW4tdG9wIjoiMzBweCIsInRleHQtYWxpZ24iOiJyaWdodCJ9fSxbX2MoJ2VsLWJ1dHRvbicse2RpcmVjdGl2ZXM6W3tuYW1lOiJwcmV2ZW50Q2xpY2siLHJhd05hbWU6InYtcHJldmVudENsaWNrIn1dLHN0YXRpY1N0eWxlOnsid2lkdGgiOiIxMjBweCJ9LGF0dHJzOnsidHlwZSI6InByaW1hcnkifSxvbjp7ImNsaWNrIjpmdW5jdGlvbigkZXZlbnQpe3JldHVybiBfdm0uc3RvY2tJblN1Ym1pdCgnZGVsaXZlcnlGb3JtJyl9fX0sW192bS5fdigi5o+QIOS6pCIpXSldLDEpXSwxKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6ImFkZC1yaWdodCJ9LFtfYygnZGl2JyxbX2MoJ3AnLHtzdGF0aWNDbGFzczoidGl0bGUtZm9udCJ9LFtfdm0uX3YoIuW6k+WtmOafpeivoiIpXSksX2MoJ2RpdicsW19jKCdlbC1mb3JtJyx7YXR0cnM6eyJsYWJlbC13aWR0aCI6IjExMHB4In19LFtfYygnZWwtZm9ybS1pdGVtJyx7YXR0cnM6eyJsYWJlbCI6IuS7k+W6ky/liqDlt6XljoLvvJoiLCJyZXF1aXJlZCI6IiJ9fSxbX2MoJ2VsLXNlbGVjdCcse3N0YXRpY1N0eWxlOnsid2lkdGgiOiI2NiUifSxhdHRyczp7Im11bHRpcGxlIjoiIiwicGxhY2Vob2xkZXIiOiLlj6/lpJrpgIkiLCJwb3BwZXItYXBwZW5kLXRvLWJvZHkiOmZhbHNlfSxvbjp7ImNoYW5nZSI6X3ZtLnN0b3JhZ2VJZENoYW5nZUxpc3R9LG1vZGVsOnt2YWx1ZTooX3ZtLnN0b3JhZ2VJZExpc3QpLGNhbGxiYWNrOmZ1bmN0aW9uICgkJHYpIHtfdm0uc3RvcmFnZUlkTGlzdD0kJHZ9LGV4cHJlc3Npb246InN0b3JhZ2VJZExpc3QifX0sX3ZtLl9sKChfdm0ud2FyZWhvdXNlTGlzdCksZnVuY3Rpb24oaXRlbSl7cmV0dXJuIF9jKCdlbC1vcHRpb24nLHtkaXJlY3RpdmVzOlt7bmFtZToic2hvdyIscmF3TmFtZToidi1zaG93Iix2YWx1ZTooaXRlbS5pc093biA9PSAxIHx8IGl0ZW0uaWQgPT0gMCksZXhwcmVzc2lvbjoiaXRlbS5pc093biA9PSAxIHx8IGl0ZW0uaWQgPT0gMCJ9XSxrZXk6aXRlbS5pZCxhdHRyczp7ImxhYmVsIjppdGVtLm5hbWUsInZhbHVlIjppdGVtLmlkfX0pfSksMSldLDEpLF9jKCdlbC1mb3JtLWl0ZW0nLHthdHRyczp7ImxhYmVsIjoi5YWz6ZSu5a2X77yaIn19LFtfYygnZWwtaW5wdXQnLHtzdGF0aWNTdHlsZTp7IndpZHRoIjoiNjYlIn0sYXR0cnM6eyJwbGFjZWhvbGRlciI6IuWPr+i+k+WFpeadkOaWmeWQjeensOOAgee7n+S4gOe8luWPt+OAgeWkh+azqOi/m+ihjOaQnOe0oiIsImNsZWFyYWJsZSI6IiJ9LG9uOnsiY2hhbmdlIjpfdm0ua2V5d29yZENoYW5nZX0sbW9kZWw6e3ZhbHVlOihfdm0ud2FyZWhvdXNlS2V5d29yZCksY2FsbGJhY2s6ZnVuY3Rpb24gKCQkdikge192bS53YXJlaG91c2VLZXl3b3JkPSQkdn0sZXhwcmVzc2lvbjoid2FyZWhvdXNlS2V5d29yZCJ9fSksX2MoJ2VsLWJ1dHRvbicse3N0YXRpY1N0eWxlOnsibWFyZ2luLWxlZnQiOiIxMHB4In0sYXR0cnM6eyJ0eXBlIjoicHJpbWFyeSJ9LG9uOnsiY2xpY2siOl92bS53YXJlaG91c2VDaGVja319LFtfdm0uX3YoIuafpSDor6IiKV0pXSwxKV0sMSldLDEpXSksX2MoJ2VsLXRhYmxlJyx7cmVmOiJzaW5nbGVUYWJsZSIsc3RhdGljU3R5bGU6eyJ3aWR0aCI6IjEwMCUifSxhdHRyczp7ImRhdGEiOl92bS5kZXZpY2VGaWx0ZXJMaXN0LCJoaWdobGlnaHQtY3VycmVudC1yb3ciOiIiLCJib3JkZXIiOiIifSxvbjp7InJvdy1jbGljayI6X3ZtLmhhbmRsZURldmljZUxpc3RDaGFuZ2V9fSxbX2MoJ2VsLXRhYmxlLWNvbHVtbicse2F0dHJzOnsicHJvcCI6Im1hdGVyaWFsTmFtZSIsImxhYmVsIjoi5p2Q5paZ5ZCN56ewIn19KSxfYygnZWwtdGFibGUtY29sdW1uJyx7YXR0cnM6eyJwcm9wIjoicHJvZHVjdE51bWJlciIsImxhYmVsIjoi57uf5LiA57yW5Y+3In19KSxfYygnZWwtdGFibGUtY29sdW1uJyx7YXR0cnM6eyJsYWJlbCI6IueOsOWtmOS7k+W6kyJ9LHNjb3BlZFNsb3RzOl92bS5fdShbe2tleToiZGVmYXVsdCIsZm46ZnVuY3Rpb24oc2NvcGUpe3JldHVybiBbX2MoJ2RpdicsW19jKCdzcGFuJyxbX3ZtLl92KF92bS5fcyhzY29wZS5yb3cuc3RvcmFnZU5hbWUpKV0pXSldfX1dKX0pLF9jKCdlbC10YWJsZS1jb2x1bW4nLHthdHRyczp7ImxhYmVsIjoi5bqT5a2Y5oC75pWw6YePIn0sc2NvcGVkU2xvdHM6X3ZtLl91KFt7a2V5OiJkZWZhdWx0IixmbjpmdW5jdGlvbihzY29wZSl7cmV0dXJuIFtfYygnZGl2JyxbX2MoJ3NwYW4nLFtfdm0uX3YoX3ZtLl9zKHNjb3BlLnJvdy53ZWlnaHQgIT09IDAgPyBzY29wZS5yb3cubnVtYmVyIDogc2NvcGUucm93Lm51bWJlciArICIgIiArIHNjb3BlLnJvdy5jaGFyZ2VVbml0KSldKV0pXX19XSl9KSxfYygnZWwtdGFibGUtY29sdW1uJyx7YXR0cnM6eyJsYWJlbCI6IuW6k+WtmOaAu+mHjemHjyJ9LHNjb3BlZFNsb3RzOl92bS5fdShbe2tleToiZGVmYXVsdCIsZm46ZnVuY3Rpb24oc2NvcGUpe3JldHVybiBbX2MoJ2RpdicsW19jKCdzcGFuJyxbX3ZtLl92KF92bS5fcyhzY29wZS5yb3cud2VpZ2h0ID09IDAgPyAiLS0iIDogc2NvcGUucm93LndlaWdodCArICIgIiArIHNjb3BlLnJvdy5jaGFyZ2VVbml0KSldKV0pXX19XSl9KSxfYygnZWwtdGFibGUtY29sdW1uJyx7YXR0cnM6eyJsYWJlbCI6IuaTjeS9nCJ9fSxbW19jKCdlbC1idXR0b24nLHthdHRyczp7InR5cGUiOiJ0ZXh0In19LFtfdm0uX3YoIuafpeeci+ivpuaDhSIpXSldXSwyKV0sMSksKF92bS5kaWFsb2dJbnZlbnRvcnlDaGVja1Zpc2libGUpP19jKCdlbC1kaWFsb2cnLHthdHRyczp7ImlkIjoibXNnIiwidGl0bGUiOiLmnZDmlpnkv6Hmga8iLCJ2aXNpYmxlIjpfdm0uZGlhbG9nSW52ZW50b3J5Q2hlY2tWaXNpYmxlLCJjbG9zZS1vbi1wcmVzcy1lc2NhcGUiOmZhbHNlLCJjbG9zZS1vbi1jbGljay1tb2RhbCI6ZmFsc2UsIm1vZGFsLWFwcGVuZC10by1ib2R5IjpmYWxzZSwiYXBwZW5kLXRvLWJvZHkiOmZhbHNlfSxvbjp7InVwZGF0ZTp2aXNpYmxlIjpmdW5jdGlvbigkZXZlbnQpe192bS5kaWFsb2dJbnZlbnRvcnlDaGVja1Zpc2libGU9JGV2ZW50fX19LFtfYygnZGl2Jyx7YXR0cnM6eyJpZCI6ImludmVuU29tZSJ9fSxbX2MoJ2VsLXRhYnMnLHtzdGF0aWNTdHlsZTp7Im1hcmdpbi10b3AiOiItMTBweCJ9LG1vZGVsOnt2YWx1ZTooX3ZtLmFjdGl2ZVN0b2NrTmFtZSksY2FsbGJhY2s6ZnVuY3Rpb24gKCQkdikge192bS5hY3RpdmVTdG9ja05hbWU9JCR2fSxleHByZXNzaW9uOiJhY3RpdmVTdG9ja05hbWUifX0sW19jKCdlbC10YWItcGFuZScse2F0dHJzOnsibGFiZWwiOiLmnZDmlpnkv6Hmga8iLCJuYW1lIjoiZmlyc3QifX0sW19jKCdkaXYnLHtzdGF0aWNTdHlsZTp7ImRpc3BsYXkiOiJmbGV4IiwianVzdGlmeS1jb250ZW50Ijoic3BhY2UtYmV0d2VlbiJ9fSxbX2MoJ3AnLHtzdGF0aWNDbGFzczoiZm9udC10aXRsZS1zdHlsZSIsc3RhdGljU3R5bGU6eyJtYXJnaW4tdG9wIjoiMCJ9fSxbX3ZtLl92KCIg5p2Q5paZ5L+h5oGvICIpXSksX2MoJ2Rpdicse3N0YXRpY1N0eWxlOnsicGFkZGluZy10b3AiOiI2cHgifX0sW19jKCdpbWcnLHtzdGF0aWNTdHlsZTp7ImN1cnNvciI6InBvaW50ZXIifSxhdHRyczp7InRpdGxlIjoi5L+u5pS55p2Q5paZ5L+h5oGvIiwic3JjIjpyZXF1aXJlKCIuLi9hc3NldHMvaW1ncy9ob21lL3VwZGF0ZS5wbmciKX0sb246eyJjbGljayI6X3ZtLnVwZGF0ZURldmljZX19KV0pXSksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJmb250LWRpdiJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6ImRpdi1vbmUifSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJvbmUtbGVmdCIsc3R5bGU6KHsKICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjNjA2MjY2JywKICAgICAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogX3ZtLmlzVXBkYXRlID09IDAgPyAnbm9ybWFsJyA6ICdib2xkJywKICAgICAgICAgICAgICAgICAgICAgIH0pfSxbX3ZtLl92KCIg5p2Q5paZ5ZCN56ewICIpXSksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJvbmUtcmlnaHQifSxbX2MoJ2VsLWlucHV0Jyx7YXR0cnM6eyJyZWFkb25seSI6IiJ9LG1vZGVsOnt2YWx1ZTooX3ZtLmludmVudG9yeUNoZWNrRGV0YWlsLm1hdGVyaWFsTmFtZSksY2FsbGJhY2s6ZnVuY3Rpb24gKCQkdikge192bS4kc2V0KF92bS5pbnZlbnRvcnlDaGVja0RldGFpbCwgIm1hdGVyaWFsTmFtZSIsICQkdil9LGV4cHJlc3Npb246ImludmVudG9yeUNoZWNrRGV0YWlsLm1hdGVyaWFsTmFtZSJ9fSldLDEpXSksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJkaXYtb25lIn0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczoib25lLWxlZnQiLHN0eWxlOih7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzYwNjI2NicsCiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IF92bS5pc1VwZGF0ZSA9PSAwID8gJ25vcm1hbCcgOiAnYm9sZCcsCiAgICAgICAgICAgICAgICAgICAgICB9KX0sW192bS5fdigiIOS7k+W6ky/liqDlt6XljoIgIildKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6Im9uZS1yaWdodCJ9LFtfYygnZWwtaW5wdXQnLHthdHRyczp7InJlYWRvbmx5IjoiIn0sbW9kZWw6e3ZhbHVlOihfdm0uaW52ZW50b3J5Q2hlY2tEZXRhaWwuc3RvcmFnZU5hbWUpLGNhbGxiYWNrOmZ1bmN0aW9uICgkJHYpIHtfdm0uJHNldChfdm0uaW52ZW50b3J5Q2hlY2tEZXRhaWwsICJzdG9yYWdlTmFtZSIsICQkdil9LGV4cHJlc3Npb246ImludmVudG9yeUNoZWNrRGV0YWlsLnN0b3JhZ2VOYW1lIn19KV0sMSldKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6ImRpdi1vbmUifSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJvbmUtbGVmdCIsc3R5bGU6KHsKICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjNjA2MjY2JywKICAgICAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogX3ZtLmlzVXBkYXRlID09IDAgPyAnbm9ybWFsJyA6ICdib2xkJywKICAgICAgICAgICAgICAgICAgICAgIH0pfSxbX3ZtLl92KCIg57uf5LiA57yW5Y+3ICIpXSksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJvbmUtcmlnaHQifSxbX2MoJ2VsLWlucHV0Jyx7YXR0cnM6eyJyZWFkb25seSI6IiJ9LG1vZGVsOnt2YWx1ZTooX3ZtLmludmVudG9yeUNoZWNrRGV0YWlsLnByb2R1Y3ROdW1iZXIpLGNhbGxiYWNrOmZ1bmN0aW9uICgkJHYpIHtfdm0uJHNldChfdm0uaW52ZW50b3J5Q2hlY2tEZXRhaWwsICJwcm9kdWN0TnVtYmVyIiwgJCR2KX0sZXhwcmVzc2lvbjoiaW52ZW50b3J5Q2hlY2tEZXRhaWwucHJvZHVjdE51bWJlciJ9fSldLDEpXSksX2MoJ2Rpdicse2RpcmVjdGl2ZXM6W3tuYW1lOiJzaG93IixyYXdOYW1lOiJ2LXNob3ciLHZhbHVlOihfdm0uY2VydGlmaWNhdGVzaG93MiA9PSBmYWxzZSksZXhwcmVzc2lvbjoiY2VydGlmaWNhdGVzaG93MiA9PSBmYWxzZSJ9XSxzdGF0aWNDbGFzczoiZGl2LW9uZSJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6Im9uZS1sZWZ0IixzdHlsZTooewogICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjoKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uaXNVcGRhdGUgPT0gMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnIzYwNjI2NicKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogX3ZtLmludmVudG9yeUNoZWNrRGV0YWlsLmlzVXBkYXRlICE9PSAyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICcjM2Q4MmZlJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnIzYwNjI2NicsCiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IF92bS5pc1VwZGF0ZSA9PSAwID8gJ25vcm1hbCcgOiAnYm9sZCcsCiAgICAgICAgICAgICAgICAgICAgICB9KX0sW192bS5fdigiIOW9oueKtiAiKV0pLF9jKCdkaXYnLHtzdGF0aWNDbGFzczoib25lLXJpZ2h0In0sW19jKCdlbC1pbnB1dCcse2F0dHJzOnsicmVhZG9ubHkiOl92bS5pc1VwZGF0ZSA9PSAwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogX3ZtLmludmVudG9yeUNoZWNrRGV0YWlsLmlzVXBkYXRlICE9PSAyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHRydWUsImNsZWFyYWJsZSI6IiJ9LG1vZGVsOnt2YWx1ZTooX3ZtLmludmVudG9yeUNoZWNrRGV0YWlsLnNoYXBlKSxjYWxsYmFjazpmdW5jdGlvbiAoJCR2KSB7X3ZtLiRzZXQoX3ZtLmludmVudG9yeUNoZWNrRGV0YWlsLCAic2hhcGUiLCAkJHYpfSxleHByZXNzaW9uOiJpbnZlbnRvcnlDaGVja0RldGFpbC5zaGFwZSJ9fSldLDEpXSksX2MoJ2Rpdicse2RpcmVjdGl2ZXM6W3tuYW1lOiJzaG93IixyYXdOYW1lOiJ2LXNob3ciLHZhbHVlOihfdm0uY2VydGlmaWNhdGVzaG93MiA9PSBmYWxzZSksZXhwcmVzc2lvbjoiY2VydGlmaWNhdGVzaG93MiA9PSBmYWxzZSJ9XSxzdGF0aWNDbGFzczoiZGl2LW9uZSJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6Im9uZS1sZWZ0IixzdHlsZTooewogICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjoKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uaXNVcGRhdGUgPT0gMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnIzYwNjI2NicKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogX3ZtLmludmVudG9yeUNoZWNrRGV0YWlsLmlzVXBkYXRlICE9PSAyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICcjM2Q4MmZlJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnIzYwNjI2NicsCiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IF92bS5pc1VwZGF0ZSA9PSAwID8gJ25vcm1hbCcgOiAnYm9sZCcsCiAgICAgICAgICAgICAgICAgICAgICB9KX0sW192bS5fdigiIOS6p+WTgeexu+WeiyAiKV0pLF9jKCdkaXYnLHtzdGF0aWNDbGFzczoib25lLXJpZ2h0In0sW19jKCdlbC1pbnB1dCcse2F0dHJzOnsicmVhZG9ubHkiOl92bS5pc1VwZGF0ZSA9PSAwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogX3ZtLmludmVudG9yeUNoZWNrRGV0YWlsLmlzVXBkYXRlICE9PSAyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHRydWUsImNsZWFyYWJsZSI6IiJ9LG1vZGVsOnt2YWx1ZTooX3ZtLmludmVudG9yeUNoZWNrRGV0YWlsLnByb2R1Y3RUeXBlKSxjYWxsYmFjazpmdW5jdGlvbiAoJCR2KSB7X3ZtLiRzZXQoX3ZtLmludmVudG9yeUNoZWNrRGV0YWlsLCAicHJvZHVjdFR5cGUiLCAkJHYpfSxleHByZXNzaW9uOiJpbnZlbnRvcnlDaGVja0RldGFpbC5wcm9kdWN0VHlwZSJ9fSldLDEpXSksX2MoJ2Rpdicse2RpcmVjdGl2ZXM6W3tuYW1lOiJzaG93IixyYXdOYW1lOiJ2LXNob3ciLHZhbHVlOihfdm0uY2VydGlmaWNhdGVzaG93MiA9PSBmYWxzZSksZXhwcmVzc2lvbjoiY2VydGlmaWNhdGVzaG93MiA9PSBmYWxzZSJ9XSxzdGF0aWNDbGFzczoiZGl2LW9uZSJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6Im9uZS1sZWZ0IixzdHlsZTooewogICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjoKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uaXNVcGRhdGUgPT0gMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnIzYwNjI2NicKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogX3ZtLmludmVudG9yeUNoZWNrRGV0YWlsLmlzVXBkYXRlICE9PSAyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICcjM2Q4MmZlJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnIzYwNjI2NicsCiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IF92bS5pc1VwZGF0ZSA9PSAwID8gJ25vcm1hbCcgOiAnYm9sZCcsCiAgICAgICAgICAgICAgICAgICAgICB9KX0sW192bS5fdigiIOS6p+WcsCAiKV0pLF9jKCdkaXYnLHtzdGF0aWNDbGFzczoib25lLXJpZ2h0In0sW19jKCdlbC1pbnB1dCcse2F0dHJzOnsicmVhZG9ubHkiOl92bS5pc1VwZGF0ZSA9PSAwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogX3ZtLmludmVudG9yeUNoZWNrRGV0YWlsLmlzVXBkYXRlICE9PSAyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHRydWUsImNsZWFyYWJsZSI6IiJ9LG1vZGVsOnt2YWx1ZTooX3ZtLmludmVudG9yeUNoZWNrRGV0YWlsLnByb2R1Y3RBcmVhKSxjYWxsYmFjazpmdW5jdGlvbiAoJCR2KSB7X3ZtLiRzZXQoX3ZtLmludmVudG9yeUNoZWNrRGV0YWlsLCAicHJvZHVjdEFyZWEiLCAkJHYpfSxleHByZXNzaW9uOiJpbnZlbnRvcnlDaGVja0RldGFpbC5wcm9kdWN0QXJlYSJ9fSldLDEpXSksX2MoJ2Rpdicse2RpcmVjdGl2ZXM6W3tuYW1lOiJzaG93IixyYXdOYW1lOiJ2LXNob3ciLHZhbHVlOihfdm0uY2VydGlmaWNhdGVzaG93MiA9PSBmYWxzZSksZXhwcmVzc2lvbjoiY2VydGlmaWNhdGVzaG93MiA9PSBmYWxzZSJ9XSxzdGF0aWNDbGFzczoiZGl2LW9uZSJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6Im9uZS1sZWZ0IixzdHlsZTooewogICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyM2MDYyNjYnLAogICAgICAgICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiAnbm9ybWFsJywKICAgICAgICAgICAgICAgICAgICAgIH0pfSxbX3ZtLl92KCIg6K6h5Lu35Y2V5L2NICIpXSksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJvbmUtcmlnaHQifSxbX2MoJ2VsLXJhZGlvLWdyb3VwJyx7YXR0cnM6eyJkaXNhYmxlZCI6IiJ9LG1vZGVsOnt2YWx1ZTooX3ZtLmludmVudG9yeUNoZWNrRGV0YWlsLmNoYXJnZVVuaXQpLGNhbGxiYWNrOmZ1bmN0aW9uICgkJHYpIHtfdm0uJHNldChfdm0uaW52ZW50b3J5Q2hlY2tEZXRhaWwsICJjaGFyZ2VVbml0IiwgJCR2KX0sZXhwcmVzc2lvbjoiaW52ZW50b3J5Q2hlY2tEZXRhaWwuY2hhcmdlVW5pdCJ9fSxbX2MoJ2VsLXJhZGlvJyx7YXR0cnM6eyJsYWJlbCI6IueykiJ9fSxbX3ZtLl92KCLnspIiKV0pLF9jKCdlbC1yYWRpbycse2F0dHJzOnsibGFiZWwiOiJjdCJ9fSxbX3ZtLl92KCJjdCIpXSksX2MoJ2VsLXJhZGlvJyx7YXR0cnM6eyJsYWJlbCI6ImcifX0sW192bS5fdigiZyIpXSldLDEpXSwxKV0pLF9jKCdkaXYnLHtkaXJlY3RpdmVzOlt7bmFtZToic2hvdyIscmF3TmFtZToidi1zaG93Iix2YWx1ZTooX3ZtLmNlcnRpZmljYXRlc2hvdzIgPT0gZmFsc2UpLGV4cHJlc3Npb246ImNlcnRpZmljYXRlc2hvdzIgPT0gZmFsc2UifV0sc3RhdGljQ2xhc3M6ImRpdi1vbmUifSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJvbmUtbGVmdCIsc3R5bGU6KHsKICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6CiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmlzVXBkYXRlID09IDAKICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJyM2MDYyNjYnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IF92bS5pbnZlbnRvcnlDaGVja0RldGFpbC5pc1VwZGF0ZSAhPT0gMgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnIzNkODJmZScKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogJyM2MDYyNjYnLAogICAgICAgICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiBfdm0uaXNVcGRhdGUgPT0gMCA/ICdub3JtYWwnIDogJ2JvbGQnLAogICAgICAgICAgICAgICAgICAgICAgfSl9LFtfdm0uX3YoIiDljZXku7cgIildKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6Im9uZS1yaWdodCJ9LFtfYygnZWwtaW5wdXQnLHthdHRyczp7InJlYWRvbmx5Ijpfdm0uaXNVcGRhdGUgPT0gMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IF92bS5pbnZlbnRvcnlDaGVja0RldGFpbC5pc1VwZGF0ZSAhPT0gMgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBmYWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB0cnVlLCJjbGVhcmFibGUiOiIifSxvbjp7ImlucHV0Ijpfdm0ucHJpY2VUb3RhbH0sbW9kZWw6e3ZhbHVlOihfdm0uaW52ZW50b3J5Q2hlY2tEZXRhaWwudW5pdFByaWNlKSxjYWxsYmFjazpmdW5jdGlvbiAoJCR2KSB7X3ZtLiRzZXQoX3ZtLmludmVudG9yeUNoZWNrRGV0YWlsLCAidW5pdFByaWNlIiwgJCR2KX0sZXhwcmVzc2lvbjoiaW52ZW50b3J5Q2hlY2tEZXRhaWwudW5pdFByaWNlIn19KV0sMSldKSxfYygnZGl2Jyx7ZGlyZWN0aXZlczpbe25hbWU6InNob3ciLHJhd05hbWU6InYtc2hvdyIsdmFsdWU6KF92bS5jZXJ0aWZpY2F0ZXNob3cyID09IGZhbHNlKSxleHByZXNzaW9uOiJjZXJ0aWZpY2F0ZXNob3cyID09IGZhbHNlIn1dLHN0YXRpY0NsYXNzOiJkaXYtb25lIn0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczoib25lLWxlZnQiLHN0eWxlOih7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOgogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5pc1VwZGF0ZSA9PSAwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICcjNjA2MjY2JwogICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBfdm0uaW52ZW50b3J5Q2hlY2tEZXRhaWwuaXNVcGRhdGUgIT09IDIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJyMzZDgyZmUnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICcjNjA2MjY2JywKICAgICAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogX3ZtLmlzVXBkYXRlID09IDAgPyAnbm9ybWFsJyA6ICdib2xkJywKICAgICAgICAgICAgICAgICAgICAgIH0pfSxbX3ZtLl92KCIg5biB56eNICIpXSksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJvbmUtcmlnaHQifSxbX2MoJ2VsLXJhZGlvLWdyb3VwJyx7YXR0cnM6eyJkaXNhYmxlZCI6X3ZtLmlzVXBkYXRlID09IDAKICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBfdm0uaW52ZW50b3J5Q2hlY2tEZXRhaWwuaXNVcGRhdGUgIT09IDIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdHJ1ZX0sbW9kZWw6e3ZhbHVlOihfdm0uaW52ZW50b3J5Q2hlY2tEZXRhaWwuY3VycmVuY3kpLGNhbGxiYWNrOmZ1bmN0aW9uICgkJHYpIHtfdm0uJHNldChfdm0uaW52ZW50b3J5Q2hlY2tEZXRhaWwsICJjdXJyZW5jeSIsICQkdil9LGV4cHJlc3Npb246ImludmVudG9yeUNoZWNrRGV0YWlsLmN1cnJlbmN5In19LFtfYygnZWwtcmFkaW8nLHthdHRyczp7ImxhYmVsIjoiQ05ZIn19LFtfdm0uX3YoIkNOWSIpXSksX2MoJ2VsLXJhZGlvJyx7YXR0cnM6eyJsYWJlbCI6IkVVUiJ9fSxbX3ZtLl92KCJFVVIiKV0pLF9jKCdlbC1yYWRpbycse2F0dHJzOnsibGFiZWwiOiJVU0QifX0sW192bS5fdigiVVNEIildKSxfYygnZWwtcmFkaW8nLHthdHRyczp7ImxhYmVsIjoiSEtEIn19LFtfdm0uX3YoIkhLRCIpXSldLDEpXSwxKV0pLF9jKCdkaXYnLHtzdGF0aWNDbGFzczoiZGl2LW9uZSJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6Im9uZS1sZWZ0IixzdHlsZTooewogICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjoKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uaXNVcGRhdGUgPT0gMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnIzYwNjI2NicKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogX3ZtLmludmVudG9yeUNoZWNrRGV0YWlsLmlzVXBkYXRlID09IDAKICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJyMzZDgyZmUnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICcjNjA2MjY2JywKICAgICAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogX3ZtLmlzVXBkYXRlID09IDAgPyAnbm9ybWFsJyA6ICdib2xkJywKICAgICAgICAgICAgICAgICAgICAgIH0pfSxbX3ZtLl92KCIg5oC75pWw6YePICIpXSksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJvbmUtcmlnaHQifSxbX2MoJ2VsLWlucHV0Jyx7YXR0cnM6eyJyZWFkb25seSI6X3ZtLmlzVXBkYXRlID09IDAKICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBfdm0uaW52ZW50b3J5Q2hlY2tEZXRhaWwuaXNVcGRhdGUgPT0gMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBmYWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB0cnVlLCJjbGVhcmFibGUiOiIifSxtb2RlbDp7dmFsdWU6KF92bS5pbnZlbnRvcnlDaGVja0RldGFpbC5udW1iZXIpLGNhbGxiYWNrOmZ1bmN0aW9uICgkJHYpIHtfdm0uJHNldChfdm0uaW52ZW50b3J5Q2hlY2tEZXRhaWwsICJudW1iZXIiLCAkJHYpfSxleHByZXNzaW9uOiJpbnZlbnRvcnlDaGVja0RldGFpbC5udW1iZXIifX0sWyhfdm0uaW52ZW50b3J5Q2hlY2tEZXRhaWwuY2hhcmdlVW5pdCA9PSAn57KSJyk/X2MoJ2knLHtzdGF0aWNTdHlsZTp7ImNvbG9yIjoiIzYwNjI2NiIsImZvbnQtc3R5bGUiOiJub3JtYWwifSxhdHRyczp7InNsb3QiOiJzdWZmaXgifSxzbG90OiJzdWZmaXgifSxbX3ZtLl92KF92bS5fcyhfdm0uaW52ZW50b3J5Q2hlY2tEZXRhaWwuY2hhcmdlVW5pdCkpXSk6X3ZtLl9lKCldKV0sMSldKSxfYygnZGl2Jyx7ZGlyZWN0aXZlczpbe25hbWU6InNob3ciLHJhd05hbWU6InYtc2hvdyIsdmFsdWU6KF92bS5jZXJ0aWZpY2F0ZXNob3cyID09IGZhbHNlKSxleHByZXNzaW9uOiJjZXJ0aWZpY2F0ZXNob3cyID09IGZhbHNlIn1dLHN0YXRpY0NsYXNzOiJkaXYtb25lIn0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczoib25lLWxlZnQiLHN0eWxlOih7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOgogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5pc1VwZGF0ZSA9PSAwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICcjNjA2MjY2JwogICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBfdm0uaW52ZW50b3J5Q2hlY2tEZXRhaWwuaXNVcGRhdGUgIT09IDIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJyMzZDgyZmUnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICcjNjA2MjY2JywKICAgICAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogX3ZtLmlzVXBkYXRlID09IDAgPyAnbm9ybWFsJyA6ICdib2xkJywKICAgICAgICAgICAgICAgICAgICAgIH0pfSxbX3ZtLl92KCIg5oC76YeN6YePICIpXSksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJvbmUtcmlnaHQifSxbX2MoJ2VsLWlucHV0Jyx7YXR0cnM6eyJyZWFkb25seSI6X3ZtLmlzVXBkYXRlID09IDAKICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBfdm0uaW52ZW50b3J5Q2hlY2tEZXRhaWwuaXNVcGRhdGUgIT09IDIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdHJ1ZSwiY2xlYXJhYmxlIjoiIn0sb246eyJpbnB1dCI6X3ZtLnByaWNlVG90YWx9LG1vZGVsOnt2YWx1ZTooX3ZtLmludmVudG9yeUNoZWNrRGV0YWlsLndlaWdodCksY2FsbGJhY2s6ZnVuY3Rpb24gKCQkdikge192bS4kc2V0KF92bS5pbnZlbnRvcnlDaGVja0RldGFpbCwgIndlaWdodCIsICQkdil9LGV4cHJlc3Npb246ImludmVudG9yeUNoZWNrRGV0YWlsLndlaWdodCJ9fSxbKF92bS5pbnZlbnRvcnlDaGVja0RldGFpbC5jaGFyZ2VVbml0ICE9ICfnspInKT9fYygnaScse3N0YXRpY1N0eWxlOnsiY29sb3IiOiIjNjA2MjY2IiwiZm9udC1zdHlsZSI6Im5vcm1hbCJ9LGF0dHJzOnsic2xvdCI6InN1ZmZpeCJ9LHNsb3Q6InN1ZmZpeCJ9LFtfdm0uX3YoX3ZtLl9zKF92bS5pbnZlbnRvcnlDaGVja0RldGFpbC5jaGFyZ2VVbml0KSldKTpfdm0uX2UoKV0pXSwxKV0pLF9jKCdkaXYnLHtkaXJlY3RpdmVzOlt7bmFtZToic2hvdyIscmF3TmFtZToidi1zaG93Iix2YWx1ZTooX3ZtLmNlcnRpZmljYXRlc2hvdzIgPT0gZmFsc2UpLGV4cHJlc3Npb246ImNlcnRpZmljYXRlc2hvdzIgPT0gZmFsc2UifV0sc3RhdGljQ2xhc3M6ImRpdi1vbmUifSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJvbmUtbGVmdCIsc3R5bGU6KHsKICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6CiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmlzVXBkYXRlID09IDAKICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJyM2MDYyNjYnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IF92bS5pbnZlbnRvcnlDaGVja0RldGFpbC5pc1VwZGF0ZSA9PSAwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICcjM2Q4MmZlJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnIzYwNjI2NicsCiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IF92bS5pc1VwZGF0ZSA9PSAwID8gJ25vcm1hbCcgOiAnYm9sZCcsCiAgICAgICAgICAgICAgICAgICAgICB9KX0sW192bS5fdigiIOaAu+S7tyAiKV0pLF9jKCdkaXYnLHtzdGF0aWNDbGFzczoib25lLXJpZ2h0In0sW19jKCdlbC1pbnB1dCcse2F0dHJzOnsicmVhZG9ubHkiOl92bS5pc1VwZGF0ZSA9PSAwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogX3ZtLmludmVudG9yeUNoZWNrRGV0YWlsLmlzVXBkYXRlID09IDAKICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdHJ1ZSwiY2xlYXJhYmxlIjoiIn0sbW9kZWw6e3ZhbHVlOihfdm0uaW52ZW50b3J5Q2hlY2tEZXRhaWwudG90YWxQcmljZSksY2FsbGJhY2s6ZnVuY3Rpb24gKCQkdikge192bS4kc2V0KF92bS5pbnZlbnRvcnlDaGVja0RldGFpbCwgInRvdGFsUHJpY2UiLCAkJHYpfSxleHByZXNzaW9uOiJpbnZlbnRvcnlDaGVja0RldGFpbC50b3RhbFByaWNlIn19LFtfYygnaScse3N0YXRpY1N0eWxlOnsiY29sb3IiOiIjNjA2MjY2IiwiZm9udC1zdHlsZSI6Im5vcm1hbCJ9LGF0dHJzOnsic2xvdCI6InN1ZmZpeCJ9LHNsb3Q6InN1ZmZpeCJ9LFtfdm0uX3YoX3ZtLl9zKF92bS5pbnZlbnRvcnlDaGVja0RldGFpbC5jdXJyZW5jeSkpXSldKV0sMSldKSxfYygnZGl2Jyx7ZGlyZWN0aXZlczpbe25hbWU6InNob3ciLHJhd05hbWU6InYtc2hvdyIsdmFsdWU6KF92bS5jZXJ0aWZpY2F0ZXNob3cyID09IGZhbHNlKSxleHByZXNzaW9uOiJjZXJ0aWZpY2F0ZXNob3cyID09IGZhbHNlIn1dLHN0YXRpY0NsYXNzOiJkaXYtb25lIn0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczoib25lLWxlZnQiLHN0eWxlOih7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOgogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5pc1VwZGF0ZSA9PSAwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICcjNjA2MjY2JwogICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBfdm0uaW52ZW50b3J5Q2hlY2tEZXRhaWwuaXNVcGRhdGUgIT09IDIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJyMzZDgyZmUnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICcjNjA2MjY2JywKICAgICAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogX3ZtLmlzVXBkYXRlID09IDAgPyAnbm9ybWFsJyA6ICdib2xkJywKICAgICAgICAgICAgICAgICAgICAgIH0pfSxbX3ZtLl92KCIg6Zu25ZSu5Y2V5Lu3ICIpXSksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJvbmUtcmlnaHQifSxbX2MoJ2VsLWlucHV0Jyx7YXR0cnM6eyJyZWFkb25seSI6X3ZtLmlzVXBkYXRlID09IDAKICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBfdm0uaW52ZW50b3J5Q2hlY2tEZXRhaWwuaXNVcGRhdGUgIT09IDIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdHJ1ZSwiY2xlYXJhYmxlIjoiIn0sbW9kZWw6e3ZhbHVlOihfdm0uaW52ZW50b3J5Q2hlY2tEZXRhaWwucmV0YWlsUHJpY2UpLGNhbGxiYWNrOmZ1bmN0aW9uICgkJHYpIHtfdm0uJHNldChfdm0uaW52ZW50b3J5Q2hlY2tEZXRhaWwsICJyZXRhaWxQcmljZSIsICQkdil9LGV4cHJlc3Npb246ImludmVudG9yeUNoZWNrRGV0YWlsLnJldGFpbFByaWNlIn19KV0sMSldKSxfYygnZGl2Jyx7ZGlyZWN0aXZlczpbe25hbWU6InNob3ciLHJhd05hbWU6InYtc2hvdyIsdmFsdWU6KF92bS5jZXJ0aWZpY2F0ZXNob3cyID09IGZhbHNlKSxleHByZXNzaW9uOiJjZXJ0aWZpY2F0ZXNob3cyID09IGZhbHNlIn1dLHN0YXRpY0NsYXNzOiJkaXYtb25lIn0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczoib25lLWxlZnQiLHN0eWxlOih7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOgogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5pc1VwZGF0ZSA9PSAwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICcjNjA2MjY2JwogICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBfdm0uaW52ZW50b3J5Q2hlY2tEZXRhaWwuaXNVcGRhdGUgIT09IDIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJyMzZDgyZmUnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICcjNjA2MjY2JywKICAgICAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogX3ZtLmlzVXBkYXRlID09IDAgPyAnbm9ybWFsJyA6ICdib2xkJywKICAgICAgICAgICAgICAgICAgICAgIH0pfSxbX3ZtLl92KCIg5om55Y+R5Y2V5Lu3ICIpXSksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJvbmUtcmlnaHQifSxbX2MoJ2VsLWlucHV0Jyx7YXR0cnM6eyJyZWFkb25seSI6X3ZtLmlzVXBkYXRlID09IDAKICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBfdm0uaW52ZW50b3J5Q2hlY2tEZXRhaWwuaXNVcGRhdGUgIT09IDIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdHJ1ZSwiY2xlYXJhYmxlIjoiIn0sbW9kZWw6e3ZhbHVlOihfdm0uaW52ZW50b3J5Q2hlY2tEZXRhaWwud2hvbGVzYWxlUHJpY2UpLGNhbGxiYWNrOmZ1bmN0aW9uICgkJHYpIHtfdm0uJHNldChfdm0uaW52ZW50b3J5Q2hlY2tEZXRhaWwsICJ3aG9sZXNhbGVQcmljZSIsICQkdil9LGV4cHJlc3Npb246ImludmVudG9yeUNoZWNrRGV0YWlsLndob2xlc2FsZVByaWNlIn19KV0sMSldKSxfYygnZGl2Jyx7ZGlyZWN0aXZlczpbe25hbWU6InNob3ciLHJhd05hbWU6InYtc2hvdyIsdmFsdWU6KF92bS5jZXJ0aWZpY2F0ZXNob3cyID09IGZhbHNlKSxleHByZXNzaW9uOiJjZXJ0aWZpY2F0ZXNob3cyID09IGZhbHNlIn1dLHN0YXRpY0NsYXNzOiJkaXYtb25lIn0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczoib25lLWxlZnQiLHN0eWxlOih7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOgogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5pc1VwZGF0ZSA9PSAwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICcjNjA2MjY2JwogICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBfdm0uaW52ZW50b3J5Q2hlY2tEZXRhaWwuaXNVcGRhdGUgIT09IDIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJyMzZDgyZmUnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICcjNjA2MjY2JywKICAgICAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogX3ZtLmlzVXBkYXRlID09IDAgPyAnbm9ybWFsJyA6ICdib2xkJywKICAgICAgICAgICAgICAgICAgICAgIH0pfSxbX3ZtLl92KCIg5aSW5biB5YWR5Lq65rCR5biB5rGH546HICIpXSksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJvbmUtcmlnaHQifSxbX2MoJ2VsLWlucHV0Jyx7YXR0cnM6eyJyZWFkb25seSI6X3ZtLmlzVXBkYXRlID09IDAKICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBfdm0uaW52ZW50b3J5Q2hlY2tEZXRhaWwuaXNVcGRhdGUgIT09IDIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdHJ1ZSwiY2xlYXJhYmxlIjoiIn0sbW9kZWw6e3ZhbHVlOihfdm0uaW52ZW50b3J5Q2hlY2tEZXRhaWwudG90YWxDblJhdGUpLGNhbGxiYWNrOmZ1bmN0aW9uICgkJHYpIHtfdm0uJHNldChfdm0uaW52ZW50b3J5Q2hlY2tEZXRhaWwsICJ0b3RhbENuUmF0ZSIsICQkdil9LGV4cHJlc3Npb246ImludmVudG9yeUNoZWNrRGV0YWlsLnRvdGFsQ25SYXRlIn19KV0sMSldKSxfYygnZGl2Jyx7ZGlyZWN0aXZlczpbe25hbWU6InNob3ciLHJhd05hbWU6InYtc2hvdyIsdmFsdWU6KF92bS5jZXJ0aWZpY2F0ZXNob3cyID09IGZhbHNlKSxleHByZXNzaW9uOiJjZXJ0aWZpY2F0ZXNob3cyID09IGZhbHNlIn1dLHN0YXRpY0NsYXNzOiJkaXYtb25lIn0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczoib25lLWxlZnQiLHN0eWxlOih7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOgogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5pc1VwZGF0ZSA9PSAwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICcjNjA2MjY2JwogICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBfdm0uaW52ZW50b3J5Q2hlY2tEZXRhaWwuaXNVcGRhdGUgIT09IDIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJyMzZDgyZmUnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICcjNjA2MjY2JywKICAgICAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogX3ZtLmlzVXBkYXRlID09IDAgPyAnbm9ybWFsJyA6ICdib2xkJywKICAgICAgICAgICAgICAgICAgICAgIH0pfSxbX3ZtLl92KCIg5oC75Lu35Lq65rCR5biB6YeR6aKdICIpXSksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJvbmUtcmlnaHQifSxbX2MoJ2VsLWlucHV0Jyx7YXR0cnM6eyJyZWFkb25seSI6X3ZtLmlzVXBkYXRlID09IDAKICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBfdm0uaW52ZW50b3J5Q2hlY2tEZXRhaWwuaXNVcGRhdGUgIT09IDIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdHJ1ZSwiY2xlYXJhYmxlIjoiIn0sbW9kZWw6e3ZhbHVlOihfdm0uaW52ZW50b3J5Q2hlY2tEZXRhaWwudG90YWxDblByaWNlKSxjYWxsYmFjazpmdW5jdGlvbiAoJCR2KSB7X3ZtLiRzZXQoX3ZtLmludmVudG9yeUNoZWNrRGV0YWlsLCAidG90YWxDblByaWNlIiwgJCR2KX0sZXhwcmVzc2lvbjoiaW52ZW50b3J5Q2hlY2tEZXRhaWwudG90YWxDblByaWNlIn19KV0sMSldKSxfYygnZGl2Jyx7ZGlyZWN0aXZlczpbe25hbWU6InNob3ciLHJhd05hbWU6InYtc2hvdyIsdmFsdWU6KF92bS5jZXJ0aWZpY2F0ZXNob3cyID09IGZhbHNlKSxleHByZXNzaW9uOiJjZXJ0aWZpY2F0ZXNob3cyID09IGZhbHNlIn1dLHN0YXRpY0NsYXNzOiJkaXYtb25lIn0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczoib25lLWxlZnQiLHN0eWxlOih7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOgogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5pc1VwZGF0ZSA9PSAwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICcjNjA2MjY2JwogICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBfdm0uaW52ZW50b3J5Q2hlY2tEZXRhaWwuaXNVcGRhdGUgIT09IDIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJyMzZDgyZmUnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICcjNjA2MjY2JywKICAgICAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogX3ZtLmlzVXBkYXRlID09IDAgPyAnbm9ybWFsJyA6ICdib2xkJywKICAgICAgICAgICAgICAgICAgICAgIH0pfSxbX3ZtLl92KCIg5riv5biB5YWR5Lq65rCR5biB5rGH546HICIpXSksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJvbmUtcmlnaHQifSxbX2MoJ2VsLWlucHV0Jyx7YXR0cnM6eyJyZWFkb25seSI6X3ZtLmlzVXBkYXRlID09IDAKICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBfdm0uaW52ZW50b3J5Q2hlY2tEZXRhaWwuaXNVcGRhdGUgIT09IDIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdHJ1ZSwiY2xlYXJhYmxlIjoiIn0sbW9kZWw6e3ZhbHVlOihfdm0uaW52ZW50b3J5Q2hlY2tEZXRhaWwudG90YWxIa1JhdGUpLGNhbGxiYWNrOmZ1bmN0aW9uICgkJHYpIHtfdm0uJHNldChfdm0uaW52ZW50b3J5Q2hlY2tEZXRhaWwsICJ0b3RhbEhrUmF0ZSIsICQkdil9LGV4cHJlc3Npb246ImludmVudG9yeUNoZWNrRGV0YWlsLnRvdGFsSGtSYXRlIn19KV0sMSldKSxfYygnZGl2Jyx7ZGlyZWN0aXZlczpbe25hbWU6InNob3ciLHJhd05hbWU6InYtc2hvdyIsdmFsdWU6KF92bS5jZXJ0aWZpY2F0ZXNob3cyID09IGZhbHNlKSxleHByZXNzaW9uOiJjZXJ0aWZpY2F0ZXNob3cyID09IGZhbHNlIn1dLHN0YXRpY0NsYXNzOiJkaXYtb25lIn0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczoib25lLWxlZnQiLHN0eWxlOih7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOgogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5pc1VwZGF0ZSA9PSAwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICcjNjA2MjY2JwogICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBfdm0uaW52ZW50b3J5Q2hlY2tEZXRhaWwuaXNVcGRhdGUgIT09IDIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJyMzZDgyZmUnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICcjNjA2MjY2JywKICAgICAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogX3ZtLmlzVXBkYXRlID09IDAgPyAnbm9ybWFsJyA6ICdib2xkJywKICAgICAgICAgICAgICAgICAgICAgIH0pfSxbX3ZtLl92KCIg5oC75Lu35riv5biB6YeR6aKdICIpXSksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJvbmUtcmlnaHQifSxbX2MoJ2VsLWlucHV0Jyx7YXR0cnM6eyJyZWFkb25seSI6X3ZtLmlzVXBkYXRlID09IDAKICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBfdm0uaW52ZW50b3J5Q2hlY2tEZXRhaWwuaXNVcGRhdGUgIT09IDIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdHJ1ZSwiY2xlYXJhYmxlIjoiIn0sbW9kZWw6e3ZhbHVlOihfdm0uaW52ZW50b3J5Q2hlY2tEZXRhaWwudG90YWxIa1ByaWNlKSxjYWxsYmFjazpmdW5jdGlvbiAoJCR2KSB7X3ZtLiRzZXQoX3ZtLmludmVudG9yeUNoZWNrRGV0YWlsLCAidG90YWxIa1ByaWNlIiwgJCR2KX0sZXhwcmVzc2lvbjoiaW52ZW50b3J5Q2hlY2tEZXRhaWwudG90YWxIa1ByaWNlIn19KV0sMSldKSxfYygnZGl2Jyx7ZGlyZWN0aXZlczpbe25hbWU6InNob3ciLHJhd05hbWU6InYtc2hvdyIsdmFsdWU6KF92bS5jZXJ0aWZpY2F0ZXNob3cyID09IGZhbHNlKSxleHByZXNzaW9uOiJjZXJ0aWZpY2F0ZXNob3cyID09IGZhbHNlIn1dLHN0YXRpY0NsYXNzOiJkaXYtb25lIn0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczoib25lLWxlZnQiLHN0eWxlOih7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOgogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5pc1VwZGF0ZSA9PSAwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICcjNjA2MjY2JwogICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBfdm0uaW52ZW50b3J5Q2hlY2tEZXRhaWwuaXNVcGRhdGUgIT09IDIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJyMzZDgyZmUnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICcjNjA2MjY2JywKICAgICAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogX3ZtLmlzVXBkYXRlID09IDAgPyAnbm9ybWFsJyA6ICdib2xkJywKICAgICAgICAgICAgICAgICAgICAgIH0pfSxbX3ZtLl92KCIg5bC65a+4L+avq+exsyAiKV0pLF9jKCdkaXYnLHtzdGF0aWNDbGFzczoib25lLXJpZ2h0In0sW19jKCdlbC1pbnB1dCcse2F0dHJzOnsicmVhZG9ubHkiOl92bS5pc1VwZGF0ZSA9PSAwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogX3ZtLmludmVudG9yeUNoZWNrRGV0YWlsLmlzVXBkYXRlICE9PSAyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHRydWUsImNsZWFyYWJsZSI6IiJ9LG1vZGVsOnt2YWx1ZTooX3ZtLmludmVudG9yeUNoZWNrRGV0YWlsLnNpemUpLGNhbGxiYWNrOmZ1bmN0aW9uICgkJHYpIHtfdm0uJHNldChfdm0uaW52ZW50b3J5Q2hlY2tEZXRhaWwsICJzaXplIiwgJCR2KX0sZXhwcmVzc2lvbjoiaW52ZW50b3J5Q2hlY2tEZXRhaWwuc2l6ZSJ9fSldLDEpXSksX2MoJ2Rpdicse2RpcmVjdGl2ZXM6W3tuYW1lOiJzaG93IixyYXdOYW1lOiJ2LXNob3ciLHZhbHVlOihfdm0uY2VydGlmaWNhdGVzaG93MiA9PSBmYWxzZSksZXhwcmVzc2lvbjoiY2VydGlmaWNhdGVzaG93MiA9PSBmYWxzZSJ9XSxzdGF0aWNDbGFzczoiZGl2LW9uZSJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6Im9uZS1sZWZ0IixzdHlsZTooewogICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjoKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uaXNVcGRhdGUgPT0gMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnIzYwNjI2NicKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogX3ZtLmludmVudG9yeUNoZWNrRGV0YWlsLmlzVXBkYXRlICE9PSAyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICcjM2Q4MmZlJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnIzYwNjI2NicsCiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IF92bS5pc1VwZGF0ZSA9PSAwID8gJ25vcm1hbCcgOiAnYm9sZCcsCiAgICAgICAgICAgICAgICAgICAgICB9KX0sW192bS5fdigiIOminOiJsiAiKV0pLF9jKCdkaXYnLHtzdGF0aWNDbGFzczoib25lLXJpZ2h0In0sW19jKCdlbC1pbnB1dCcse2F0dHJzOnsicmVhZG9ubHkiOl92bS5pc1VwZGF0ZSA9PSAwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogX3ZtLmludmVudG9yeUNoZWNrRGV0YWlsLmlzVXBkYXRlICE9PSAyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHRydWUsImNsZWFyYWJsZSI6IiJ9LG1vZGVsOnt2YWx1ZTooX3ZtLmludmVudG9yeUNoZWNrRGV0YWlsLmNvbG9yKSxjYWxsYmFjazpmdW5jdGlvbiAoJCR2KSB7X3ZtLiRzZXQoX3ZtLmludmVudG9yeUNoZWNrRGV0YWlsLCAiY29sb3IiLCAkJHYpfSxleHByZXNzaW9uOiJpbnZlbnRvcnlDaGVja0RldGFpbC5jb2xvciJ9fSldLDEpXSksX2MoJ2Rpdicse2RpcmVjdGl2ZXM6W3tuYW1lOiJzaG93IixyYXdOYW1lOiJ2LXNob3ciLHZhbHVlOihfdm0uY2VydGlmaWNhdGVzaG93MiA9PSBmYWxzZSksZXhwcmVzc2lvbjoiY2VydGlmaWNhdGVzaG93MiA9PSBmYWxzZSJ9XSxzdGF0aWNDbGFzczoiZGl2LW9uZSJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6Im9uZS1sZWZ0IixzdHlsZTooewogICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjoKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uaXNVcGRhdGUgPT0gMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnIzYwNjI2NicKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogX3ZtLmludmVudG9yeUNoZWNrRGV0YWlsLmlzVXBkYXRlICE9PSAyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICcjM2Q4MmZlJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnIzYwNjI2NicsCiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IF92bS5pc1VwZGF0ZSA9PSAwID8gJ25vcm1hbCcgOiAnYm9sZCcsCiAgICAgICAgICAgICAgICAgICAgICB9KX0sW192bS5fdigiIOmFjeWvuSAiKV0pLF9jKCdkaXYnLHtzdGF0aWNDbGFzczoib25lLXJpZ2h0In0sW19jKCdlbC1pbnB1dCcse2F0dHJzOnsicmVhZG9ubHkiOl92bS5pc1VwZGF0ZSA9PSAwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogX3ZtLmludmVudG9yeUNoZWNrRGV0YWlsLmlzVXBkYXRlICE9PSAyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHRydWUsImNsZWFyYWJsZSI6IiJ9LG1vZGVsOnt2YWx1ZTooX3ZtLmludmVudG9yeUNoZWNrRGV0YWlsLnBhaXJlZCksY2FsbGJhY2s6ZnVuY3Rpb24gKCQkdikge192bS4kc2V0KF92bS5pbnZlbnRvcnlDaGVja0RldGFpbCwgInBhaXJlZCIsICQkdil9LGV4cHJlc3Npb246ImludmVudG9yeUNoZWNrRGV0YWlsLnBhaXJlZCJ9fSldLDEpXSksX2MoJ2Rpdicse2RpcmVjdGl2ZXM6W3tuYW1lOiJzaG93IixyYXdOYW1lOiJ2LXNob3ciLHZhbHVlOihfdm0uY2VydGlmaWNhdGVzaG93MiA9PSBmYWxzZSksZXhwcmVzc2lvbjoiY2VydGlmaWNhdGVzaG93MiA9PSBmYWxzZSJ9XSxzdGF0aWNDbGFzczoiZGl2LW9uZSJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6Im9uZS1sZWZ0IixzdHlsZTooewogICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjoKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uaXNVcGRhdGUgPT0gMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnIzYwNjI2NicKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogX3ZtLmludmVudG9yeUNoZWNrRGV0YWlsLmlzVXBkYXRlICE9PSAyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICcjM2Q4MmZlJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnIzYwNjI2NicsCiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IF92bS5pc1VwZGF0ZSA9PSAwID8gJ25vcm1hbCcgOiAnYm9sZCcsCiAgICAgICAgICAgICAgICAgICAgICB9KX0sW192bS5fdigiIOWTgei0qCAiKV0pLF9jKCdkaXYnLHtzdGF0aWNDbGFzczoib25lLXJpZ2h0In0sW19jKCdlbC1pbnB1dCcse2F0dHJzOnsicmVhZG9ubHkiOl92bS5pc1VwZGF0ZSA9PSAwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogX3ZtLmludmVudG9yeUNoZWNrRGV0YWlsLmlzVXBkYXRlICE9PSAyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHRydWUsImNsZWFyYWJsZSI6IiJ9LG1vZGVsOnt2YWx1ZTooX3ZtLmludmVudG9yeUNoZWNrRGV0YWlsLnF1YWxpdHkpLGNhbGxiYWNrOmZ1bmN0aW9uICgkJHYpIHtfdm0uJHNldChfdm0uaW52ZW50b3J5Q2hlY2tEZXRhaWwsICJxdWFsaXR5IiwgJCR2KX0sZXhwcmVzc2lvbjoiaW52ZW50b3J5Q2hlY2tEZXRhaWwucXVhbGl0eSJ9fSldLDEpXSksX2MoJ2Rpdicse2RpcmVjdGl2ZXM6W3tuYW1lOiJzaG93IixyYXdOYW1lOiJ2LXNob3ciLHZhbHVlOihfdm0uY2VydGlmaWNhdGVzaG93MiA9PSBmYWxzZSksZXhwcmVzc2lvbjoiY2VydGlmaWNhdGVzaG93MiA9PSBmYWxzZSJ9XSxzdGF0aWNDbGFzczoiZGl2LW9uZSJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6Im9uZS1sZWZ0IixzdHlsZTooewogICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjoKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uaXNVcGRhdGUgPT0gMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnIzYwNjI2NicKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogX3ZtLmludmVudG9yeUNoZWNrRGV0YWlsLmlzVXBkYXRlICE9PSAyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICcjM2Q4MmZlJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnIzYwNjI2NicsCiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IF92bS5pc1VwZGF0ZSA9PSAwID8gJ25vcm1hbCcgOiAnYm9sZCcsCiAgICAgICAgICAgICAgICAgICAgICB9KX0sW192bS5fdigiIOWTgei0qOe7huWIhiAiKV0pLF9jKCdkaXYnLHtzdGF0aWNDbGFzczoib25lLXJpZ2h0In0sW19jKCdlbC1pbnB1dCcse2F0dHJzOnsicmVhZG9ubHkiOl92bS5pc1VwZGF0ZSA9PSAwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogX3ZtLmludmVudG9yeUNoZWNrRGV0YWlsLmlzVXBkYXRlICE9PSAyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHRydWUsImNsZWFyYWJsZSI6IiJ9LG1vZGVsOnt2YWx1ZTooX3ZtLmludmVudG9yeUNoZWNrRGV0YWlsLnN1YnNlY3Rpb24pLGNhbGxiYWNrOmZ1bmN0aW9uICgkJHYpIHtfdm0uJHNldChfdm0uaW52ZW50b3J5Q2hlY2tEZXRhaWwsICJzdWJzZWN0aW9uIiwgJCR2KX0sZXhwcmVzc2lvbjoiaW52ZW50b3J5Q2hlY2tEZXRhaWwuc3Vic2VjdGlvbiJ9fSldLDEpXSksX2MoJ2Rpdicse2RpcmVjdGl2ZXM6W3tuYW1lOiJzaG93IixyYXdOYW1lOiJ2LXNob3ciLHZhbHVlOihfdm0uY2VydGlmaWNhdGVzaG93MiA9PSBmYWxzZSksZXhwcmVzc2lvbjoiY2VydGlmaWNhdGVzaG93MiA9PSBmYWxzZSJ9XSxzdGF0aWNDbGFzczoiZGl2LW9uZSJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6Im9uZS1sZWZ0IixzdHlsZTooewogICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjoKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uaXNVcGRhdGUgPT0gMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnIzYwNjI2NicKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogX3ZtLmludmVudG9yeUNoZWNrRGV0YWlsLmlzVXBkYXRlICE9PSAyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICcjM2Q4MmZlJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnIzYwNjI2NicsCiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IF92bS5pc1VwZGF0ZSA9PSAwID8gJ25vcm1hbCcgOiAnYm9sZCcsCiAgICAgICAgICAgICAgICAgICAgICB9KX0sW192bS5fdigiIOebkuWtkOe8luWPtyAiKV0pLF9jKCdkaXYnLHtzdGF0aWNDbGFzczoib25lLXJpZ2h0In0sW19jKCdlbC1pbnB1dCcse2F0dHJzOnsicmVhZG9ubHkiOl92bS5pc1VwZGF0ZSA9PSAwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogX3ZtLmludmVudG9yeUNoZWNrRGV0YWlsLmlzVXBkYXRlICE9PSAyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHRydWUsImNsZWFyYWJsZSI6IiJ9LG1vZGVsOnt2YWx1ZTooX3ZtLmludmVudG9yeUNoZWNrRGV0YWlsLmJveE51bWJlciksY2FsbGJhY2s6ZnVuY3Rpb24gKCQkdikge192bS4kc2V0KF92bS5pbnZlbnRvcnlDaGVja0RldGFpbCwgImJveE51bWJlciIsICQkdil9LGV4cHJlc3Npb246ImludmVudG9yeUNoZWNrRGV0YWlsLmJveE51bWJlciJ9fSldLDEpXSksX2MoJ2Rpdicse2RpcmVjdGl2ZXM6W3tuYW1lOiJzaG93IixyYXdOYW1lOiJ2LXNob3ciLHZhbHVlOihfdm0uY2VydGlmaWNhdGVzaG93MiA9PSBmYWxzZSksZXhwcmVzc2lvbjoiY2VydGlmaWNhdGVzaG93MiA9PSBmYWxzZSJ9XSxzdGF0aWNDbGFzczoiZGl2LW9uZSJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6Im9uZS1sZWZ0IixzdHlsZTooewogICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjoKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uaXNVcGRhdGUgPT0gMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnIzYwNjI2NicKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogX3ZtLmludmVudG9yeUNoZWNrRGV0YWlsLmlzVXBkYXRlICE9PSAyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICcjM2Q4MmZlJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnIzYwNjI2NicsCiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IF92bS5pc1VwZGF0ZSA9PSAwID8gJ25vcm1hbCcgOiAnYm9sZCcsCiAgICAgICAgICAgICAgICAgICAgICB9KX0sW192bS5fdigiIOivgeS5pue8luWPtyAiKV0pLF9jKCdkaXYnLHtzdGF0aWNDbGFzczoib25lLXJpZ2h0In0sW19jKCdlbC1pbnB1dCcse2F0dHJzOnsicmVhZG9ubHkiOl92bS5pc1VwZGF0ZSA9PSAwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogX3ZtLmludmVudG9yeUNoZWNrRGV0YWlsLmlzVXBkYXRlICE9PSAyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHRydWUsImNsZWFyYWJsZSI6IiJ9LG1vZGVsOnt2YWx1ZTooX3ZtLmludmVudG9yeUNoZWNrRGV0YWlsLmNlcnRpZmljYXRlTnVtYmVyKSxjYWxsYmFjazpmdW5jdGlvbiAoJCR2KSB7X3ZtLiRzZXQoX3ZtLmludmVudG9yeUNoZWNrRGV0YWlsLCAiY2VydGlmaWNhdGVOdW1iZXIiLCAkJHYpfSxleHByZXNzaW9uOiJpbnZlbnRvcnlDaGVja0RldGFpbC5jZXJ0aWZpY2F0ZU51bWJlciJ9fSldLDEpXSksX2MoJ2Rpdicse2RpcmVjdGl2ZXM6W3tuYW1lOiJzaG93IixyYXdOYW1lOiJ2LXNob3ciLHZhbHVlOihfdm0uY2VydGlmaWNhdGVzaG93MiA9PSBmYWxzZSksZXhwcmVzc2lvbjoiY2VydGlmaWNhdGVzaG93MiA9PSBmYWxzZSJ9XSxzdGF0aWNDbGFzczoiZGl2LW9uZSJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6Im9uZS1sZWZ0IixzdHlsZTooewogICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjoKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uaXNVcGRhdGUgPT0gMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnIzYwNjI2NicKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogX3ZtLmludmVudG9yeUNoZWNrRGV0YWlsLmlzVXBkYXRlICE9PSAyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICcjM2Q4MmZlJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnIzYwNjI2NicsCiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IF92bS5pc1VwZGF0ZSA9PSAwID8gJ25vcm1hbCcgOiAnYm9sZCcsCiAgICAgICAgICAgICAgICAgICAgICB9KX0sW192bS5fdigiIOWPkeelqOWPtyAiKV0pLF9jKCdkaXYnLHtzdGF0aWNDbGFzczoib25lLXJpZ2h0In0sW19jKCdlbC1pbnB1dCcse2F0dHJzOnsicmVhZG9ubHkiOl92bS5pc1VwZGF0ZSA9PSAwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogX3ZtLmludmVudG9yeUNoZWNrRGV0YWlsLmlzVXBkYXRlICE9PSAyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHRydWUsImNsZWFyYWJsZSI6IiJ9LG1vZGVsOnt2YWx1ZTooX3ZtLmludmVudG9yeUNoZWNrRGV0YWlsLmJpbGxOdW1iZXIpLGNhbGxiYWNrOmZ1bmN0aW9uICgkJHYpIHtfdm0uJHNldChfdm0uaW52ZW50b3J5Q2hlY2tEZXRhaWwsICJiaWxsTnVtYmVyIiwgJCR2KX0sZXhwcmVzc2lvbjoiaW52ZW50b3J5Q2hlY2tEZXRhaWwuYmlsbE51bWJlciJ9fSldLDEpXSldKSxfYygncCcse3N0YXRpY0NsYXNzOiJmb250LXRpdGxlLXN0eWxlIn0sW192bS5fdigi5Zu+54mH5L+h5oGvIildKSxfYygnZGl2Jyx7c3RhdGljU3R5bGU6eyJkaXNwbGF5IjoiZmxleCJ9fSxbX2MoJ3AnLHtzdHlsZTooewogICAgICAgICAgICAgICAgICAgICAgY29sb3I6CiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5pc1VwZGF0ZSA9PSAwCiAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnIzYwNjI2NicKICAgICAgICAgICAgICAgICAgICAgICAgICA6IF92bS5pbnZlbnRvcnlDaGVja0RldGFpbC5pc1VwZGF0ZSAhPT0gMgogICAgICAgICAgICAgICAgICAgICAgICAgID8gJyMzZDgyZmUnCiAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnIzYwNjI2NicsCiAgICAgICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiBfdm0uaXNVcGRhdGUgPT0gMCA/ICdub3JtYWwnIDogJ2JvbGQnLAogICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiAwLAogICAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICc1MHB4JywKICAgICAgICAgICAgICAgICAgICB9KX0sW192bS5fdigiIOWbvueJh++8miAiKV0pLF9jKCdkaXYnLHtzdGF0aWNDbGFzczoidXBsb2FkLWltZ3MifSxbX2MoJ2Rpdicse2RpcmVjdGl2ZXM6W3tuYW1lOiJzaG93IixyYXdOYW1lOiJ2LXNob3ciLHZhbHVlOigKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmlzVXBkYXRlID09IDEgJiYgX3ZtLmludmVudG9yeUNoZWNrRGV0YWlsLmlzVXBkYXRlICE9PSAyCiAgICAgICAgICAgICAgICAgICAgICApLGV4cHJlc3Npb246IlxuICAgICAgICAgICAgICAgICAgICAgICAgaXNVcGRhdGUgPT0gMSAmJiBpbnZlbnRvcnlDaGVja0RldGFpbC5pc1VwZGF0ZSAhPT0gMlxuICAgICAgICAgICAgICAgICAgICAgICJ9XSxzdGF0aWNDbGFzczoiYWRkIn0sW19jKCdmb3JtJyx7c3RhdGljU3R5bGU6eyJ3aWR0aCI6IjEwMHB4In0sYXR0cnM6eyJlbmN0eXBlIjoibXVsdGlwYXJ0L2Zvcm0tZGF0YSJ9fSxbX2MoJ2lucHV0Jyx7c3RhdGljQ2xhc3M6ImlucHV0VXBsb2FkIixhdHRyczp7Im11bHRpcGxlIjoiIiwidHlwZSI6ImZpbGUiLCJuYW1lIjoiaW1nIiwiYWNjZXB0IjoiaW1hZ2UvKiJ9LG9uOnsiY2hhbmdlIjpmdW5jdGlvbigkZXZlbnQpe3JldHVybiBfdm0uaW5wdXRDaGFuZ2UoJGV2ZW50KX19fSksX2MoJ2knLHtzdGF0aWNDbGFzczoiZWwtaWNvbi1wbHVzIGFkZEljb24ifSldKV0pLF9jKCdkaXYnLHtzdGF0aWNDbGFzczoiZGVsSW1nIixzdGF0aWNTdHlsZTp7ImRpc3BsYXkiOiJmbGV4IiwicG9zaXRpb24iOiJyZWxhdGl2ZSIsImZsZXgtd3JhcCI6IndyYXAifSxhdHRyczp7ImlkIjoiZGVsSW1nIn19LF92bS5fbCgoX3ZtLmltZ0xpc3QpLGZ1bmN0aW9uKGltZ3VybCxpbmRleCl7cmV0dXJuIF9jKCdkaXYnLHtrZXk6aW5kZXgsc3RhdGljU3R5bGU6eyJtYXJnaW4tbGVmdCI6IjEwcHgiLCJwb3NpdGlvbiI6InJlbGF0aXZlIn19LFsoaW1ndXJsICE9PSAnJyAmJiBpbWd1cmwgIT09IG51bGwpP19jKCdzcGFuJyx7c3RhdGljQ2xhc3M6InNwYW5TdHlsZSIsb246eyJjbGljayI6ZnVuY3Rpb24oJGV2ZW50KXtyZXR1cm4gX3ZtLmRlbEltYWdlKGluZGV4KX19fSxbX3ZtLl92KCJ4IildKTpfdm0uX2UoKSwoaW1ndXJsICE9PSAnJyAmJiBpbWd1cmwgIT09IG51bGwpP19jKCdpbWcnLHtzdGF0aWNTdHlsZTp7ImJvcmRlci1yYWRpdXMiOiI1cHgiLCJvYmplY3QtZml0IjoiY292ZXIifSxhdHRyczp7InNyYyI6X3ZtLmltZyArICcvZmlsZS8nICsgaW1ndXJsLCJ3aWR0aCI6IjEwMHB4IiwiaGVpZ2h0IjoiMTAwcHgifX0pOl92bS5fZSgpXSl9KSwwKV0pXSksX2MoJ3AnLHtzdGF0aWNDbGFzczoiZm9udC10aXRsZS1zdHlsZSJ9LFtfdm0uX3YoIuWkh+azqOS/oeaBryIpXSksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJmb250LWRpdiJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6ImRpdi1vbmUtbm90ZSIsc3RhdGljU3R5bGU6eyJib3JkZXItYm90dG9tIjoiMCJ9LGF0dHJzOnsiaWQiOiJvbmUtbm90ZSJ9fSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJvbmUtbGVmdCIsc3R5bGU6KHsKICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6CiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmlzVXBkYXRlID09IDAKICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJyM2MDYyNjYnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IF92bS5pbnZlbnRvcnlDaGVja0RldGFpbC5pc1VwZGF0ZSAhPT0gMgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnIzNkODJmZScKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogJyM2MDYyNjYnLAogICAgICAgICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiBfdm0uaXNVcGRhdGUgPT0gMCA/ICdub3JtYWwnIDogJ2JvbGQnLAogICAgICAgICAgICAgICAgICAgICAgfSl9LFtfdm0uX3YoIiDmiJDmnKzlpIfms6ggIildKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6Im9uZS1yaWdodCJ9LFtfYygnZWwtaW5wdXQnLHthdHRyczp7InR5cGUiOiJ0ZXh0YXJlYSIsInJlYWRvbmx5Ijpfdm0uaXNVcGRhdGUgPT0gMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IF92bS5pbnZlbnRvcnlDaGVja0RldGFpbC5pc1VwZGF0ZSAhPT0gMgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBmYWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB0cnVlfSxtb2RlbDp7dmFsdWU6KF92bS5pbnZlbnRvcnlDaGVja0RldGFpbC50b3RhbFByaWNlTm90ZSksY2FsbGJhY2s6ZnVuY3Rpb24gKCQkdikge192bS4kc2V0KF92bS5pbnZlbnRvcnlDaGVja0RldGFpbCwgInRvdGFsUHJpY2VOb3RlIiwgJCR2KX0sZXhwcmVzc2lvbjoiaW52ZW50b3J5Q2hlY2tEZXRhaWwudG90YWxQcmljZU5vdGUifX0pXSwxKV0pXSksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJmb250LWRpdiJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6ImRpdi1vbmUtbm90ZSIsYXR0cnM6eyJpZCI6Im9uZS1ub3RlIn19LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6Im9uZS1sZWZ0IixzdHlsZTooewogICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjoKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uaXNVcGRhdGUgPT0gMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnIzYwNjI2NicKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogX3ZtLmludmVudG9yeUNoZWNrRGV0YWlsLmlzVXBkYXRlICE9PSAyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICcjM2Q4MmZlJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnIzYwNjI2NicsCiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IF92bS5pc1VwZGF0ZSA9PSAwID8gJ25vcm1hbCcgOiAnYm9sZCcsCiAgICAgICAgICAgICAgICAgICAgICB9KX0sW192bS5fdigiIOS6p+WTgeWkh+azqCAiKV0pLF9jKCdkaXYnLHtzdGF0aWNDbGFzczoib25lLXJpZ2h0In0sW19jKCdlbC1pbnB1dCcse2F0dHJzOnsidHlwZSI6InRleHRhcmVhIiwicmVhZG9ubHkiOl92bS5pc1VwZGF0ZSA9PSAwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogX3ZtLmludmVudG9yeUNoZWNrRGV0YWlsLmlzVXBkYXRlICE9PSAyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHRydWV9LG1vZGVsOnt2YWx1ZTooX3ZtLmludmVudG9yeUNoZWNrRGV0YWlsLm5vdGUpLGNhbGxiYWNrOmZ1bmN0aW9uICgkJHYpIHtfdm0uJHNldChfdm0uaW52ZW50b3J5Q2hlY2tEZXRhaWwsICJub3RlIiwgJCR2KX0sZXhwcmVzc2lvbjoiaW52ZW50b3J5Q2hlY2tEZXRhaWwubm90ZSJ9fSldLDEpXSldKV0pLF9jKCdlbC10YWItcGFuZScse2F0dHJzOnsibGFiZWwiOiLljoblj7LorrDlvZUiLCJuYW1lIjoic2Vjb25kIn19LFtfYygncCcse3N0YXRpY0NsYXNzOiJmb250LXRpdGxlLXN0eWxlIixzdGF0aWNTdHlsZTp7Im1hcmdpbi10b3AiOiIwIn19LFtfdm0uX3YoIiDmnZDmlpnnirbmgIHvvJoiK192bS5fcyhfdm0uaW52ZW50b3J5Q2hlY2tEZXRhaWwuc3RhdGUgPT0gMCA/ICLlupPlrZjkuK0iIDogX3ZtLmludmVudG9yeUNoZWNrRGV0YWlsLnN0YXRlID09IDEgPyAi6L+Q6L6T5LitIiA6IF92bS5pbnZlbnRvcnlDaGVja0RldGFpbC5zdGF0ZSA9PSAyID8gIuWKoOW3peS4rSIgOiBfdm0uaW52ZW50b3J5Q2hlY2tEZXRhaWwuc3RhdGUgPT0gMyA/ICLliqDlt6XlrozmiJAiIDogIuW3suWHuuWUriIpKyIgIildKSxfYygnZWwtdGltZWxpbmUnLF92bS5fbCgoX3ZtLmludmVudG9yeUNoZWNrRGV0YWlsLnN0b2NrSW5PdXRMaXN0KSxmdW5jdGlvbihhY3Rpdml0eSxpbmRleCl7cmV0dXJuIF9jKCdlbC10aW1lbGluZS1pdGVtJyx7a2V5OmluZGV4LGF0dHJzOnsiY29sb3IiOiIjM2Q4MmZlIiwic2l6ZSI6ImxhcmdlIn19LFtfYygnZGl2Jyx7c3RhdGljU3R5bGU6eyJkaXNwbGF5IjoiZmxleCIsImFsaWduLWl0ZW1zIjoiY2VudGVyIn19LFtfYygncCcse3N0YXRpY1N0eWxlOnsibWFyZ2luIjoiMCAyMHB4IDE0cHggMCIsIndpZHRoIjoiNzJweCJ9fSxbX3ZtLl92KCIgIitfdm0uX3MoYWN0aXZpdHkudGltZS5zbGljZSgwLCAxMCkpKyIgIildKSxfYygncCcse3N0YXRpY1N0eWxlOnsibWFyZ2luLXRvcCI6IjAifSxkb21Qcm9wczp7ImlubmVySFRNTCI6X3ZtLl9zKGFjdGl2aXR5LmRlc2NyaWJlKX19KV0pLChhY3Rpdml0eS5ub3RlICE9PSAnJyk/X2MoJ3AnLHtzdGF0aWNTdHlsZTp7Im1hcmdpbiI6IjAiLCJjb2xvciI6IiM5MTkwOTAiLCJtYXJnaW4tbGVmdCI6IjkycHgiLCJ3b3JkLWJyZWFrIjoiYnJlYWstYWxsIiwid29yZC13cmFwIjoiYnJlYWstd29yZCJ9fSxbX3ZtLl92KCIgIitfdm0uX3MoYWN0aXZpdHkubm90ZSkrIiAiKV0pOl92bS5fZSgpXSl9KSwxKV0sMSldLDEpXSwxKSxfYygnZGl2Jyx7YXR0cnM6eyJzbG90IjoiZm9vdGVyIn0sc2xvdDoiZm9vdGVyIn0sW19jKCdlbC1idXR0b24nLHtvbjp7ImNsaWNrIjpmdW5jdGlvbigkZXZlbnQpe192bS5kaWFsb2dJbnZlbnRvcnlDaGVja1Zpc2libGUgPSBmYWxzZX19fSxbX3ZtLl92KCLlj5Yg5raIIildKSxfYygnZWwtYnV0dG9uJyx7ZGlyZWN0aXZlczpbe25hbWU6InByZXZlbnRDbGljayIscmF3TmFtZToidi1wcmV2ZW50Q2xpY2sifV0sYXR0cnM6eyJ0eXBlIjoicHJpbWFyeSJ9LG9uOnsiY2xpY2siOl92bS5pbnZlbnRvcnlMb29rU3VyZX19LFtfdm0uX3YoIuehriDlrpoiKV0pXSwxKV0pOl92bS5fZSgpLF9jKCdkaXYnLHtzdGF0aWNTdHlsZTp7IndpZHRoIjoiMTAwJSIsImhlaWdodCI6IjUwcHgifX0sW19jKCdkaXYnLHtzdGF0aWNTdHlsZTp7Im1hcmdpbiI6IjQwcHggMCAwIiwicG9zaXRpb24iOiJhYnNvbHV0ZSIsInJpZ2h0IjoiNiUifX0sW19jKCdlbC1wYWdpbmF0aW9uJyx7YXR0cnM6eyJjdXJyZW50LXBhZ2UiOl92bS5wYWdlLCJwYWdlLXNpemUiOjEwLCJsYXlvdXQiOiJ0b3RhbCwgcHJldiwgcGFnZXIsIG5leHQsIGp1bXBlciIsInRvdGFsIjpfdm0udG90YWx9LG9uOnsiY3VycmVudC1jaGFuZ2UiOl92bS5oYW5kbGVDdXJyZW50Q2hhbmdlfX0pXSwxKV0pXSwxKV0pXSldKX0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFtdCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}