{"remainingRequest":"G:\\aa-tong\\my-project\\jewelry-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!G:\\aa-tong\\my-project\\jewelry-admin\\src\\components\\Product-management.vue?vue&type=template&id=1caebd4a&scoped=true&","dependencies":[{"path":"G:\\aa-tong\\my-project\\jewelry-admin\\src\\components\\Product-management.vue","mtime":1637201469729},{"path":"G:\\aa-tong\\my-project\\jewelry-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\aa-tong\\my-project\\jewelry-admin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"G:\\aa-tong\\my-project\\jewelry-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\aa-tong\\my-project\\jewelry-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}