{"remainingRequest":"H:\\WeChat\\WeChat Files\\wxid_57pmtt9pto6922\\FileStorage\\File\\2021-06\\jewelry-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!H:\\WeChat\\WeChat Files\\wxid_57pmtt9pto6922\\FileStorage\\File\\2021-06\\jewelry-admin\\src\\components\\Finished-stock-inquiry.vue?vue&type=template&id=0466b25f&scoped=true&","dependencies":[{"path":"H:\\WeChat\\WeChat Files\\wxid_57pmtt9pto6922\\FileStorage\\File\\2021-06\\jewelry-admin\\src\\components\\Finished-stock-inquiry.vue","mtime":1626147521050},{"path":"H:\\WeChat\\WeChat Files\\wxid_57pmtt9pto6922\\FileStorage\\File\\2021-06\\jewelry-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"H:\\WeChat\\WeChat Files\\wxid_57pmtt9pto6922\\FileStorage\\File\\2021-06\\jewelry-admin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"H:\\WeChat\\WeChat Files\\wxid_57pmtt9pto6922\\FileStorage\\File\\2021-06\\jewelry-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"H:\\WeChat\\WeChat Files\\wxid_57pmtt9pto6922\\FileStorage\\File\\2021-06\\jewelry-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}