{"remainingRequest":"H:\\WeChat\\WeChat Files\\wxid_57pmtt9pto6922\\FileStorage\\File\\2021-06\\jewelry-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!H:\\WeChat\\WeChat Files\\wxid_57pmtt9pto6922\\FileStorage\\File\\2021-06\\jewelry-admin\\src\\components\\Stock-inquiry.vue?vue&type=template&id=a146d1ac&scoped=true&","dependencies":[{"path":"H:\\WeChat\\WeChat Files\\wxid_57pmtt9pto6922\\FileStorage\\File\\2021-06\\jewelry-admin\\src\\components\\Stock-inquiry.vue","mtime":1625122541552},{"path":"H:\\WeChat\\WeChat Files\\wxid_57pmtt9pto6922\\FileStorage\\File\\2021-06\\jewelry-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"H:\\WeChat\\WeChat Files\\wxid_57pmtt9pto6922\\FileStorage\\File\\2021-06\\jewelry-admin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"H:\\WeChat\\WeChat Files\\wxid_57pmtt9pto6922\\FileStorage\\File\\2021-06\\jewelry-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"H:\\WeChat\\WeChat Files\\wxid_57pmtt9pto6922\\FileStorage\\File\\2021-06\\jewelry-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}