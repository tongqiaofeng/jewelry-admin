{"remainingRequest":"G:\\aa-tong\\my-project\\jewelry-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!G:\\aa-tong\\my-project\\jewelry-admin\\src\\components\\Stock-management.vue?vue&type=template&id=eaaae2ec&scoped=true&","dependencies":[{"path":"G:\\aa-tong\\my-project\\jewelry-admin\\src\\components\\Stock-management.vue","mtime":1651718799926},{"path":"G:\\aa-tong\\my-project\\jewelry-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\aa-tong\\my-project\\jewelry-admin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"G:\\aa-tong\\my-project\\jewelry-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\aa-tong\\my-project\\jewelry-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXYgY2xhc3M9InVzZXItYWRtaW4tY29udGFpbmVyIiBpZD0idXNlci1hZG1pbiI+CiAgPCEtLSA8aDE+5YWl5bqT566h55CGPC9oMT4gLS0+CiAgPGRpdiBjbGFzcz0idXNlci1lZGl0Ij4KICAgIDxlbC1mb3JtCiAgICAgIDptb2RlbD0ic3RvY2tJbkZvcm1EYXRhIgogICAgICA6cnVsZXM9InN0b2NrSW5SdWxlcyIKICAgICAgcmVmPSJzdG9ja0luRm9ybSIKICAgICAgbGFiZWwtd2lkdGg9IjE2MHB4IgogICAgICBjbGFzcz0iZGVtby1ydWxlRm9ybSIKICAgID4KICAgICAgPGVsLXJvdyA6Z3V0dGVyPSIxMCI+CiAgICAgICAgPGVsLWNvbCA6c3Bhbj0iMTIiPgogICAgICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD0i5p2Q5paZ5ZCN56ew77yaIiBwcm9wPSJtYXRlcmlhbElkIj4KICAgICAgICAgICAgPGVsLXNlbGVjdAogICAgICAgICAgICAgIHYtbW9kZWw9InN0b2NrSW5Gb3JtRGF0YS5tYXRlcmlhbElkIgogICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSLor7fpgInmi6kiCiAgICAgICAgICAgICAgY2xhc3M9ImlucHV0LXN0eWxlIgogICAgICAgICAgICAgIDpwb3BwZXItYXBwZW5kLXRvLWJvZHk9ImZhbHNlIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgPGVsLW9wdGlvbgogICAgICAgICAgICAgICAgdi1mb3I9Iml0ZW0gaW4gbWF0ZXJpYWxMaXN0IgogICAgICAgICAgICAgICAgOmtleT0iaXRlbS5pZCIKICAgICAgICAgICAgICAgIDpsYWJlbD0iaXRlbS5uYW1lIgogICAgICAgICAgICAgICAgOnZhbHVlPSJpdGVtLmlkIgogICAgICAgICAgICAgICAgQGNsaWNrLm5hdGl2ZT0ibWF0ZXJpYWxDaGFuZ2UoaXRlbSkiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgIDwvZWwtb3B0aW9uPgogICAgICAgICAgICA8L2VsLXNlbGVjdD4KICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPgogICAgICAgIDwvZWwtY29sPgogICAgICAgIDxlbC1jb2wgOnNwYW49IjEyIj4KICAgICAgICAgIDxlbC1mb3JtLWl0ZW0gbGFiZWw9IuS7k+W6ky/liqDlt6XljoLvvJoiIHByb3A9InN0b3JhZ2VJZCI+CiAgICAgICAgICAgIDxlbC1zZWxlY3QKICAgICAgICAgICAgICB2LW1vZGVsPSJzdG9ja0luRm9ybURhdGEuc3RvcmFnZUlkIgogICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSLor7fpgInmi6kiCiAgICAgICAgICAgICAgY2xhc3M9ImlucHV0LXN0eWxlIgogICAgICAgICAgICAgIEBjaGFuZ2U9InN0b3JhZ2VDaGFuZ2UiCiAgICAgICAgICAgICAgOnBvcHBlci1hcHBlbmQtdG8tYm9keT0iZmFsc2UiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8ZWwtb3B0aW9uCiAgICAgICAgICAgICAgICB2LWZvcj0iaXRlbSBpbiB3YXJlaG91c2VGYWN0b3J5TGlzdCIKICAgICAgICAgICAgICAgIDprZXk9Iml0ZW0uaWQiCiAgICAgICAgICAgICAgICA6bGFiZWw9Iml0ZW0ubmFtZSIKICAgICAgICAgICAgICAgIDp2YWx1ZT0iaXRlbS5pZCIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgPC9lbC1vcHRpb24+CiAgICAgICAgICAgIDwvZWwtc2VsZWN0PgogICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+CiAgICAgICAgPC9lbC1jb2w+CiAgICAgIDwvZWwtcm93PgogICAgICA8ZWwtcm93IDpndXR0ZXI9IjEwIj4KICAgICAgICA8ZWwtY29sIDpzcGFuPSIxMiI+CiAgICAgICAgICA8ZWwtZm9ybS1pdGVtCiAgICAgICAgICAgIDpsYWJlbD0iCiAgICAgICAgICAgICAgc3RvY2tJbkZvcm1EYXRhLm1hdGVyaWFsSWQgPT0gMTEgPyAn6K+B5Lmm57yW5Y+377yaJyA6ICfnu5/kuIDnvJblj7fvvJonCiAgICAgICAgICAgICIKICAgICAgICAgICAgcHJvcD0icHJvZHVjdE51bWJlciIKICAgICAgICAgID4KICAgICAgICAgICAgPGVsLWlucHV0CiAgICAgICAgICAgICAgdi1tb2RlbD0ic3RvY2tJbkZvcm1EYXRhLnByb2R1Y3ROdW1iZXIiCiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9Iuivt+i+k+WFpSIKICAgICAgICAgICAgPjwvZWwtaW5wdXQ+CiAgICAgICAgICA8L2VsLWZvcm0taXRlbT4KICAgICAgICA8L2VsLWNvbD4KICAgICAgICA8ZWwtY29sIDpzcGFuPSIxMiIgdi1zaG93PSJjZXJ0aWZpY2F0ZXNob3cgPT0gZmFsc2UiPgogICAgICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD0i5b2i54q277yaIiBwcm9wPSJzaGFwZSI+CiAgICAgICAgICAgIDxlbC1pbnB1dAogICAgICAgICAgICAgIHYtbW9kZWw9InN0b2NrSW5Gb3JtRGF0YS5zaGFwZSIKICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0i6K+36L6T5YWlIgogICAgICAgICAgICA+PC9lbC1pbnB1dD4KICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPgogICAgICAgIDwvZWwtY29sPgogICAgICA8L2VsLXJvdz4KICAgICAgPGVsLXJvdyA6Z3V0dGVyPSIxMCI+CiAgICAgICAgPGVsLWNvbCA6c3Bhbj0iMTIiPgogICAgICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD0i5Lqn5ZOB57G75Z6L77yaIiBwcm9wPSJwcm9kdWN0VHlwZSI+CiAgICAgICAgICAgIDxlbC1pbnB1dAogICAgICAgICAgICAgIHYtbW9kZWw9InN0b2NrSW5Gb3JtRGF0YS5wcm9kdWN0VHlwZSIKICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0i6K+36L6T5YWlIgogICAgICAgICAgICA+PC9lbC1pbnB1dD4KICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPgogICAgICAgIDwvZWwtY29sPgogICAgICAgIDxlbC1jb2wgOnNwYW49IjEyIiB2LXNob3c9ImNlcnRpZmljYXRlc2hvdyA9PSBmYWxzZSI+CiAgICAgICAgICA8ZWwtZm9ybS1pdGVtIGxhYmVsPSLkuqflnLDvvJoiIHByb3A9InByb2R1Y3RBcmVhIj4KICAgICAgICAgICAgPGVsLWlucHV0CiAgICAgICAgICAgICAgdi1tb2RlbD0ic3RvY2tJbkZvcm1EYXRhLnByb2R1Y3RBcmVhIgogICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSLor7fovpPlhaUiCiAgICAgICAgICAgID48L2VsLWlucHV0PgogICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+CiAgICAgICAgPC9lbC1jb2w+CiAgICAgIDwvZWwtcm93PgogICAgICA8ZWwtcm93IDpndXR0ZXI9IjEwIiB2LXNob3c9ImNlcnRpZmljYXRlc2hvdyA9PSBmYWxzZSI+CiAgICAgICAgPGVsLWNvbCA6c3Bhbj0iMjQiPgogICAgICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD0i6K6h5Lu35Y2V5L2N77yaIiBwcm9wPSJjaGFyZ2VVbml0Ij4KICAgICAgICAgICAgPGVsLXJhZGlvLWdyb3VwCiAgICAgICAgICAgICAgdi1tb2RlbD0ic3RvY2tJbkZvcm1EYXRhLmNoYXJnZVVuaXQiCiAgICAgICAgICAgICAgQGNoYW5nZT0iY2hhcmdlVW5pdGZ1biIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDxlbC1yYWRpbyBsYWJlbD0i57KSIj48L2VsLXJhZGlvPgogICAgICAgICAgICAgIDxlbC1yYWRpbyBsYWJlbD0iY3QiPjwvZWwtcmFkaW8+CiAgICAgICAgICAgICAgPGVsLXJhZGlvIGxhYmVsPSJnIj48L2VsLXJhZGlvPgogICAgICAgICAgICA8L2VsLXJhZGlvLWdyb3VwPgogICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+CiAgICAgICAgPC9lbC1jb2w+CiAgICAgIDwvZWwtcm93PgogICAgICA8ZWwtcm93IDpndXR0ZXI9IjEwIiB2LXNob3c9ImNlcnRpZmljYXRlc2hvdyA9PSBmYWxzZSI+CiAgICAgICAgPGVsLWNvbCA6c3Bhbj0iMTAiPgogICAgICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD0i5Y2V5Lu377yaIiBwcm9wPSJ1bml0UHJpY2UiPgogICAgICAgICAgICA8ZWwtaW5wdXQKICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMCU7IgogICAgICAgICAgICAgIHYtbW9kZWw9InN0b2NrSW5Gb3JtRGF0YS51bml0UHJpY2UiCiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9Iuivt+i+k+WFpSIKICAgICAgICAgICAgICBAaW5wdXQ9InByaWNlVG90YWwiCiAgICAgICAgICAgID48L2VsLWlucHV0PgogICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+CiAgICAgICAgPC9lbC1jb2w+CiAgICAgICAgPGVsLWNvbCA6c3Bhbj0iMTQiPgogICAgICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD0iIiBwcm9wPSJjdXJyZW5jeSIgbGFiZWwtd2lkdGg9IjAiPgogICAgICAgICAgICA8ZWwtcmFkaW8tZ3JvdXAKICAgICAgICAgICAgICBzdHlsZT0ibWFyZ2luLWxlZnQ6IDEwcHg7IgogICAgICAgICAgICAgIHYtbW9kZWw9InN0b2NrSW5Gb3JtRGF0YS5jdXJyZW5jeSIKICAgICAgICAgICAgICBAY2hhbmdlPSJjdXJyZW5jeUNoYW5nZSIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDxlbC1yYWRpbyBsYWJlbD0iQ05ZIj5DTlk8L2VsLXJhZGlvPgogICAgICAgICAgICAgIDxlbC1yYWRpbyBsYWJlbD0iRVVSIj5FVVI8L2VsLXJhZGlvPgogICAgICAgICAgICAgIDxlbC1yYWRpbyBsYWJlbD0iVVNEIj5VU0Q8L2VsLXJhZGlvPgogICAgICAgICAgICAgIDxlbC1yYWRpbyBsYWJlbD0iSEtEIj5IS0Q8L2VsLXJhZGlvPgogICAgICAgICAgICA8L2VsLXJhZGlvLWdyb3VwPgogICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+CiAgICAgICAgPC9lbC1jb2w+CiAgICAgIDwvZWwtcm93PgogICAgICA8ZWwtcm93IDpndXR0ZXI9IjEwIj4KICAgICAgICA8ZWwtY29sIDpzcGFuPSIyMCIgdi1zaG93PSJudW1iZXJvcndlaWdodCA9PSB0cnVlIj4KICAgICAgICAgIDxlbC1mb3JtLWl0ZW0gbGFiZWw9IuaAu+aVsOmHj++8miIgcHJvcD0ibnVtYmVyIj4KICAgICAgICAgICAgPGVsLWlucHV0CiAgICAgICAgICAgICAgdi1tb2RlbD0ic3RvY2tJbkZvcm1EYXRhLm51bWJlciIKICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0i6K+36L6T5YWlIgogICAgICAgICAgICAgIEBpbnB1dD0icHJpY2VUb3RhbCIKICAgICAgICAgICAgPjwvZWwtaW5wdXQ+CiAgICAgICAgICA8L2VsLWZvcm0taXRlbT4KICAgICAgICA8L2VsLWNvbD4KICAgICAgICA8ZWwtY29sIDpzcGFuPSIyMCIgdi1zaG93PSJudW1iZXJvcndlaWdodCA9PSBmYWxzZSI+CiAgICAgICAgICA8ZWwtZm9ybS1pdGVtIGxhYmVsPSLmgLvmlbDph4/vvJoiIHByb3A9Im51bWJlciI+CiAgICAgICAgICAgIDxlbC1pbnB1dAogICAgICAgICAgICAgIHYtbW9kZWw9InN0b2NrSW5Gb3JtRGF0YS5udW1iZXIiCiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9Iuivt+i+k+WFpSIKICAgICAgICAgICAgICBAaW5wdXQ9InByaWNlVG90YWwiCiAgICAgICAgICAgID48L2VsLWlucHV0PgogICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+CiAgICAgICAgICA8ZWwtZm9ybS1pdGVtIGxhYmVsPSLmgLvph43ph4/vvJoiIHByb3A9IndlaWdodCI+CiAgICAgICAgICAgIDxkaXYgc3R5bGU9ImRpc3BsYXk6IGZsZXg7Ij4KICAgICAgICAgICAgICA8ZWwtaW5wdXQtbnVtYmVyCiAgICAgICAgICAgICAgICA6Y29udHJvbHM9ImZhbHNlIgogICAgICAgICAgICAgICAgdi1tb2RlbD0ic3RvY2tJbkZvcm1EYXRhLndlaWdodCIKICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSLor7fovpPlhaUiCiAgICAgICAgICAgICAgICBAaW5wdXQ9InByaWNlVG90YWwiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgIDwvZWwtaW5wdXQtbnVtYmVyPgogICAgICAgICAgICAgIDwhLS0gPGkKICAgICAgICAgICAgICBzbG90PSJzdWZmaXgiCiAgICAgICAgICAgICAgc3R5bGU9ImNvbG9yOiAjNjA2MjY2O21hcmdpbi1yaWdodDo1JTtmb250LXN0eWxlOm5vcm1hbDsiCiAgICAgICAgICAgICAgPnt7IHN0b2NrSW5Gb3JtRGF0YS5jaGFyZ2VVbml0IH19PC9pCiAgICAgICAgICAgID4gLS0+CiAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgIHt7IHN0b2NrSW5Gb3JtRGF0YS5jaGFyZ2VVbml0IH19CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+CiAgICAgICAgPC9lbC1jb2w+CiAgICAgIDwvZWwtcm93PgogICAgICA8ZWwtcm93IDpndXR0ZXI9IjEwIiB2LXNob3c9ImNlcnRpZmljYXRlc2hvdyA9PSBmYWxzZSI+CiAgICAgICAgPGVsLWNvbCA6c3Bhbj0iMTIiPgogICAgICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD0i5oC75Lu377yaIiBwcm9wPSJ0b3RhbFByaWNlIj4KICAgICAgICAgICAgPGVsLWlucHV0CiAgICAgICAgICAgICAgdi1tb2RlbD0ic3RvY2tJbkZvcm1EYXRhLnRvdGFsUHJpY2UiCiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9Iuivt+i+k+WFpSIKICAgICAgICAgICAgICBAaW5wdXQ9InByaWNlVG90YWwyIgogICAgICAgICAgICAgIEBmb2N1cz0iZm9jdXN0b3RhbCIKICAgICAgICAgICAgICBAY2hhbmdlPSJ0b3RhbENoYW5nZSIKICAgICAgICAgICAgICA+PGkKICAgICAgICAgICAgICAgIHNsb3Q9InN1ZmZpeCIKICAgICAgICAgICAgICAgIHN0eWxlPSJjb2xvcjogIzYwNjI2NjttYXJnaW4tcmlnaHQ6NSU7Zm9udC1zdHlsZTpub3JtYWw7IgogICAgICAgICAgICAgICAgPnt7IHN0b2NrSW5Gb3JtRGF0YS5jdXJyZW5jeSB9fTwvaQogICAgICAgICAgICAgID48L2VsLWlucHV0CiAgICAgICAgICAgID4KICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPgogICAgICAgIDwvZWwtY29sPgogICAgICAgIDxlbC1jb2wgOnNwYW49IjEyIj4KICAgICAgICAgIDxlbC1mb3JtLWl0ZW0gbGFiZWw9IuaJueWPkeWNleS7t++8miIgcHJvcD0id2hvbGVzYWxlUHJpY2UiPgogICAgICAgICAgICA8ZWwtaW5wdXQKICAgICAgICAgICAgICB2LW1vZGVsPSJzdG9ja0luRm9ybURhdGEud2hvbGVzYWxlUHJpY2UiCiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9Iuivt+i+k+WFpSIKICAgICAgICAgICAgPjwvZWwtaW5wdXQ+CiAgICAgICAgICA8L2VsLWZvcm0taXRlbT4KICAgICAgICA8L2VsLWNvbD4KICAgICAgPC9lbC1yb3c+CiAgICAgIDxlbC1yb3cgOmd1dHRlcj0iMTAiIHYtc2hvdz0iY2VydGlmaWNhdGVzaG93ID09IGZhbHNlIj4KICAgICAgICA8ZWwtY29sIDpzcGFuPSIxMiI+CiAgICAgICAgICA8ZWwtZm9ybS1pdGVtCiAgICAgICAgICAgIGxhYmVsPSLlu7rorq7mn5zlj7DmnIDkvY7plIDllK7ku7fvvJoiCiAgICAgICAgICAgIHByb3A9ImNvdW50ZXJMb3dlc3RTZWxsUHJpY2UiCiAgICAgICAgICA+CiAgICAgICAgICAgIDxlbC1pbnB1dAogICAgICAgICAgICAgIHYtbW9kZWw9InN0b2NrSW5Gb3JtRGF0YS5jb3VudGVyTG93ZXN0U2VsbFByaWNlIgogICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSLor7fovpPlhaUiCiAgICAgICAgICAgID48L2VsLWlucHV0PgogICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+CiAgICAgICAgPC9lbC1jb2w+CiAgICAgICAgPGVsLWNvbCA6c3Bhbj0iMTIiPgogICAgICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD0i5Luj55CG5Lu377yaIiBwcm9wPSJhZ2VudFByaWNlIj4KICAgICAgICAgICAgPGVsLWlucHV0CiAgICAgICAgICAgICAgdi1tb2RlbD0ic3RvY2tJbkZvcm1EYXRhLmFnZW50UHJpY2UiCiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9Iuivt+i+k+WFpSIKICAgICAgICAgICAgPjwvZWwtaW5wdXQ+CiAgICAgICAgICA8L2VsLWZvcm0taXRlbT4KICAgICAgICA8L2VsLWNvbD4KICAgICAgPC9lbC1yb3c+CiAgICAgIDxlbC1yb3cgOmd1dHRlcj0iMTAiIHYtc2hvdz0iY2VydGlmaWNhdGVzaG93ID09IGZhbHNlIj4KICAgICAgICA8ZWwtY29sIDpzcGFuPSIxMiI+CiAgICAgICAgICA8ZWwtZm9ybS1pdGVtIGxhYmVsPSLpm7bllK7ljZXku7fvvJoiIHByb3A9InJldGFpbFByaWNlIj4KICAgICAgICAgICAgPGVsLWlucHV0CiAgICAgICAgICAgICAgdi1tb2RlbD0ic3RvY2tJbkZvcm1EYXRhLnJldGFpbFByaWNlIgogICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSLor7fovpPlhaUiCiAgICAgICAgICAgID48L2VsLWlucHV0PgogICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+CiAgICAgICAgPC9lbC1jb2w+CiAgICAgICAgPGVsLWNvbCA6c3Bhbj0iMTIiPgogICAgICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD0i5aSW5biB5YWR5o2i5Lq65rCR5biB5rGH546HIiBwcm9wPSJ0b3RhbENuUmF0ZSI+CiAgICAgICAgICAgIDxlbC1pbnB1dAogICAgICAgICAgICAgIEBpbnB1dD0idG90YWxDblJhdGVDaGFuZ2UiCiAgICAgICAgICAgICAgdi1tb2RlbD0ic3RvY2tJbkZvcm1EYXRhLnRvdGFsQ25SYXRlIgogICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSLor7fovpPlhaUiCiAgICAgICAgICAgID48L2VsLWlucHV0PgogICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+CiAgICAgICAgPC9lbC1jb2w+CiAgICAgIDwvZWwtcm93PgogICAgICA8ZWwtcm93IDpndXR0ZXI9IjEwIiB2LXNob3c9ImNlcnRpZmljYXRlc2hvdyA9PSBmYWxzZSI+CiAgICAgICAgPGVsLWNvbCA6c3Bhbj0iMTIiPgogICAgICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD0i5oC75Lu35Lq65rCR5biB6YeR6aKdIiBwcm9wPSJ0b3RhbENuUHJpY2UiPgogICAgICAgICAgICA8ZWwtaW5wdXQKICAgICAgICAgICAgICB2LW1vZGVsPSJzdG9ja0luRm9ybURhdGEudG90YWxDblByaWNlIgogICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSLor7fovpPlhaUiCiAgICAgICAgICAgICAgQGNoYW5nZT0idG90YWxDaGFuZ2UiCiAgICAgICAgICAgID48L2VsLWlucHV0PgogICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+CiAgICAgICAgPC9lbC1jb2w+CiAgICAgICAgPGVsLWNvbCA6c3Bhbj0iMTIiPgogICAgICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD0i5riv5biB5YWR5o2i5Lq65rCR5biB5rGH546HIiBwcm9wPSJ0b3RhbEhrUmF0ZSI+CiAgICAgICAgICAgIDxlbC1pbnB1dAogICAgICAgICAgICAgIEBpbnB1dD0idG90YWxIa1JhdGVDaGFuZ2UiCiAgICAgICAgICAgICAgdi1tb2RlbD0ic3RvY2tJbkZvcm1EYXRhLnRvdGFsSGtSYXRlIgogICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSLor7fovpPlhaUiCiAgICAgICAgICAgID48L2VsLWlucHV0PgogICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+CiAgICAgICAgPC9lbC1jb2w+CiAgICAgIDwvZWwtcm93PgogICAgICA8ZWwtcm93IDpndXR0ZXI9IjEwIiB2LXNob3c9ImNlcnRpZmljYXRlc2hvdyA9PSBmYWxzZSI+CiAgICAgICAgPGVsLWNvbCA6c3Bhbj0iMTIiPgogICAgICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD0i5oC75Lu35riv5biB6YeR6aKdIiBwcm9wPSJ0b3RhbEhrUHJpY2UiPgogICAgICAgICAgICA8ZWwtaW5wdXQKICAgICAgICAgICAgICB2LW1vZGVsPSJzdG9ja0luRm9ybURhdGEudG90YWxIa1ByaWNlIgogICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSLor7fovpPlhaUiCiAgICAgICAgICAgICAgQGNoYW5nZT0idG90YWxDaGFuZ2UiCiAgICAgICAgICAgID48L2VsLWlucHV0PgogICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+CiAgICAgICAgPC9lbC1jb2w+CiAgICAgICAgPGVsLWNvbCA6c3Bhbj0iMTIiPgogICAgICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD0i5bC65a+4L+avq+exs++8miIgcHJvcD0ic2l6ZSI+CiAgICAgICAgICAgIDxlbC1pbnB1dAogICAgICAgICAgICAgIHYtbW9kZWw9InN0b2NrSW5Gb3JtRGF0YS5zaXplIgogICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSLor7fovpPlhaUiCiAgICAgICAgICAgID48L2VsLWlucHV0PgogICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+CiAgICAgICAgPC9lbC1jb2w+CiAgICAgIDwvZWwtcm93PgogICAgICA8ZWwtcm93IDpndXR0ZXI9IjEwIiB2LXNob3c9ImNlcnRpZmljYXRlc2hvdyA9PSBmYWxzZSI+CiAgICAgICAgPGVsLWNvbCA6c3Bhbj0iMTIiPgogICAgICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD0i6aKc6Imy77yaIiBwcm9wPSJjb2xvciI+CiAgICAgICAgICAgIDxlbC1pbnB1dAogICAgICAgICAgICAgIHYtbW9kZWw9InN0b2NrSW5Gb3JtRGF0YS5jb2xvciIKICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0i6K+36L6T5YWlIgogICAgICAgICAgICA+PC9lbC1pbnB1dD4KICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPgogICAgICAgIDwvZWwtY29sPgogICAgICAgIDxlbC1jb2wgOnNwYW49IjEyIj4KICAgICAgICAgIDxlbC1mb3JtLWl0ZW0gbGFiZWw9IumFjeWvue+8miIgcHJvcD0icGFpcmVkIj4KICAgICAgICAgICAgPGVsLWlucHV0CiAgICAgICAgICAgICAgdi1tb2RlbD0ic3RvY2tJbkZvcm1EYXRhLnBhaXJlZCIKICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0i6K+36L6T5YWlIgogICAgICAgICAgICA+PC9lbC1pbnB1dD4KICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPgogICAgICAgIDwvZWwtY29sPgogICAgICA8L2VsLXJvdz4KICAgICAgPGVsLXJvdyA6Z3V0dGVyPSIxMCIgdi1zaG93PSJjZXJ0aWZpY2F0ZXNob3cgPT0gZmFsc2UiPgogICAgICAgIDxlbC1jb2wgOnNwYW49IjEyIj4KICAgICAgICAgIDxlbC1mb3JtLWl0ZW0gbGFiZWw9IuWTgei0qO+8miIgcHJvcD0icXVhbGl0eSI+CiAgICAgICAgICAgIDxlbC1pbnB1dAogICAgICAgICAgICAgIHYtbW9kZWw9InN0b2NrSW5Gb3JtRGF0YS5xdWFsaXR5IgogICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSLor7fovpPlhaUiCiAgICAgICAgICAgID48L2VsLWlucHV0PgogICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+CiAgICAgICAgPC9lbC1jb2w+CiAgICAgICAgPGVsLWNvbCA6c3Bhbj0iMTIiPgogICAgICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD0i5ZOB6LSo57uG5YiG77yaIiBwcm9wPSJzdWJzZWN0aW9uIj4KICAgICAgICAgICAgPGVsLWlucHV0CiAgICAgICAgICAgICAgdi1tb2RlbD0ic3RvY2tJbkZvcm1EYXRhLnN1YnNlY3Rpb24iCiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9Iuivt+i+k+WFpSIKICAgICAgICAgICAgPjwvZWwtaW5wdXQ+CiAgICAgICAgICA8L2VsLWZvcm0taXRlbT4KICAgICAgICA8L2VsLWNvbD4KICAgICAgPC9lbC1yb3c+CiAgICAgIDxlbC1yb3cgOmd1dHRlcj0iMTAiIHYtc2hvdz0iY2VydGlmaWNhdGVzaG93ID09IGZhbHNlIj4KICAgICAgICA8ZWwtY29sIDpzcGFuPSIxMiI+CiAgICAgICAgICA8ZWwtZm9ybS1pdGVtIGxhYmVsPSLnm5LlrZDnvJblj7fvvJoiIHByb3A9ImJveE51bWJlciI+CiAgICAgICAgICAgIDxlbC1pbnB1dAogICAgICAgICAgICAgIHYtbW9kZWw9InN0b2NrSW5Gb3JtRGF0YS5ib3hOdW1iZXIiCiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9Iuivt+i+k+WFpSIKICAgICAgICAgICAgPjwvZWwtaW5wdXQ+CiAgICAgICAgICA8L2VsLWZvcm0taXRlbT4KICAgICAgICA8L2VsLWNvbD4KICAgICAgICA8ZWwtY29sIDpzcGFuPSIxMiI+CiAgICAgICAgICA8ZWwtZm9ybS1pdGVtIGxhYmVsPSLor4HkuabnvJblj7fvvJoiIHByb3A9ImNlcnRpZmljYXRlTnVtYmVyIj4KICAgICAgICAgICAgPGVsLWlucHV0CiAgICAgICAgICAgICAgdi1tb2RlbD0ic3RvY2tJbkZvcm1EYXRhLmNlcnRpZmljYXRlTnVtYmVyIgogICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSLlpJrkuKror4HkuabnvJblj7fvvIznlKjpgJflj7fpmpTlvIAiCiAgICAgICAgICAgID48L2VsLWlucHV0PgogICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+CiAgICAgICAgPC9lbC1jb2w+CiAgICAgIDwvZWwtcm93PgogICAgICA8ZWwtZm9ybS1pdGVtCiAgICAgICAgbGFiZWw9IuWPkeelqOWPt++8miIKICAgICAgICBwcm9wPSJiaWxsTnVtYmVyICIKICAgICAgICB2LXNob3c9ImNlcnRpZmljYXRlc2hvdyA9PSBmYWxzZSIKICAgICAgPgogICAgICAgIDxlbC1pbnB1dAogICAgICAgICAgdi1tb2RlbD0ic3RvY2tJbkZvcm1EYXRhLmJpbGxOdW1iZXIiCiAgICAgICAgICBwbGFjZWhvbGRlcj0i6K+36L6T5YWlIgogICAgICAgID48L2VsLWlucHV0PgogICAgICA8L2VsLWZvcm0taXRlbT4KICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD0i5Zu+54mH77yaIiBwcm9wPSJpbWd1cmxzIj4KICAgICAgICA8ZGl2IHN0eWxlPSJkaXNwbGF5OmZsZXg7Ij4KICAgICAgICAgIDxkaXYgY2xhc3M9InVwbG9hZC1pbWdzIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWRkIj4KICAgICAgICAgICAgICA8Zm9ybSBlbmN0eXBlPSJtdWx0aXBhcnQvZm9ybS1kYXRhIiBzdHlsZT0id2lkdGg6IDEwMHB4OyI+CiAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgQGNoYW5nZT0iaW5wdXRDaGFuZ2UoJGV2ZW50KSIKICAgICAgICAgICAgICAgICAgbXVsdGlwbGUKICAgICAgICAgICAgICAgICAgdHlwZT0iZmlsZSIKICAgICAgICAgICAgICAgICAgbmFtZT0iaW1nIgogICAgICAgICAgICAgICAgICBhY2NlcHQ9ImltYWdlLyoiCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJpbnB1dFVwbG9hZCIKICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZWwtaWNvbi1wbHVzIGFkZEljb24iPjwvaT4KICAgICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgc3R5bGU9ImRpc3BsYXk6ZmxleDtwb3NpdGlvbjpyZWxhdGl2ZTtmbGV4LXdyYXA6IHdyYXA7IgogICAgICAgICAgICAgIGlkPSJkZWxJbWciCiAgICAgICAgICAgICAgY2xhc3M9ImRlbEltZyIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgIHYtZm9yPSIoaW1ndXJsLCBpbmRleCkgb2Ygc3RvY2tJbkZvcm1EYXRhLmltZ3VybHMiCiAgICAgICAgICAgICAgICA6a2V5PSJpbmRleCIKICAgICAgICAgICAgICAgIHN0eWxlPSJtYXJnaW4tbGVmdDoxMHB4O3Bvc2l0aW9uOnJlbGF0aXZlOyIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICB2LWlmPSJpbWd1cmwgIT09ICcnICYmIGltZ3VybCAhPT0gbnVsbCIKICAgICAgICAgICAgICAgICAgY2xhc3M9InNwYW5TdHlsZSIKICAgICAgICAgICAgICAgICAgQGNsaWNrPSJkZWxJbWFnZShpbmRleCkiCiAgICAgICAgICAgICAgICAgID54PC9zcGFuCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgIHYtaWY9ImltZ3VybCAhPT0gJycgJiYgaW1ndXJsICE9PSBudWxsIgogICAgICAgICAgICAgICAgICA6c3JjPSJpbWcgKyAnL2ZpbGUvJyArIGltZ3VybCIKICAgICAgICAgICAgICAgICAgd2lkdGg9IjEwMHB4IgogICAgICAgICAgICAgICAgICBoZWlnaHQ9IjEwMHB4IgogICAgICAgICAgICAgICAgICBzdHlsZT0iYm9yZGVyLXJhZGl1czo1cHg7b2JqZWN0LWZpdDpjb3ZlcjsiCiAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L2VsLWZvcm0taXRlbT4KICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD0i5YWl5bqT5pe26Ze077yaIiBwcm9wPSJzdG9ja0luVGltZSI+CiAgICAgICAgPGVsLWRhdGUtcGlja2VyCiAgICAgICAgICBjbGFzcz0iaW5wdXQtc3R5bGUiCiAgICAgICAgICB2LW1vZGVsPSJzdG9ja0luRm9ybURhdGEuc3RvY2tJblRpbWUiCiAgICAgICAgICB0eXBlPSJkYXRlIgogICAgICAgICAgcGxhY2Vob2xkZXI9Iuivt+mAieaLqSIKICAgICAgICAgIHZhbHVlLWZvcm1hdD0ieXl5eS1NTS1kZCIKICAgICAgICAgIGZvcm1hdD0ieXl5eS1NTS1kZCIKICAgICAgICA+CiAgICAgICAgPC9lbC1kYXRlLXBpY2tlcj4KICAgICAgPC9lbC1mb3JtLWl0ZW0+CiAgICAgIDxlbC1mb3JtLWl0ZW0KICAgICAgICBsYWJlbD0i5oiQ5pys5aSH5rOoIgogICAgICAgIHByb3A9InRvdGFsUHJpY2VOb3RlIgogICAgICAgIHYtc2hvdz0iY2VydGlmaWNhdGVzaG93ID09IGZhbHNlIgogICAgICA+CiAgICAgICAgPGVsLWlucHV0CiAgICAgICAgICB0eXBlPSJ0ZXh0YXJlYSIKICAgICAgICAgIHYtbW9kZWw9InN0b2NrSW5Gb3JtRGF0YS50b3RhbFByaWNlTm90ZSIKICAgICAgICAgIHBsYWNlaG9sZGVyPSLor7fovpPlhaUiCiAgICAgICAgPjwvZWwtaW5wdXQ+CiAgICAgIDwvZWwtZm9ybS1pdGVtPgogICAgICA8ZWwtZm9ybS1pdGVtIGxhYmVsPSLlpIfms6jvvJoiIHByb3A9Im5vdGUiPgogICAgICAgIDxlbC1pbnB1dAogICAgICAgICAgdHlwZT0idGV4dGFyZWEiCiAgICAgICAgICB2LW1vZGVsPSJzdG9ja0luRm9ybURhdGEubm90ZSIKICAgICAgICAgIHBsYWNlaG9sZGVyPSLor7fovpPlhaUiCiAgICAgICAgPjwvZWwtaW5wdXQ+CiAgICAgIDwvZWwtZm9ybS1pdGVtPgogICAgPC9lbC1mb3JtPgogICAgPGRpdiBzdHlsZT0ibWFyZ2luLXRvcDogMzBweDt0ZXh0LWFsaWduOiByaWdodDsiPgogICAgICA8ZWwtYnV0dG9uIEBjbGljaz0icmVzZXRGb3JtKCdzdG9ja0luRm9ybScpIj7ph40g572uPC9lbC1idXR0b24+CiAgICAgIDxlbC1idXR0b24KICAgICAgICBzdHlsZT0id2lkdGg6IDEyMHB4OyIKICAgICAgICB0eXBlPSJwcmltYXJ5IgogICAgICAgIEBjbGljaz0ic3RvY2tJbkFkZCgnc3RvY2tJbkZvcm0nKSIKICAgICAgICB2LXByZXZlbnRDbGljawogICAgICAgID7mj5Ag5LqkCiAgICAgIDwvZWwtYnV0dG9uPgogICAgPC9kaXY+CiAgPC9kaXY+CiAgPGRpdiBjbGFzcz0idXNlci10YWJsZSI+CiAgICA8cCBjbGFzcz0idGl0bGUtZm9udCI+5Y6f5p2Q5paZ5bqT5a2YPC9wPgogICAgPGVsLXRhYmxlCiAgICAgIDpkYXRhPSJwcm9kdWN0TGlzdCIKICAgICAgdG9vbHRpcC1lZmZlY3Q9ImRhcmsiCiAgICAgIGJvcmRlcgogICAgICBAcm93LWNsaWNrPSJpbnZlbnRvcnlMb29rIgogICAgICBAcm93LWRibGNsaWNrPSJkYmxMb29rSW52ZW50b3J5IgogICAgPgogICAgICA8ZWwtdGFibGUtY29sdW1uIHByb3A9Im1hdGVyaWFsTmFtZSIgbGFiZWw9IuadkOaWmeWQjeensCI+CiAgICAgIDwvZWwtdGFibGUtY29sdW1uPgogICAgICA8ZWwtdGFibGUtY29sdW1uIHByb3A9InByb2R1Y3ROdW1iZXIiIGxhYmVsPSLnu5/kuIDnvJblj7ciPgogICAgICA8L2VsLXRhYmxlLWNvbHVtbj4KICAgICAgPGVsLXRhYmxlLWNvbHVtbiBsYWJlbD0i5Y2V5Lu3Ij4KICAgICAgICA8dGVtcGxhdGUgc2xvdC1zY29wZT0ic2NvcGUiPgogICAgICAgICAgPGRpdj4KICAgICAgICAgICAgPHNwYW4+e3sKICAgICAgICAgICAgICBzY29wZS5yb3cuY3VycmVuY3kgIT0gIiIKICAgICAgICAgICAgICAgID8gc2NvcGUucm93LnVuaXRQcmljZSArICIgIiArIHNjb3BlLnJvdy5jdXJyZW5jeQogICAgICAgICAgICAgICAgOiAiLS0iCiAgICAgICAgICAgIH19PC9zcGFuPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgPC9lbC10YWJsZS1jb2x1bW4+CiAgICAgIDxlbC10YWJsZS1jb2x1bW4gbGFiZWw9IuaAu+S7tyI+CiAgICAgICAgPHRlbXBsYXRlIHNsb3Qtc2NvcGU9InNjb3BlIj4KICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgIDxzcGFuPnt7CiAgICAgICAgICAgICAgc2NvcGUucm93LmN1cnJlbmN5ICE9ICIiCiAgICAgICAgICAgICAgICA/IGZvcm1hdE51bWJlclJneChzY29wZS5yb3cudG90YWxQcmljZSkgKwogICAgICAgICAgICAgICAgICAiICIgKwogICAgICAgICAgICAgICAgICBzY29wZS5yb3cuY3VycmVuY3kKICAgICAgICAgICAgICAgIDogIi0tIgogICAgICAgICAgICB9fTwvc3Bhbj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvdGVtcGxhdGU+CiAgICAgIDwvZWwtdGFibGUtY29sdW1uPgogICAgICA8ZWwtdGFibGUtY29sdW1uIGxhYmVsPSLmk43kvZwiIHdpZHRoPSI5MHB4Ij4KICAgICAgICA8dGVtcGxhdGU+CiAgICAgICAgICA8ZWwtYnV0dG9uIHR5cGU9InRleHQiIHN0eWxlPSJjb2xvcjogcmVkOyI+CiAgICAgICAgICAgIOWIoOmZpAogICAgICAgICAgPC9lbC1idXR0b24+CiAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgPC9lbC10YWJsZS1jb2x1bW4+CiAgICA8L2VsLXRhYmxlPgogICAgPGVsLWRpYWxvZwogICAgICB2LWlmPSJkaWFsb2dJbnZlbnRvcnlDaGVja1Zpc2libGUiCiAgICAgIHRpdGxlPSLmnZDmlpnkv6Hmga8iCiAgICAgIDp2aXNpYmxlLnN5bmM9ImRpYWxvZ0ludmVudG9yeUNoZWNrVmlzaWJsZSIKICAgICAgOmNsb3NlLW9uLXByZXNzLWVzY2FwZT0iZmFsc2UiCiAgICAgIDpjbG9zZS1vbi1jbGljay1tb2RhbD0iZmFsc2UiCiAgICAgIDptb2RhbC1hcHBlbmQtdG8tYm9keT0iZmFsc2UiCiAgICAgIDphcHBlbmQtdG8tYm9keT0iZmFsc2UiCiAgICA+CiAgICAgIDxkaXYgaWQ9ImludmVuU29tZSI+CiAgICAgICAgPGVsLXRhYnMgc3R5bGU9Im1hcmdpbi10b3A6IDIwcHg7IiB2LW1vZGVsPSJhY3RpdmVTdG9ja05hbWUiPgogICAgICAgICAgPGVsLXRhYi1wYW5lIGxhYmVsPSLmnZDmlpnkv6Hmga8iIG5hbWU9ImZpcnN0Ij4KICAgICAgICAgICAgPGRpdiBzdHlsZT0iZGlzcGxheTogZmxleDtqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47Ij4KICAgICAgICAgICAgICA8cCBjbGFzcz0iZm9udC10aXRsZS1zdHlsZSIgc3R5bGU9Im1hcmdpbi10b3A6IDA7Ij7mnZDmlpnkv6Hmga88L3A+CiAgICAgICAgICAgICAgPGRpdiBzdHlsZT0icGFkZGluZy10b3A6IDZweDsiPgogICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICBzdHlsZT0iY3Vyc29yOiBwb2ludGVyOyIKICAgICAgICAgICAgICAgICAgdGl0bGU9IuS/ruaUueadkOaWmeS/oeaBryIKICAgICAgICAgICAgICAgICAgc3JjPSIuLi9hc3NldHMvaW1ncy9ob21lL3VwZGF0ZS5wbmciCiAgICAgICAgICAgICAgICAgIEBjbGljaz0idXBkYXRlRGV2aWNlIgogICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvbnQtZGl2Ij4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkaXYtb25lIj4KICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgY2xhc3M9Im9uZS1sZWZ0IgogICAgICAgICAgICAgICAgICA6c3R5bGU9InsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyM2MDYyNjYnLAogICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IGlzVXBkYXRlID09IDAgPyAnbm9ybWFsJyA6ICdib2xkJywKICAgICAgICAgICAgICAgICAgfSIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAg5p2Q5paZ5ZCN56ewCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9uZS1yaWdodCI+CiAgICAgICAgICAgICAgICAgIDxlbC1pbnB1dAogICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImludmVudG9yeUNoZWNrRGV0YWlsLm1hdGVyaWFsTmFtZSIKICAgICAgICAgICAgICAgICAgICByZWFkb25seQogICAgICAgICAgICAgICAgICA+PC9lbC1pbnB1dD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdi1vbmUiPgogICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICBjbGFzcz0ib25lLWxlZnQiCiAgICAgICAgICAgICAgICAgIDpzdHlsZT0iewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzYwNjI2NicsCiAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogaXNVcGRhdGUgPT0gMCA/ICdub3JtYWwnIDogJ2JvbGQnLAogICAgICAgICAgICAgICAgICB9IgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICDku5PlupMv5Yqg5bel5Y6CCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9uZS1yaWdodCI+CiAgICAgICAgICAgICAgICAgIDxlbC1pbnB1dAogICAgICAgICAgICAgICAgICAgIHJlYWRvbmx5CiAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iaW52ZW50b3J5Q2hlY2tEZXRhaWwuc3RvcmFnZU5hbWUiCiAgICAgICAgICAgICAgICAgID48L2VsLWlucHV0PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGl2LW9uZSI+CiAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgIGNsYXNzPSJvbmUtbGVmdCIKICAgICAgICAgICAgICAgICAgOnN0eWxlPSJ7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjNjA2MjY2JywKICAgICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiBpc1VwZGF0ZSA9PSAwID8gJ25vcm1hbCcgOiAnYm9sZCcsCiAgICAgICAgICAgICAgICAgIH0iCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIOe7n+S4gOe8luWPtwogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvbmUtcmlnaHQiPgogICAgICAgICAgICAgICAgICA8ZWwtaW5wdXQKICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJpbnZlbnRvcnlDaGVja0RldGFpbC5wcm9kdWN0TnVtYmVyIgogICAgICAgICAgICAgICAgICAgIHJlYWRvbmx5CiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPC9lbC1pbnB1dD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdi1vbmUiIHYtc2hvdz0iY2VydGlmaWNhdGVzaG93MiA9PSBmYWxzZSI+CiAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgIGNsYXNzPSJvbmUtbGVmdCIKICAgICAgICAgICAgICAgICAgOnN0eWxlPSJ7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6CiAgICAgICAgICAgICAgICAgICAgICBpc1VwZGF0ZSA9PSAwCiAgICAgICAgICAgICAgICAgICAgICAgID8gJyM2MDYyNjYnCiAgICAgICAgICAgICAgICAgICAgICAgIDogaW52ZW50b3J5Q2hlY2tEZXRhaWwuaXNVcGRhdGUgIT09IDIKICAgICAgICAgICAgICAgICAgICAgICAgPyAnIzNkODJmZScKICAgICAgICAgICAgICAgICAgICAgICAgOiAnIzYwNjI2NicsCiAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogaXNVcGRhdGUgPT0gMCA/ICdub3JtYWwnIDogJ2JvbGQnLAogICAgICAgICAgICAgICAgICB9IgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICDlvaLnirYKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib25lLXJpZ2h0Ij4KICAgICAgICAgICAgICAgICAgPGVsLWlucHV0CiAgICAgICAgICAgICAgICAgICAgOnJlYWRvbmx5PSIKICAgICAgICAgICAgICAgICAgICAgIGlzVXBkYXRlID09IDAKICAgICAgICAgICAgICAgICAgICAgICAgPyB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgIDogaW52ZW50b3J5Q2hlY2tEZXRhaWwuaXNVcGRhdGUgIT09IDIKICAgICAgICAgICAgICAgICAgICAgICAgPyBmYWxzZQogICAgICAgICAgICAgICAgICAgICAgICA6IHRydWUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iaW52ZW50b3J5Q2hlY2tEZXRhaWwuc2hhcGUiCiAgICAgICAgICAgICAgICAgICAgY2xlYXJhYmxlCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPC9lbC1pbnB1dD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdi1vbmUiIHYtc2hvdz0iY2VydGlmaWNhdGVzaG93MiA9PSBmYWxzZSI+CiAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgIGNsYXNzPSJvbmUtbGVmdCIKICAgICAgICAgICAgICAgICAgOnN0eWxlPSJ7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6CiAgICAgICAgICAgICAgICAgICAgICBpc1VwZGF0ZSA9PSAwCiAgICAgICAgICAgICAgICAgICAgICAgID8gJyM2MDYyNjYnCiAgICAgICAgICAgICAgICAgICAgICAgIDogaW52ZW50b3J5Q2hlY2tEZXRhaWwuaXNVcGRhdGUgIT09IDIKICAgICAgICAgICAgICAgICAgICAgICAgPyAnIzNkODJmZScKICAgICAgICAgICAgICAgICAgICAgICAgOiAnIzYwNjI2NicsCiAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogaXNVcGRhdGUgPT0gMCA/ICdub3JtYWwnIDogJ2JvbGQnLAogICAgICAgICAgICAgICAgICB9IgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICDkuqflk4HnsbvlnosKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib25lLXJpZ2h0Ij4KICAgICAgICAgICAgICAgICAgPGVsLWlucHV0CiAgICAgICAgICAgICAgICAgICAgOnJlYWRvbmx5PSIKICAgICAgICAgICAgICAgICAgICAgIGlzVXBkYXRlID09IDAKICAgICAgICAgICAgICAgICAgICAgICAgPyB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgIDogaW52ZW50b3J5Q2hlY2tEZXRhaWwuaXNVcGRhdGUgIT09IDIKICAgICAgICAgICAgICAgICAgICAgICAgPyBmYWxzZQogICAgICAgICAgICAgICAgICAgICAgICA6IHRydWUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iaW52ZW50b3J5Q2hlY2tEZXRhaWwucHJvZHVjdFR5cGUiCiAgICAgICAgICAgICAgICAgICAgY2xlYXJhYmxlCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPC9lbC1pbnB1dD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdi1vbmUiIHYtc2hvdz0iY2VydGlmaWNhdGVzaG93MiA9PSBmYWxzZSI+CiAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgIGNsYXNzPSJvbmUtbGVmdCIKICAgICAgICAgICAgICAgICAgOnN0eWxlPSJ7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6CiAgICAgICAgICAgICAgICAgICAgICBpc1VwZGF0ZSA9PSAwCiAgICAgICAgICAgICAgICAgICAgICAgID8gJyM2MDYyNjYnCiAgICAgICAgICAgICAgICAgICAgICAgIDogaW52ZW50b3J5Q2hlY2tEZXRhaWwuaXNVcGRhdGUgIT09IDIKICAgICAgICAgICAgICAgICAgICAgICAgPyAnIzNkODJmZScKICAgICAgICAgICAgICAgICAgICAgICAgOiAnIzYwNjI2NicsCiAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogaXNVcGRhdGUgPT0gMCA/ICdub3JtYWwnIDogJ2JvbGQnLAogICAgICAgICAgICAgICAgICB9IgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICDkuqflnLAKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib25lLXJpZ2h0Ij4KICAgICAgICAgICAgICAgICAgPGVsLWlucHV0CiAgICAgICAgICAgICAgICAgICAgOnJlYWRvbmx5PSIKICAgICAgICAgICAgICAgICAgICAgIGlzVXBkYXRlID09IDAKICAgICAgICAgICAgICAgICAgICAgICAgPyB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgIDogaW52ZW50b3J5Q2hlY2tEZXRhaWwuaXNVcGRhdGUgIT09IDIKICAgICAgICAgICAgICAgICAgICAgICAgPyBmYWxzZQogICAgICAgICAgICAgICAgICAgICAgICA6IHRydWUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iaW52ZW50b3J5Q2hlY2tEZXRhaWwucHJvZHVjdEFyZWEiCiAgICAgICAgICAgICAgICAgICAgY2xlYXJhYmxlCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPC9lbC1pbnB1dD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdi1vbmUiIHYtc2hvdz0iY2VydGlmaWNhdGVzaG93MiA9PSBmYWxzZSI+CiAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgIGNsYXNzPSJvbmUtbGVmdCIKICAgICAgICAgICAgICAgICAgOnN0eWxlPSJ7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6CiAgICAgICAgICAgICAgICAgICAgICBpc1VwZGF0ZSA9PSAwCiAgICAgICAgICAgICAgICAgICAgICAgID8gJyM2MDYyNjYnCiAgICAgICAgICAgICAgICAgICAgICAgIDogaW52ZW50b3J5Q2hlY2tEZXRhaWwuaXNVcGRhdGUgIT09IDIKICAgICAgICAgICAgICAgICAgICAgICAgPyAnIzNkODJmZScKICAgICAgICAgICAgICAgICAgICAgICAgOiAnIzYwNjI2NicsCiAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogaXNVcGRhdGUgPT0gMCA/ICdub3JtYWwnIDogJ2JvbGQnLAogICAgICAgICAgICAgICAgICB9IgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICDlsLrlr7gv5q+r57GzCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9uZS1yaWdodCI+CiAgICAgICAgICAgICAgICAgIDxlbC1pbnB1dAogICAgICAgICAgICAgICAgICAgIDpyZWFkb25seT0iCiAgICAgICAgICAgICAgICAgICAgICBpc1VwZGF0ZSA9PSAwCiAgICAgICAgICAgICAgICAgICAgICAgID8gdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICA6IGludmVudG9yeUNoZWNrRGV0YWlsLmlzVXBkYXRlICE9PSAyCiAgICAgICAgICAgICAgICAgICAgICAgID8gZmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgOiB0cnVlCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImludmVudG9yeUNoZWNrRGV0YWlsLnNpemUiCiAgICAgICAgICAgICAgICAgICAgY2xlYXJhYmxlCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPC9lbC1pbnB1dD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdi1vbmUiIHYtc2hvdz0iY2VydGlmaWNhdGVzaG93MiA9PSBmYWxzZSI+CiAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgIGNsYXNzPSJvbmUtbGVmdCIKICAgICAgICAgICAgICAgICAgOnN0eWxlPSJ7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6CiAgICAgICAgICAgICAgICAgICAgICBpc1VwZGF0ZSA9PSAwCiAgICAgICAgICAgICAgICAgICAgICAgID8gJyM2MDYyNjYnCiAgICAgICAgICAgICAgICAgICAgICAgIDogaW52ZW50b3J5Q2hlY2tEZXRhaWwuaXNVcGRhdGUgIT09IDIKICAgICAgICAgICAgICAgICAgICAgICAgPyAnIzNkODJmZScKICAgICAgICAgICAgICAgICAgICAgICAgOiAnIzYwNjI2NicsCiAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogaXNVcGRhdGUgPT0gMCA/ICdub3JtYWwnIDogJ2JvbGQnLAogICAgICAgICAgICAgICAgICB9IgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICDpopzoibIKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib25lLXJpZ2h0Ij4KICAgICAgICAgICAgICAgICAgPGVsLWlucHV0CiAgICAgICAgICAgICAgICAgICAgOnJlYWRvbmx5PSIKICAgICAgICAgICAgICAgICAgICAgIGlzVXBkYXRlID09IDAKICAgICAgICAgICAgICAgICAgICAgICAgPyB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgIDogaW52ZW50b3J5Q2hlY2tEZXRhaWwuaXNVcGRhdGUgIT09IDIKICAgICAgICAgICAgICAgICAgICAgICAgPyBmYWxzZQogICAgICAgICAgICAgICAgICAgICAgICA6IHRydWUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iaW52ZW50b3J5Q2hlY2tEZXRhaWwuY29sb3IiCiAgICAgICAgICAgICAgICAgICAgY2xlYXJhYmxlCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPC9lbC1pbnB1dD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdi1vbmUiIHYtc2hvdz0iY2VydGlmaWNhdGVzaG93MiA9PSBmYWxzZSI+CiAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgIGNsYXNzPSJvbmUtbGVmdCIKICAgICAgICAgICAgICAgICAgOnN0eWxlPSJ7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6CiAgICAgICAgICAgICAgICAgICAgICBpc1VwZGF0ZSA9PSAwCiAgICAgICAgICAgICAgICAgICAgICAgID8gJyM2MDYyNjYnCiAgICAgICAgICAgICAgICAgICAgICAgIDogaW52ZW50b3J5Q2hlY2tEZXRhaWwuaXNVcGRhdGUgIT09IDIKICAgICAgICAgICAgICAgICAgICAgICAgPyAnIzNkODJmZScKICAgICAgICAgICAgICAgICAgICAgICAgOiAnIzYwNjI2NicsCiAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogaXNVcGRhdGUgPT0gMCA/ICdub3JtYWwnIDogJ2JvbGQnLAogICAgICAgICAgICAgICAgICB9IgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICDphY3lr7kKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib25lLXJpZ2h0Ij4KICAgICAgICAgICAgICAgICAgPGVsLWlucHV0CiAgICAgICAgICAgICAgICAgICAgOnJlYWRvbmx5PSIKICAgICAgICAgICAgICAgICAgICAgIGlzVXBkYXRlID09IDAKICAgICAgICAgICAgICAgICAgICAgICAgPyB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgIDogaW52ZW50b3J5Q2hlY2tEZXRhaWwuaXNVcGRhdGUgIT09IDIKICAgICAgICAgICAgICAgICAgICAgICAgPyBmYWxzZQogICAgICAgICAgICAgICAgICAgICAgICA6IHRydWUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iaW52ZW50b3J5Q2hlY2tEZXRhaWwucGFpcmVkIgogICAgICAgICAgICAgICAgICAgIGNsZWFyYWJsZQogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDwvZWwtaW5wdXQ+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkaXYtb25lIiB2LXNob3c9ImNlcnRpZmljYXRlc2hvdzIgPT0gZmFsc2UiPgogICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICBjbGFzcz0ib25lLWxlZnQiCiAgICAgICAgICAgICAgICAgIDpzdHlsZT0iewogICAgICAgICAgICAgICAgICAgIGNvbG9yOgogICAgICAgICAgICAgICAgICAgICAgaXNVcGRhdGUgPT0gMAogICAgICAgICAgICAgICAgICAgICAgICA/ICcjNjA2MjY2JwogICAgICAgICAgICAgICAgICAgICAgICA6IGludmVudG9yeUNoZWNrRGV0YWlsLmlzVXBkYXRlICE9PSAyCiAgICAgICAgICAgICAgICAgICAgICAgID8gJyMzZDgyZmUnCiAgICAgICAgICAgICAgICAgICAgICAgIDogJyM2MDYyNjYnLAogICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IGlzVXBkYXRlID09IDAgPyAnbm9ybWFsJyA6ICdib2xkJywKICAgICAgICAgICAgICAgICAgfSIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAg5ZOB6LSoCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9uZS1yaWdodCI+CiAgICAgICAgICAgICAgICAgIDxlbC1pbnB1dAogICAgICAgICAgICAgICAgICAgIDpyZWFkb25seT0iCiAgICAgICAgICAgICAgICAgICAgICBpc1VwZGF0ZSA9PSAwCiAgICAgICAgICAgICAgICAgICAgICAgID8gdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICA6IGludmVudG9yeUNoZWNrRGV0YWlsLmlzVXBkYXRlICE9PSAyCiAgICAgICAgICAgICAgICAgICAgICAgID8gZmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgOiB0cnVlCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImludmVudG9yeUNoZWNrRGV0YWlsLnF1YWxpdHkiCiAgICAgICAgICAgICAgICAgICAgY2xlYXJhYmxlCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPC9lbC1pbnB1dD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdi1vbmUiIHYtc2hvdz0iY2VydGlmaWNhdGVzaG93MiA9PSBmYWxzZSI+CiAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgIGNsYXNzPSJvbmUtbGVmdCIKICAgICAgICAgICAgICAgICAgOnN0eWxlPSJ7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6CiAgICAgICAgICAgICAgICAgICAgICBpc1VwZGF0ZSA9PSAwCiAgICAgICAgICAgICAgICAgICAgICAgID8gJyM2MDYyNjYnCiAgICAgICAgICAgICAgICAgICAgICAgIDogaW52ZW50b3J5Q2hlY2tEZXRhaWwuaXNVcGRhdGUgIT09IDIKICAgICAgICAgICAgICAgICAgICAgICAgPyAnIzNkODJmZScKICAgICAgICAgICAgICAgICAgICAgICAgOiAnIzYwNjI2NicsCiAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogaXNVcGRhdGUgPT0gMCA/ICdub3JtYWwnIDogJ2JvbGQnLAogICAgICAgICAgICAgICAgICB9IgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICDlk4HotKjnu4bliIYKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib25lLXJpZ2h0Ij4KICAgICAgICAgICAgICAgICAgPGVsLWlucHV0CiAgICAgICAgICAgICAgICAgICAgOnJlYWRvbmx5PSIKICAgICAgICAgICAgICAgICAgICAgIGlzVXBkYXRlID09IDAKICAgICAgICAgICAgICAgICAgICAgICAgPyB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgIDogaW52ZW50b3J5Q2hlY2tEZXRhaWwuaXNVcGRhdGUgIT09IDIKICAgICAgICAgICAgICAgICAgICAgICAgPyBmYWxzZQogICAgICAgICAgICAgICAgICAgICAgICA6IHRydWUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iaW52ZW50b3J5Q2hlY2tEZXRhaWwuc3Vic2VjdGlvbiIKICAgICAgICAgICAgICAgICAgICBjbGVhcmFibGUKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8L2VsLWlucHV0PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGl2LW9uZSIgdi1zaG93PSJjZXJ0aWZpY2F0ZXNob3cyID09IGZhbHNlIj4KICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgY2xhc3M9Im9uZS1sZWZ0IgogICAgICAgICAgICAgICAgICA6c3R5bGU9InsKICAgICAgICAgICAgICAgICAgICBjb2xvcjoKICAgICAgICAgICAgICAgICAgICAgIGlzVXBkYXRlID09IDAKICAgICAgICAgICAgICAgICAgICAgICAgPyAnIzYwNjI2NicKICAgICAgICAgICAgICAgICAgICAgICAgOiBpbnZlbnRvcnlDaGVja0RldGFpbC5pc1VwZGF0ZSAhPT0gMgogICAgICAgICAgICAgICAgICAgICAgICA/ICcjM2Q4MmZlJwogICAgICAgICAgICAgICAgICAgICAgICA6ICcjNjA2MjY2JywKICAgICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiBpc1VwZGF0ZSA9PSAwID8gJ25vcm1hbCcgOiAnYm9sZCcsCiAgICAgICAgICAgICAgICAgIH0iCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIOebkuWtkOe8luWPtwogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvbmUtcmlnaHQiPgogICAgICAgICAgICAgICAgICA8ZWwtaW5wdXQKICAgICAgICAgICAgICAgICAgICA6cmVhZG9ubHk9IgogICAgICAgICAgICAgICAgICAgICAgaXNVcGRhdGUgPT0gMAogICAgICAgICAgICAgICAgICAgICAgICA/IHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgOiBpbnZlbnRvcnlDaGVja0RldGFpbC5pc1VwZGF0ZSAhPT0gMgogICAgICAgICAgICAgICAgICAgICAgICA/IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgIDogdHJ1ZQogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJpbnZlbnRvcnlDaGVja0RldGFpbC5ib3hOdW1iZXIiCiAgICAgICAgICAgICAgICAgICAgY2xlYXJhYmxlCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPC9lbC1pbnB1dD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdi1vbmUiIHYtc2hvdz0iY2VydGlmaWNhdGVzaG93MiA9PSBmYWxzZSI+CiAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgIGNsYXNzPSJvbmUtbGVmdCIKICAgICAgICAgICAgICAgICAgOnN0eWxlPSJ7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6CiAgICAgICAgICAgICAgICAgICAgICBpc1VwZGF0ZSA9PSAwCiAgICAgICAgICAgICAgICAgICAgICAgID8gJyM2MDYyNjYnCiAgICAgICAgICAgICAgICAgICAgICAgIDogaW52ZW50b3J5Q2hlY2tEZXRhaWwuaXNVcGRhdGUgIT09IDIKICAgICAgICAgICAgICAgICAgICAgICAgPyAnIzNkODJmZScKICAgICAgICAgICAgICAgICAgICAgICAgOiAnIzYwNjI2NicsCiAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogaXNVcGRhdGUgPT0gMCA/ICdub3JtYWwnIDogJ2JvbGQnLAogICAgICAgICAgICAgICAgICB9IgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICDor4HkuabnvJblj7cKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib25lLXJpZ2h0Ij4KICAgICAgICAgICAgICAgICAgPGVsLWlucHV0CiAgICAgICAgICAgICAgICAgICAgOnJlYWRvbmx5PSIKICAgICAgICAgICAgICAgICAgICAgIGlzVXBkYXRlID09IDAKICAgICAgICAgICAgICAgICAgICAgICAgPyB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgIDogaW52ZW50b3J5Q2hlY2tEZXRhaWwuaXNVcGRhdGUgIT09IDIKICAgICAgICAgICAgICAgICAgICAgICAgPyBmYWxzZQogICAgICAgICAgICAgICAgICAgICAgICA6IHRydWUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iaW52ZW50b3J5Q2hlY2tEZXRhaWwuY2VydGlmaWNhdGVOdW1iZXIiCiAgICAgICAgICAgICAgICAgICAgY2xlYXJhYmxlCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPC9lbC1pbnB1dD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdi1vbmUiIHYtc2hvdz0iY2VydGlmaWNhdGVzaG93MiA9PSBmYWxzZSI+CiAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgIGNsYXNzPSJvbmUtbGVmdCIKICAgICAgICAgICAgICAgICAgOnN0eWxlPSJ7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6CiAgICAgICAgICAgICAgICAgICAgICBpc1VwZGF0ZSA9PSAwCiAgICAgICAgICAgICAgICAgICAgICAgID8gJyM2MDYyNjYnCiAgICAgICAgICAgICAgICAgICAgICAgIDogaW52ZW50b3J5Q2hlY2tEZXRhaWwuaXNVcGRhdGUgIT09IDIKICAgICAgICAgICAgICAgICAgICAgICAgPyAnIzNkODJmZScKICAgICAgICAgICAgICAgICAgICAgICAgOiAnIzYwNjI2NicsCiAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogaXNVcGRhdGUgPT0gMCA/ICdub3JtYWwnIDogJ2JvbGQnLAogICAgICAgICAgICAgICAgICB9IgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICDlj5Hnpajlj7cKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib25lLXJpZ2h0Ij4KICAgICAgICAgICAgICAgICAgPGVsLWlucHV0CiAgICAgICAgICAgICAgICAgICAgOnJlYWRvbmx5PSIKICAgICAgICAgICAgICAgICAgICAgIGlzVXBkYXRlID09IDAKICAgICAgICAgICAgICAgICAgICAgICAgPyB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgIDogaW52ZW50b3J5Q2hlY2tEZXRhaWwuaXNVcGRhdGUgIT09IDIKICAgICAgICAgICAgICAgICAgICAgICAgPyBmYWxzZQogICAgICAgICAgICAgICAgICAgICAgICA6IHRydWUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iaW52ZW50b3J5Q2hlY2tEZXRhaWwuYmlsbE51bWJlciIKICAgICAgICAgICAgICAgICAgICBjbGVhcmFibGUKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8L2VsLWlucHV0PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8cCBjbGFzcz0iZm9udC10aXRsZS1zdHlsZSI+5Zu+54mH5L+h5oGvPC9wPgogICAgICAgICAgICA8ZGl2IHN0eWxlPSJkaXNwbGF5OmZsZXg7Ij4KICAgICAgICAgICAgICA8cAogICAgICAgICAgICAgICAgOnN0eWxlPSJ7CiAgICAgICAgICAgICAgICAgIGNvbG9yOgogICAgICAgICAgICAgICAgICAgIGlzVXBkYXRlID09IDAKICAgICAgICAgICAgICAgICAgICAgID8gJyM2MDYyNjYnCiAgICAgICAgICAgICAgICAgICAgICA6IGludmVudG9yeUNoZWNrRGV0YWlsLmlzVXBkYXRlICE9PSAyCiAgICAgICAgICAgICAgICAgICAgICA/ICcjM2Q4MmZlJwogICAgICAgICAgICAgICAgICAgICAgOiAnIzYwNjI2NicsCiAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IGlzVXBkYXRlID09IDAgPyAnbm9ybWFsJyA6ICdib2xkJywKICAgICAgICAgICAgICAgICAgbWFyZ2luOiAwLAogICAgICAgICAgICAgICAgICB3aWR0aDogJzUwcHgnLAogICAgICAgICAgICAgICAgfSIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICDlm77niYfvvJoKICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idXBsb2FkLWltZ3MiPgogICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICBjbGFzcz0iYWRkIgogICAgICAgICAgICAgICAgICB2LXNob3c9IgogICAgICAgICAgICAgICAgICAgIGlzVXBkYXRlID09IDEgJiYgaW52ZW50b3J5Q2hlY2tEZXRhaWwuaXNVcGRhdGUgIT09IDIKICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8Zm9ybSBlbmN0eXBlPSJtdWx0aXBhcnQvZm9ybS1kYXRhIiBzdHlsZT0id2lkdGg6IDEwMHB4OyI+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICAgICAgICBAY2hhbmdlPSJpbnB1dENoYW5nZSgkZXZlbnQpIgogICAgICAgICAgICAgICAgICAgICAgbXVsdGlwbGUKICAgICAgICAgICAgICAgICAgICAgIHR5cGU9ImZpbGUiCiAgICAgICAgICAgICAgICAgICAgICBuYW1lPSJpbWciCiAgICAgICAgICAgICAgICAgICAgICBhY2NlcHQ9ImltYWdlLyoiCiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaW5wdXRVcGxvYWQiCiAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZWwtaWNvbi1wbHVzIGFkZEljb24iPjwvaT4KICAgICAgICAgICAgICAgICAgPC9mb3JtPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgIHN0eWxlPSJkaXNwbGF5OmZsZXg7cG9zaXRpb246cmVsYXRpdmU7ZmxleC13cmFwOiB3cmFwOyIKICAgICAgICAgICAgICAgICAgaWQ9ImRlbEltZyIKICAgICAgICAgICAgICAgICAgY2xhc3M9ImRlbEltZyIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgIHYtZm9yPSIoaW1ndXJsLCBpbmRleCkgb2YgaW1nTGlzdCIKICAgICAgICAgICAgICAgICAgICA6a2V5PSJpbmRleCIKICAgICAgICAgICAgICAgICAgICBzdHlsZT0ibWFyZ2luLWxlZnQ6MTBweDtwb3NpdGlvbjpyZWxhdGl2ZTsiCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICAgICAgdi1pZj0iaW1ndXJsICE9PSAnJyAmJiBpbWd1cmwgIT09IG51bGwiCiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ic3BhblN0eWxlIgogICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSJkZWxJbWFnZShpbmRleCkiCiAgICAgICAgICAgICAgICAgICAgICA+eDwvc3BhbgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICB2LWlmPSJpbWd1cmwgIT09ICcnICYmIGltZ3VybCAhPT0gbnVsbCIKICAgICAgICAgICAgICAgICAgICAgIDpzcmM9ImltZyArICcvZmlsZS8nICsgaW1ndXJsIgogICAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjEwMHB4IgogICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PSIxMDBweCIKICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJib3JkZXItcmFkaXVzOjVweDtvYmplY3QtZml0OmNvdmVyOyIKICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPHAgY2xhc3M9ImZvbnQtdGl0bGUtc3R5bGUiPuWkh+azqOS/oeaBrzwvcD4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9udC1kaXYiPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdi1vbmUtbm90ZSIgaWQ9Im9uZS1ub3RlIj4KICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgY2xhc3M9Im9uZS1sZWZ0IgogICAgICAgICAgICAgICAgICA6c3R5bGU9InsKICAgICAgICAgICAgICAgICAgICBjb2xvcjoKICAgICAgICAgICAgICAgICAgICAgIGlzVXBkYXRlID09IDAKICAgICAgICAgICAgICAgICAgICAgICAgPyAnIzYwNjI2NicKICAgICAgICAgICAgICAgICAgICAgICAgOiBpbnZlbnRvcnlDaGVja0RldGFpbC5pc1VwZGF0ZSAhPT0gMgogICAgICAgICAgICAgICAgICAgICAgICA/ICcjM2Q4MmZlJwogICAgICAgICAgICAgICAgICAgICAgICA6ICcjNjA2MjY2JywKICAgICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiBpc1VwZGF0ZSA9PSAwID8gJ25vcm1hbCcgOiAnYm9sZCcsCiAgICAgICAgICAgICAgICAgIH0iCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIOS6p+WTgeWkh+azqAogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvbmUtcmlnaHQiPgogICAgICAgICAgICAgICAgICA8ZWwtaW5wdXQKICAgICAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0YXJlYSIKICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJpbnZlbnRvcnlDaGVja0RldGFpbC5ub3RlIgogICAgICAgICAgICAgICAgICAgIDpyZWFkb25seT0iCiAgICAgICAgICAgICAgICAgICAgICBpc1VwZGF0ZSA9PSAwCiAgICAgICAgICAgICAgICAgICAgICAgID8gdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICA6IGludmVudG9yeUNoZWNrRGV0YWlsLmlzVXBkYXRlICE9PSAyCiAgICAgICAgICAgICAgICAgICAgICAgID8gZmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgOiB0cnVlCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDwvZWwtaW5wdXQ+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2VsLXRhYi1wYW5lPgogICAgICAgICAgPGVsLXRhYi1wYW5lIGxhYmVsPSLku7fmoLzkv6Hmga8iIG5hbWU9InRoaXJkIj4KICAgICAgICAgICAgPGRpdiBzdHlsZT0iZGlzcGxheTogZmxleDtqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47Ij4KICAgICAgICAgICAgICA8cCBjbGFzcz0iZm9udC10aXRsZS1zdHlsZSIgc3R5bGU9Im1hcmdpbi10b3A6IDA7Ij7ku7fmoLzkv6Hmga88L3A+CiAgICAgICAgICAgICAgPGRpdiBzdHlsZT0icGFkZGluZy10b3A6IDZweDsiPgogICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICBzdHlsZT0iY3Vyc29yOiBwb2ludGVyOyIKICAgICAgICAgICAgICAgICAgdGl0bGU9IuS/ruaUueS7t+agvOS/oeaBryIKICAgICAgICAgICAgICAgICAgc3JjPSIuLi9hc3NldHMvaW1ncy9ob21lL3VwZGF0ZS5wbmciCiAgICAgICAgICAgICAgICAgIEBjbGljaz0idXBkYXRlRGV2aWNlIgogICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvbnQtZGl2Ij4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkaXYtb25lIiB2LXNob3c9ImNlcnRpZmljYXRlc2hvdzIgPT0gZmFsc2UiPgogICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICBjbGFzcz0ib25lLWxlZnQiCiAgICAgICAgICAgICAgICAgIDpzdHlsZT0iewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzYwNjI2NicsCiAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogJ25vcm1hbCcsCiAgICAgICAgICAgICAgICAgIH0iCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIOiuoeS7t+WNleS9jQogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvbmUtcmlnaHQiPgogICAgICAgICAgICAgICAgICA8ZWwtcmFkaW8tZ3JvdXAKICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJpbnZlbnRvcnlDaGVja0RldGFpbC5jaGFyZ2VVbml0IgogICAgICAgICAgICAgICAgICAgIGRpc2FibGVkCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8ZWwtcmFkaW8gbGFiZWw9IueykiI+57KSPC9lbC1yYWRpbz4KICAgICAgICAgICAgICAgICAgICA8ZWwtcmFkaW8gbGFiZWw9ImN0Ij5jdDwvZWwtcmFkaW8+CiAgICAgICAgICAgICAgICAgICAgPGVsLXJhZGlvIGxhYmVsPSJnIj5nPC9lbC1yYWRpbz4KICAgICAgICAgICAgICAgICAgPC9lbC1yYWRpby1ncm91cD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdi1vbmUiIHYtc2hvdz0iY2VydGlmaWNhdGVzaG93MiA9PSBmYWxzZSI+CiAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgIGNsYXNzPSJvbmUtbGVmdCIKICAgICAgICAgICAgICAgICAgOnN0eWxlPSJ7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6CiAgICAgICAgICAgICAgICAgICAgICBpc1VwZGF0ZSA9PSAwCiAgICAgICAgICAgICAgICAgICAgICAgID8gJyM2MDYyNjYnCiAgICAgICAgICAgICAgICAgICAgICAgIDogaW52ZW50b3J5Q2hlY2tEZXRhaWwuaXNVcGRhdGUgIT09IDIKICAgICAgICAgICAgICAgICAgICAgICAgPyAnIzNkODJmZScKICAgICAgICAgICAgICAgICAgICAgICAgOiAnIzYwNjI2NicsCiAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogaXNVcGRhdGUgPT0gMCA/ICdub3JtYWwnIDogJ2JvbGQnLAogICAgICAgICAgICAgICAgICB9IgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICDljZXku7cKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib25lLXJpZ2h0Ij4KICAgICAgICAgICAgICAgICAgPGVsLWlucHV0CiAgICAgICAgICAgICAgICAgICAgOnJlYWRvbmx5PSIKICAgICAgICAgICAgICAgICAgICAgIGlzVXBkYXRlID09IDAKICAgICAgICAgICAgICAgICAgICAgICAgPyB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgIDogaW52ZW50b3J5Q2hlY2tEZXRhaWwuaXNVcGRhdGUgIT09IDIKICAgICAgICAgICAgICAgICAgICAgICAgPyBmYWxzZQogICAgICAgICAgICAgICAgICAgICAgICA6IHRydWUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iaW52ZW50b3J5Q2hlY2tEZXRhaWwudW5pdFByaWNlIgogICAgICAgICAgICAgICAgICAgIEBpbnB1dD0icHJpY2VUb3RhbDMiCiAgICAgICAgICAgICAgICAgICAgY2xlYXJhYmxlCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPC9lbC1pbnB1dD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdi1vbmUiIHYtc2hvdz0iY2VydGlmaWNhdGVzaG93MiA9PSBmYWxzZSI+CiAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgIGNsYXNzPSJvbmUtbGVmdCIKICAgICAgICAgICAgICAgICAgOnN0eWxlPSJ7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6CiAgICAgICAgICAgICAgICAgICAgICBpc1VwZGF0ZSA9PSAwCiAgICAgICAgICAgICAgICAgICAgICAgID8gJyM2MDYyNjYnCiAgICAgICAgICAgICAgICAgICAgICAgIDogaW52ZW50b3J5Q2hlY2tEZXRhaWwuaXNVcGRhdGUgIT09IDIKICAgICAgICAgICAgICAgICAgICAgICAgPyAnIzNkODJmZScKICAgICAgICAgICAgICAgICAgICAgICAgOiAnIzYwNjI2NicsCiAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogaXNVcGRhdGUgPT0gMCA/ICdub3JtYWwnIDogJ2JvbGQnLAogICAgICAgICAgICAgICAgICB9IgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICDluIHnp40KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib25lLXJpZ2h0Ij4KICAgICAgICAgICAgICAgICAgPGVsLXJhZGlvLWdyb3VwCiAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iaW52ZW50b3J5Q2hlY2tEZXRhaWwuY3VycmVuY3kiCiAgICAgICAgICAgICAgICAgICAgOmRpc2FibGVkPSIKICAgICAgICAgICAgICAgICAgICAgIGlzVXBkYXRlID09IDAKICAgICAgICAgICAgICAgICAgICAgICAgPyB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgIDogaW52ZW50b3J5Q2hlY2tEZXRhaWwuaXNVcGRhdGUgIT09IDIKICAgICAgICAgICAgICAgICAgICAgICAgPyBmYWxzZQogICAgICAgICAgICAgICAgICAgICAgICA6IHRydWUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8ZWwtcmFkaW8gbGFiZWw9IkNOWSI+Q05ZPC9lbC1yYWRpbz4KICAgICAgICAgICAgICAgICAgICA8ZWwtcmFkaW8gbGFiZWw9IkVVUiI+RVVSPC9lbC1yYWRpbz4KICAgICAgICAgICAgICAgICAgICA8ZWwtcmFkaW8gbGFiZWw9IlVTRCI+VVNEPC9lbC1yYWRpbz4KICAgICAgICAgICAgICAgICAgICA8ZWwtcmFkaW8gbGFiZWw9IkhLRCI+SEtEPC9lbC1yYWRpbz4KICAgICAgICAgICAgICAgICAgPC9lbC1yYWRpby1ncm91cD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdi1vbmUiPgogICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICBjbGFzcz0ib25lLWxlZnQiCiAgICAgICAgICAgICAgICAgIDpzdHlsZT0iewogICAgICAgICAgICAgICAgICAgIGNvbG9yOgogICAgICAgICAgICAgICAgICAgICAgaXNVcGRhdGUgPT0gMAogICAgICAgICAgICAgICAgICAgICAgICA/ICcjNjA2MjY2JwogICAgICAgICAgICAgICAgICAgICAgICA6IGludmVudG9yeUNoZWNrRGV0YWlsLmlzVXBkYXRlID09IDAKICAgICAgICAgICAgICAgICAgICAgICAgPyAnIzNkODJmZScKICAgICAgICAgICAgICAgICAgICAgICAgOiAnIzYwNjI2NicsCiAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogaXNVcGRhdGUgPT0gMCA/ICdub3JtYWwnIDogJ2JvbGQnLAogICAgICAgICAgICAgICAgICB9IgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICDmgLvmlbDph48KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib25lLXJpZ2h0Ij4KICAgICAgICAgICAgICAgICAgPGVsLWlucHV0CiAgICAgICAgICAgICAgICAgICAgOnJlYWRvbmx5PSIKICAgICAgICAgICAgICAgICAgICAgIGlzVXBkYXRlID09IDAKICAgICAgICAgICAgICAgICAgICAgICAgPyB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgIDogaW52ZW50b3J5Q2hlY2tEZXRhaWwuaXNVcGRhdGUgPT0gMAogICAgICAgICAgICAgICAgICAgICAgICA/IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgIDogdHJ1ZQogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJpbnZlbnRvcnlDaGVja0RldGFpbC5udW1iZXIiCiAgICAgICAgICAgICAgICAgICAgY2xlYXJhYmxlCiAgICAgICAgICAgICAgICAgICAgPjxpCiAgICAgICAgICAgICAgICAgICAgICBzbG90PSJzdWZmaXgiCiAgICAgICAgICAgICAgICAgICAgICB2LWlmPSJpbnZlbnRvcnlDaGVja0RldGFpbC5jaGFyZ2VVbml0ID09ICfnspInIgogICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImNvbG9yOiAjNjA2MjY2O2ZvbnQtc3R5bGU6bm9ybWFsOyIKICAgICAgICAgICAgICAgICAgICAgID57eyBpbnZlbnRvcnlDaGVja0RldGFpbC5jaGFyZ2VVbml0IH19PC9pCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8L2VsLWlucHV0PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGl2LW9uZSIgdi1zaG93PSJjZXJ0aWZpY2F0ZXNob3cyID09IGZhbHNlIj4KICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgY2xhc3M9Im9uZS1sZWZ0IgogICAgICAgICAgICAgICAgICA6c3R5bGU9InsKICAgICAgICAgICAgICAgICAgICBjb2xvcjoKICAgICAgICAgICAgICAgICAgICAgIGlzVXBkYXRlID09IDAKICAgICAgICAgICAgICAgICAgICAgICAgPyAnIzYwNjI2NicKICAgICAgICAgICAgICAgICAgICAgICAgOiBpbnZlbnRvcnlDaGVja0RldGFpbC5pc1VwZGF0ZSAhPT0gMgogICAgICAgICAgICAgICAgICAgICAgICA/ICcjM2Q4MmZlJwogICAgICAgICAgICAgICAgICAgICAgICA6ICcjNjA2MjY2JywKICAgICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiBpc1VwZGF0ZSA9PSAwID8gJ25vcm1hbCcgOiAnYm9sZCcsCiAgICAgICAgICAgICAgICAgIH0iCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIOaAu+mHjemHjwogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvbmUtcmlnaHQiPgogICAgICAgICAgICAgICAgICA8ZWwtaW5wdXQKICAgICAgICAgICAgICAgICAgICA6cmVhZG9ubHk9IgogICAgICAgICAgICAgICAgICAgICAgaXNVcGRhdGUgPT0gMAogICAgICAgICAgICAgICAgICAgICAgICA/IHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgOiBpbnZlbnRvcnlDaGVja0RldGFpbC5pc1VwZGF0ZSAhPT0gMgogICAgICAgICAgICAgICAgICAgICAgICA/IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgIDogdHJ1ZQogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJpbnZlbnRvcnlDaGVja0RldGFpbC53ZWlnaHQiCiAgICAgICAgICAgICAgICAgICAgQGlucHV0PSJwcmljZVRvdGFsMyIKICAgICAgICAgICAgICAgICAgICBjbGVhcmFibGUKICAgICAgICAgICAgICAgICAgICA+PGkKICAgICAgICAgICAgICAgICAgICAgIHNsb3Q9InN1ZmZpeCIKICAgICAgICAgICAgICAgICAgICAgIHYtaWY9ImludmVudG9yeUNoZWNrRGV0YWlsLmNoYXJnZVVuaXQgIT0gJ+eykiciCiAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iY29sb3I6ICM2MDYyNjY7Zm9udC1zdHlsZTpub3JtYWw7IgogICAgICAgICAgICAgICAgICAgICAgPnt7IGludmVudG9yeUNoZWNrRGV0YWlsLmNoYXJnZVVuaXQgfX08L2kKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDwvZWwtaW5wdXQ+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkaXYtb25lIiB2LXNob3c9ImNlcnRpZmljYXRlc2hvdzIgPT0gZmFsc2UiPgogICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICBjbGFzcz0ib25lLWxlZnQiCiAgICAgICAgICAgICAgICAgIDpzdHlsZT0iewogICAgICAgICAgICAgICAgICAgIGNvbG9yOgogICAgICAgICAgICAgICAgICAgICAgaXNVcGRhdGUgPT0gMAogICAgICAgICAgICAgICAgICAgICAgICA/ICcjNjA2MjY2JwogICAgICAgICAgICAgICAgICAgICAgICA6IGludmVudG9yeUNoZWNrRGV0YWlsLmlzVXBkYXRlID09IDAKICAgICAgICAgICAgICAgICAgICAgICAgPyAnIzNkODJmZScKICAgICAgICAgICAgICAgICAgICAgICAgOiAnIzYwNjI2NicsCiAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogaXNVcGRhdGUgPT0gMCA/ICdub3JtYWwnIDogJ2JvbGQnLAogICAgICAgICAgICAgICAgICB9IgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICDmgLvku7cKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib25lLXJpZ2h0Ij4KICAgICAgICAgICAgICAgICAgPGVsLWlucHV0CiAgICAgICAgICAgICAgICAgICAgOnJlYWRvbmx5PSIKICAgICAgICAgICAgICAgICAgICAgIGlzVXBkYXRlID09IDAKICAgICAgICAgICAgICAgICAgICAgICAgPyB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgIDogaW52ZW50b3J5Q2hlY2tEZXRhaWwuaXNVcGRhdGUgPT0gMAogICAgICAgICAgICAgICAgICAgICAgICA/IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgIDogdHJ1ZQogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJpbnZlbnRvcnlDaGVja0RldGFpbC50b3RhbFByaWNlIgogICAgICAgICAgICAgICAgICAgIGNsZWFyYWJsZQogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgPGkKICAgICAgICAgICAgICAgICAgICAgIHNsb3Q9InN1ZmZpeCIKICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJjb2xvcjogIzYwNjI2Njtmb250LXN0eWxlOm5vcm1hbDsiCiAgICAgICAgICAgICAgICAgICAgICA+e3sgaW52ZW50b3J5Q2hlY2tEZXRhaWwuY3VycmVuY3kgfX08L2kKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDwvZWwtaW5wdXQ+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkaXYtb25lIiB2LXNob3c9ImNlcnRpZmljYXRlc2hvdzIgPT0gZmFsc2UiPgogICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICBjbGFzcz0ib25lLWxlZnQiCiAgICAgICAgICAgICAgICAgIDpzdHlsZT0iewogICAgICAgICAgICAgICAgICAgIGNvbG9yOgogICAgICAgICAgICAgICAgICAgICAgaXNVcGRhdGUgPT0gMAogICAgICAgICAgICAgICAgICAgICAgICA/ICcjNjA2MjY2JwogICAgICAgICAgICAgICAgICAgICAgICA6IGludmVudG9yeUNoZWNrRGV0YWlsLmlzVXBkYXRlICE9PSAyCiAgICAgICAgICAgICAgICAgICAgICAgID8gJyMzZDgyZmUnCiAgICAgICAgICAgICAgICAgICAgICAgIDogJyM2MDYyNjYnLAogICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IGlzVXBkYXRlID09IDAgPyAnbm9ybWFsJyA6ICdib2xkJywKICAgICAgICAgICAgICAgICAgfSIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAg6Zu25ZSu5Y2V5Lu3CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9uZS1yaWdodCI+CiAgICAgICAgICAgICAgICAgIDxlbC1pbnB1dAogICAgICAgICAgICAgICAgICAgIDpyZWFkb25seT0iCiAgICAgICAgICAgICAgICAgICAgICBpc1VwZGF0ZSA9PSAwCiAgICAgICAgICAgICAgICAgICAgICAgID8gdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICA6IGludmVudG9yeUNoZWNrRGV0YWlsLmlzVXBkYXRlICE9PSAyCiAgICAgICAgICAgICAgICAgICAgICAgID8gZmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgOiB0cnVlCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImludmVudG9yeUNoZWNrRGV0YWlsLnJldGFpbFByaWNlIgogICAgICAgICAgICAgICAgICAgIGNsZWFyYWJsZQogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDwvZWwtaW5wdXQ+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkaXYtb25lIiB2LXNob3c9ImNlcnRpZmljYXRlc2hvdzIgPT0gZmFsc2UiPgogICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICBjbGFzcz0ib25lLWxlZnQiCiAgICAgICAgICAgICAgICAgIDpzdHlsZT0iewogICAgICAgICAgICAgICAgICAgIGNvbG9yOgogICAgICAgICAgICAgICAgICAgICAgaXNVcGRhdGUgPT0gMAogICAgICAgICAgICAgICAgICAgICAgICA/ICcjNjA2MjY2JwogICAgICAgICAgICAgICAgICAgICAgICA6IGludmVudG9yeUNoZWNrRGV0YWlsLmlzVXBkYXRlICE9PSAyCiAgICAgICAgICAgICAgICAgICAgICAgID8gJyMzZDgyZmUnCiAgICAgICAgICAgICAgICAgICAgICAgIDogJyM2MDYyNjYnLAogICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IGlzVXBkYXRlID09IDAgPyAnbm9ybWFsJyA6ICdib2xkJywKICAgICAgICAgICAgICAgICAgfSIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAg5bu66K6u5p+c5Y+w5pyA5L2O6ZSA5ZSu5Lu3CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9uZS1yaWdodCI+CiAgICAgICAgICAgICAgICAgIDxlbC1pbnB1dAogICAgICAgICAgICAgICAgICAgIDpyZWFkb25seT0iCiAgICAgICAgICAgICAgICAgICAgICBpc1VwZGF0ZSA9PSAwCiAgICAgICAgICAgICAgICAgICAgICAgID8gdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICA6IGludmVudG9yeUNoZWNrRGV0YWlsLmlzVXBkYXRlICE9PSAyCiAgICAgICAgICAgICAgICAgICAgICAgID8gZmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgOiB0cnVlCiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImludmVudG9yeUNoZWNrRGV0YWlsLmNvdW50ZXJMb3dlc3RTZWxsUHJpY2UiCiAgICAgICAgICAgICAgICAgICAgY2xlYXJhYmxlCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPC9lbC1pbnB1dD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdi1vbmUiIHYtc2hvdz0iY2VydGlmaWNhdGVzaG93MiA9PSBmYWxzZSI+CiAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgIGNsYXNzPSJvbmUtbGVmdCIKICAgICAgICAgICAgICAgICAgOnN0eWxlPSJ7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6CiAgICAgICAgICAgICAgICAgICAgICBpc1VwZGF0ZSA9PSAwCiAgICAgICAgICAgICAgICAgICAgICAgID8gJyM2MDYyNjYnCiAgICAgICAgICAgICAgICAgICAgICAgIDogaW52ZW50b3J5Q2hlY2tEZXRhaWwuaXNVcGRhdGUgIT09IDIKICAgICAgICAgICAgICAgICAgICAgICAgPyAnIzNkODJmZScKICAgICAgICAgICAgICAgICAgICAgICAgOiAnIzYwNjI2NicsCiAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogaXNVcGRhdGUgPT0gMCA/ICdub3JtYWwnIDogJ2JvbGQnLAogICAgICAgICAgICAgICAgICB9IgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICDku6PnkIbku7cKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib25lLXJpZ2h0Ij4KICAgICAgICAgICAgICAgICAgPGVsLWlucHV0CiAgICAgICAgICAgICAgICAgICAgOnJlYWRvbmx5PSIKICAgICAgICAgICAgICAgICAgICAgIGlzVXBkYXRlID09IDAKICAgICAgICAgICAgICAgICAgICAgICAgPyB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgIDogaW52ZW50b3J5Q2hlY2tEZXRhaWwuaXNVcGRhdGUgIT09IDIKICAgICAgICAgICAgICAgICAgICAgICAgPyBmYWxzZQogICAgICAgICAgICAgICAgICAgICAgICA6IHRydWUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iaW52ZW50b3J5Q2hlY2tEZXRhaWwuYWdlbnRQcmljZSIKICAgICAgICAgICAgICAgICAgICBjbGVhcmFibGUKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8L2VsLWlucHV0PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGl2LW9uZSIgdi1zaG93PSJjZXJ0aWZpY2F0ZXNob3cyID09IGZhbHNlIj4KICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgY2xhc3M9Im9uZS1sZWZ0IgogICAgICAgICAgICAgICAgICA6c3R5bGU9InsKICAgICAgICAgICAgICAgICAgICBjb2xvcjoKICAgICAgICAgICAgICAgICAgICAgIGlzVXBkYXRlID09IDAKICAgICAgICAgICAgICAgICAgICAgICAgPyAnIzYwNjI2NicKICAgICAgICAgICAgICAgICAgICAgICAgOiBpbnZlbnRvcnlDaGVja0RldGFpbC5pc1VwZGF0ZSAhPT0gMgogICAgICAgICAgICAgICAgICAgICAgICA/ICcjM2Q4MmZlJwogICAgICAgICAgICAgICAgICAgICAgICA6ICcjNjA2MjY2JywKICAgICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiBpc1VwZGF0ZSA9PSAwID8gJ25vcm1hbCcgOiAnYm9sZCcsCiAgICAgICAgICAgICAgICAgIH0iCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIOaJueWPkeWNleS7twogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvbmUtcmlnaHQiPgogICAgICAgICAgICAgICAgICA8ZWwtaW5wdXQKICAgICAgICAgICAgICAgICAgICA6cmVhZG9ubHk9IgogICAgICAgICAgICAgICAgICAgICAgaXNVcGRhdGUgPT0gMAogICAgICAgICAgICAgICAgICAgICAgICA/IHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgOiBpbnZlbnRvcnlDaGVja0RldGFpbC5pc1VwZGF0ZSAhPT0gMgogICAgICAgICAgICAgICAgICAgICAgICA/IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgIDogdHJ1ZQogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJpbnZlbnRvcnlDaGVja0RldGFpbC53aG9sZXNhbGVQcmljZSIKICAgICAgICAgICAgICAgICAgICBjbGVhcmFibGUKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8L2VsLWlucHV0PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGl2LW9uZSIgdi1zaG93PSJjZXJ0aWZpY2F0ZXNob3cyID09IGZhbHNlIj4KICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgY2xhc3M9Im9uZS1sZWZ0IgogICAgICAgICAgICAgICAgICA6c3R5bGU9InsKICAgICAgICAgICAgICAgICAgICBjb2xvcjoKICAgICAgICAgICAgICAgICAgICAgIGlzVXBkYXRlID09IDAKICAgICAgICAgICAgICAgICAgICAgICAgPyAnIzYwNjI2NicKICAgICAgICAgICAgICAgICAgICAgICAgOiBpbnZlbnRvcnlDaGVja0RldGFpbC5pc1VwZGF0ZSAhPT0gMgogICAgICAgICAgICAgICAgICAgICAgICA/ICcjM2Q4MmZlJwogICAgICAgICAgICAgICAgICAgICAgICA6ICcjNjA2MjY2JywKICAgICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiBpc1VwZGF0ZSA9PSAwID8gJ25vcm1hbCcgOiAnYm9sZCcsCiAgICAgICAgICAgICAgICAgIH0iCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIOWkluW4geWFkeS6uuawkeW4geaxh+eOhwogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvbmUtcmlnaHQiPgogICAgICAgICAgICAgICAgICA8ZWwtaW5wdXQKICAgICAgICAgICAgICAgICAgICA6cmVhZG9ubHk9IgogICAgICAgICAgICAgICAgICAgICAgaXNVcGRhdGUgPT0gMAogICAgICAgICAgICAgICAgICAgICAgICA/IHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgOiBpbnZlbnRvcnlDaGVja0RldGFpbC5pc1VwZGF0ZSAhPT0gMgogICAgICAgICAgICAgICAgICAgICAgICA/IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgIDogdHJ1ZQogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJpbnZlbnRvcnlDaGVja0RldGFpbC50b3RhbENuUmF0ZSIKICAgICAgICAgICAgICAgICAgICBjbGVhcmFibGUKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8L2VsLWlucHV0PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGl2LW9uZSIgdi1zaG93PSJjZXJ0aWZpY2F0ZXNob3cyID09IGZhbHNlIj4KICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgY2xhc3M9Im9uZS1sZWZ0IgogICAgICAgICAgICAgICAgICA6c3R5bGU9InsKICAgICAgICAgICAgICAgICAgICBjb2xvcjoKICAgICAgICAgICAgICAgICAgICAgIGlzVXBkYXRlID09IDAKICAgICAgICAgICAgICAgICAgICAgICAgPyAnIzYwNjI2NicKICAgICAgICAgICAgICAgICAgICAgICAgOiBpbnZlbnRvcnlDaGVja0RldGFpbC5pc1VwZGF0ZSAhPT0gMgogICAgICAgICAgICAgICAgICAgICAgICA/ICcjM2Q4MmZlJwogICAgICAgICAgICAgICAgICAgICAgICA6ICcjNjA2MjY2JywKICAgICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiBpc1VwZGF0ZSA9PSAwID8gJ25vcm1hbCcgOiAnYm9sZCcsCiAgICAgICAgICAgICAgICAgIH0iCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIOaAu+S7t+S6uuawkeW4gemHkeminQogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvbmUtcmlnaHQiPgogICAgICAgICAgICAgICAgICA8ZWwtaW5wdXQKICAgICAgICAgICAgICAgICAgICA6cmVhZG9ubHk9IgogICAgICAgICAgICAgICAgICAgICAgaXNVcGRhdGUgPT0gMAogICAgICAgICAgICAgICAgICAgICAgICA/IHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgOiBpbnZlbnRvcnlDaGVja0RldGFpbC5pc1VwZGF0ZSAhPT0gMgogICAgICAgICAgICAgICAgICAgICAgICA/IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgIDogdHJ1ZQogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJpbnZlbnRvcnlDaGVja0RldGFpbC50b3RhbENuUHJpY2UiCiAgICAgICAgICAgICAgICAgICAgY2xlYXJhYmxlCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPC9lbC1pbnB1dD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdi1vbmUiIHYtc2hvdz0iY2VydGlmaWNhdGVzaG93MiA9PSBmYWxzZSI+CiAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgIGNsYXNzPSJvbmUtbGVmdCIKICAgICAgICAgICAgICAgICAgOnN0eWxlPSJ7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6CiAgICAgICAgICAgICAgICAgICAgICBpc1VwZGF0ZSA9PSAwCiAgICAgICAgICAgICAgICAgICAgICAgID8gJyM2MDYyNjYnCiAgICAgICAgICAgICAgICAgICAgICAgIDogaW52ZW50b3J5Q2hlY2tEZXRhaWwuaXNVcGRhdGUgIT09IDIKICAgICAgICAgICAgICAgICAgICAgICAgPyAnIzNkODJmZScKICAgICAgICAgICAgICAgICAgICAgICAgOiAnIzYwNjI2NicsCiAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogaXNVcGRhdGUgPT0gMCA/ICdub3JtYWwnIDogJ2JvbGQnLAogICAgICAgICAgICAgICAgICB9IgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICDmuK/luIHlhZHkurrmsJHluIHmsYfnjocKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib25lLXJpZ2h0Ij4KICAgICAgICAgICAgICAgICAgPGVsLWlucHV0CiAgICAgICAgICAgICAgICAgICAgOnJlYWRvbmx5PSIKICAgICAgICAgICAgICAgICAgICAgIGlzVXBkYXRlID09IDAKICAgICAgICAgICAgICAgICAgICAgICAgPyB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgIDogaW52ZW50b3J5Q2hlY2tEZXRhaWwuaXNVcGRhdGUgIT09IDIKICAgICAgICAgICAgICAgICAgICAgICAgPyBmYWxzZQogICAgICAgICAgICAgICAgICAgICAgICA6IHRydWUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iaW52ZW50b3J5Q2hlY2tEZXRhaWwudG90YWxIa1JhdGUiCiAgICAgICAgICAgICAgICAgICAgY2xlYXJhYmxlCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPC9lbC1pbnB1dD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdi1vbmUiIHYtc2hvdz0iY2VydGlmaWNhdGVzaG93MiA9PSBmYWxzZSI+CiAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgIGNsYXNzPSJvbmUtbGVmdCIKICAgICAgICAgICAgICAgICAgOnN0eWxlPSJ7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6CiAgICAgICAgICAgICAgICAgICAgICBpc1VwZGF0ZSA9PSAwCiAgICAgICAgICAgICAgICAgICAgICAgID8gJyM2MDYyNjYnCiAgICAgICAgICAgICAgICAgICAgICAgIDogaW52ZW50b3J5Q2hlY2tEZXRhaWwuaXNVcGRhdGUgIT09IDIKICAgICAgICAgICAgICAgICAgICAgICAgPyAnIzNkODJmZScKICAgICAgICAgICAgICAgICAgICAgICAgOiAnIzYwNjI2NicsCiAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogaXNVcGRhdGUgPT0gMCA/ICdub3JtYWwnIDogJ2JvbGQnLAogICAgICAgICAgICAgICAgICB9IgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICDmgLvku7fmuK/luIHph5Hpop0KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib25lLXJpZ2h0Ij4KICAgICAgICAgICAgICAgICAgPGVsLWlucHV0CiAgICAgICAgICAgICAgICAgICAgOnJlYWRvbmx5PSIKICAgICAgICAgICAgICAgICAgICAgIGlzVXBkYXRlID09IDAKICAgICAgICAgICAgICAgICAgICAgICAgPyB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgIDogaW52ZW50b3J5Q2hlY2tEZXRhaWwuaXNVcGRhdGUgIT09IDIKICAgICAgICAgICAgICAgICAgICAgICAgPyBmYWxzZQogICAgICAgICAgICAgICAgICAgICAgICA6IHRydWUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iaW52ZW50b3J5Q2hlY2tEZXRhaWwudG90YWxIa1ByaWNlIgogICAgICAgICAgICAgICAgICAgIGNsZWFyYWJsZQogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDwvZWwtaW5wdXQ+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxwIGNsYXNzPSJmb250LXRpdGxlLXN0eWxlIj7lpIfms6jkv6Hmga88L3A+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvbnQtZGl2Ij4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkaXYtb25lLW5vdGUiIGlkPSJvbmUtbm90ZSI+CiAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgIGNsYXNzPSJvbmUtbGVmdCIKICAgICAgICAgICAgICAgICAgOnN0eWxlPSJ7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6CiAgICAgICAgICAgICAgICAgICAgICBpc1VwZGF0ZSA9PSAwCiAgICAgICAgICAgICAgICAgICAgICAgID8gJyM2MDYyNjYnCiAgICAgICAgICAgICAgICAgICAgICAgIDogaW52ZW50b3J5Q2hlY2tEZXRhaWwuaXNVcGRhdGUgIT09IDIKICAgICAgICAgICAgICAgICAgICAgICAgPyAnIzNkODJmZScKICAgICAgICAgICAgICAgICAgICAgICAgOiAnIzYwNjI2NicsCiAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogaXNVcGRhdGUgPT0gMCA/ICdub3JtYWwnIDogJ2JvbGQnLAogICAgICAgICAgICAgICAgICB9IgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICDmiJDmnKzlpIfms6gKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib25lLXJpZ2h0Ij4KICAgICAgICAgICAgICAgICAgPGVsLWlucHV0CiAgICAgICAgICAgICAgICAgICAgdHlwZT0idGV4dGFyZWEiCiAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iaW52ZW50b3J5Q2hlY2tEZXRhaWwudG90YWxQcmljZU5vdGUiCiAgICAgICAgICAgICAgICAgICAgOnJlYWRvbmx5PSIKICAgICAgICAgICAgICAgICAgICAgIGlzVXBkYXRlID09IDAKICAgICAgICAgICAgICAgICAgICAgICAgPyB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgIDogaW52ZW50b3J5Q2hlY2tEZXRhaWwuaXNVcGRhdGUgIT09IDIKICAgICAgICAgICAgICAgICAgICAgICAgPyBmYWxzZQogICAgICAgICAgICAgICAgICAgICAgICA6IHRydWUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPC9lbC1pbnB1dD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZWwtdGFiLXBhbmU+CiAgICAgICAgICA8ZWwtdGFiLXBhbmUgbGFiZWw9IuWOhuWPsuiusOW9lSIgbmFtZT0ic2Vjb25kIj4KICAgICAgICAgICAgPHAgY2xhc3M9ImZvbnQtdGl0bGUtc3R5bGUiIHN0eWxlPSJtYXJnaW4tdG9wOiAwOyI+CiAgICAgICAgICAgICAg5p2Q5paZ54q25oCB77yae3sKICAgICAgICAgICAgICAgIGludmVudG9yeUNoZWNrRGV0YWlsLnN0YXRlID09IDAKICAgICAgICAgICAgICAgICAgPyAi5bqT5a2Y5LitIgogICAgICAgICAgICAgICAgICA6IGludmVudG9yeUNoZWNrRGV0YWlsLnN0YXRlID09IDEKICAgICAgICAgICAgICAgICAgPyAi6L+Q6L6T5LitIgogICAgICAgICAgICAgICAgICA6IGludmVudG9yeUNoZWNrRGV0YWlsLnN0YXRlID09IDIKICAgICAgICAgICAgICAgICAgPyAi5Yqg5bel5LitIgogICAgICAgICAgICAgICAgICA6IGludmVudG9yeUNoZWNrRGV0YWlsLnN0YXRlID09IDMKICAgICAgICAgICAgICAgICAgPyAi5Yqg5bel5a6M5oiQIgogICAgICAgICAgICAgICAgICA6ICLlt7Llh7rllK4iCiAgICAgICAgICAgICAgfX0KICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8ZWwtdGltZWxpbmU+CiAgICAgICAgICAgICAgPGVsLXRpbWVsaW5lLWl0ZW0KICAgICAgICAgICAgICAgIGNvbG9yPSIjM2Q4MmZlIgogICAgICAgICAgICAgICAgc2l6ZT0ibGFyZ2UiCiAgICAgICAgICAgICAgICB2LWZvcj0iKGFjdGl2aXR5LAogICAgICAgICAgICAgICAgaW5kZXgpIGluIGludmVudG9yeUNoZWNrRGV0YWlsLnN0b2NrSW5PdXRMaXN0IgogICAgICAgICAgICAgICAgOmtleT0iaW5kZXgiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0iZGlzcGxheTogZmxleDthbGlnbi1pdGVtczogY2VudGVyOyI+CiAgICAgICAgICAgICAgICAgIDxwIHN0eWxlPSJtYXJnaW46MCAyMHB4IDE0cHggMDt3aWR0aDogNzJweDsiPgogICAgICAgICAgICAgICAgICAgIHt7IGFjdGl2aXR5LnRpbWUuc2xpY2UoMCwgMTApIH19CiAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgPHAgc3R5bGU9Im1hcmdpbi10b3A6MCIgdi1odG1sPSJhY3Rpdml0eS5kZXNjcmliZSI+PC9wPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8cAogICAgICAgICAgICAgICAgICB2LWlmPSJhY3Rpdml0eS5ub3RlICE9PSAnJyIKICAgICAgICAgICAgICAgICAgc3R5bGU9Im1hcmdpbjogMDtjb2xvcjojOTE5MDkwO21hcmdpbi1sZWZ0OjkycHg7d29yZC1icmVhazogYnJlYWstYWxsO3dvcmQtd3JhcDogYnJlYWstd29yZCIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAge3sgYWN0aXZpdHkubm90ZSB9fQogICAgICAgICAgICAgICAgICA8IS0tIDxlbC1wb3BvdmVyIHYtaWY9ImFjdGl2aXR5Lm5vdGUgIT09ICcnIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnQ9ImJvdHRvbS1zdGFydCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9IuWHuuW6k+Wkh+azqOS/oeaBryIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjIwMCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcj0iaG92ZXIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpjb250ZW50PSJhY3Rpdml0eS5ub3RlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8ZWwtYnV0dG9uIHNsb3Q9InJlZmVyZW5jZSI+5aSH5rOoPC9lbC1idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZWwtcG9wb3Zlcj4gLS0+CiAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgPC9lbC10aW1lbGluZS1pdGVtPgogICAgICAgICAgICA8L2VsLXRpbWVsaW5lPgogICAgICAgICAgPC9lbC10YWItcGFuZT4KICAgICAgICA8L2VsLXRhYnM+CiAgICAgIDwvZGl2PgogICAgICA8ZGl2IHNsb3Q9ImZvb3RlciI+CiAgICAgICAgPGVsLWJ1dHRvbiBAY2xpY2s9ImRpYWxvZ0ludmVudG9yeUNoZWNrVmlzaWJsZSA9IGZhbHNlIgogICAgICAgICAgPuWPliDmtog8L2VsLWJ1dHRvbgogICAgICAgID4KICAgICAgICA8ZWwtYnV0dG9uIHR5cGU9InByaW1hcnkiIEBjbGljaz0iaW52ZW50b3J5TG9va1N1cmUiIHYtcHJldmVudENsaWNrCiAgICAgICAgICA+56GuIOWumjwvZWwtYnV0dG9uCiAgICAgICAgPgogICAgICA8L2Rpdj4KICAgIDwvZWwtZGlhbG9nPgogICAgPGVsLWRpYWxvZwogICAgICB0aXRsZT0i5Yig6Zmk5p2Q5paZIgogICAgICA6dmlzaWJsZS5zeW5jPSJkaWFsb2dJbnZlbnRvcnlEZWxldGVWaXNpYmxlIgogICAgICA6Y2xvc2Utb24tcHJlc3MtZXNjYXBlPSJmYWxzZSIKICAgICAgOmNsb3NlLW9uLWNsaWNrLW1vZGFsPSJmYWxzZSIKICAgICAgOm1vZGFsLWFwcGVuZC10by1ib2R5PSJmYWxzZSIKICAgICAgOmFwcGVuZC10by1ib2R5PSJmYWxzZSIKICAgICAgaWQ9ImRlbEludmVuIgogICAgPgogICAgICA8ZGl2IHN0eWxlPSJ0ZXh0LWFsaWduOiBjZW50ZXI7Ij4KICAgICAgICA8cCBzdHlsZT0ibWFyZ2luOiAzMHB4IDAgMCAwO2ZvbnQtc2l6ZTogMTZweDtjb2xvcjogIzRlNGU0ZTsiPgogICAgICAgICAg56Gu5a6a5Yig6Zmk6K+l5p2Q5paZ77yf5Yig6Zmk5ZCO5LiN5Y+v5L+u5pS5CiAgICAgICAgPC9wPgogICAgICA8L2Rpdj4KICAgICAgPGRpdiBzbG90PSJmb290ZXIiPgogICAgICAgIDxlbC1idXR0b24gQGNsaWNrPSJkaWFsb2dJbnZlbnRvcnlEZWxldGVWaXNpYmxlID0gZmFsc2UiCiAgICAgICAgICA+5Y+WIOa2iDwvZWwtYnV0dG9uCiAgICAgICAgPgogICAgICAgIDxlbC1idXR0b24gdHlwZT0icHJpbWFyeSIgQGNsaWNrPSJpbnZlbnRvcnlEZWxldGVTdXJlIiB2LXByZXZlbnRDbGljawogICAgICAgICAgPuehriDlrpo8L2VsLWJ1dHRvbgogICAgICAgID4KICAgICAgPC9kaXY+CiAgICA8L2VsLWRpYWxvZz4KICA8L2Rpdj4KPC9kaXY+Cg=="},null]}