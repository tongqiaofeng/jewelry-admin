{"remainingRequest":"G:\\aa-tong\\my-project\\jewelry-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!G:\\aa-tong\\my-project\\jewelry-admin\\src\\components\\Finished-stock-inquiry.vue?vue&type=template&id=66144516&scoped=true&","dependencies":[{"path":"G:\\aa-tong\\my-project\\jewelry-admin\\src\\components\\Finished-stock-inquiry.vue","mtime":1640160266760},{"path":"G:\\aa-tong\\my-project\\jewelry-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\aa-tong\\my-project\\jewelry-admin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"G:\\aa-tong\\my-project\\jewelry-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\aa-tong\\my-project\\jewelry-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXYgY2xhc3M9InN0b2NrLWlucXVpcnktY29udGFpbmVyIiBpZD0ic3RvY2staW5xdWlyeSI+CiAgPCEtLSDlupPlrZjmn6Xor6IgLS0+CiAgPGRpdiBjbGFzcz0ic3RvY2staW5xdWlyeS1wYyI+CiAgICA8ZGl2IHYtc2hvdz0ic2l0ZVNlbCA9PSAwIj4KICAgICAgPCEtLSDlpLTpg6jmn6Xor6LmnaHku7YgLS0+CiAgICAgIDxkaXYgY2xhc3M9InN0b2NrLWlucXVpcnktdG9wIiBpZD0ic3RvY2tXYXJlaG91c2VDaGVjayI+CiAgICAgICAgPGVsLWZvcm0gOmlubGluZT0idHJ1ZSIgY2xhc3M9ImRlbW8tZm9ybS1pbmxpbmUiPgogICAgICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD0i54q25oCB77yaIj4KICAgICAgICAgICAgPGVsLXNlbGVjdAogICAgICAgICAgICAgIHYtbW9kZWw9InN0YXRlIgogICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSLor7fpgInmi6kiCiAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxNTBweDsiCiAgICAgICAgICAgICAgOnBvcHBlci1hcHBlbmQtdG8tYm9keT0iZmFsc2UiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8ZWwtb3B0aW9uCiAgICAgICAgICAgICAgICB2LWZvcj0iZmxhZyBpbiBzdGF0ZUxpc3QiCiAgICAgICAgICAgICAgICA6a2V5PSJmbGFnLmlkIgogICAgICAgICAgICAgICAgOmxhYmVsPSJmbGFnLm5hbWUiCiAgICAgICAgICAgICAgICA6dmFsdWU9ImZsYWcuaWQiCiAgICAgICAgICAgICAgPjwvZWwtb3B0aW9uPgogICAgICAgICAgICA8L2VsLXNlbGVjdD4KICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPgogICAgICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD0i5LuT5bqTL+WKoOW3peWOgu+8miI+CiAgICAgICAgICAgIDxlbC1zZWxlY3QKICAgICAgICAgICAgICB2LW1vZGVsPSJzdG9yYWdlSWRMaXN0IgogICAgICAgICAgICAgIG11bHRpcGxlCiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IuWPr+WkmumAiSIKICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDE1MHB4OyIKICAgICAgICAgICAgICBAY2hhbmdlPSJzdG9yYWdlQ2hhbmdlIgogICAgICAgICAgICAgIDpwb3BwZXItYXBwZW5kLXRvLWJvZHk9ImZhbHNlIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgPCEtLSAvL+WtmOWcqOWHuuW6k+iusOW9lSAtLT4KICAgICAgICAgICAgICA8ZWwtb3B0aW9uCiAgICAgICAgICAgICAgICB2LWZvcj0iaXRlbSBpbiBzdG9yYWdlTGlzdCIKICAgICAgICAgICAgICAgIHYtc2hvdz0iaXRlbS5pc093biAhPSAwIgogICAgICAgICAgICAgICAgOmtleT0iaXRlbS5pZCIKICAgICAgICAgICAgICAgIDpsYWJlbD0iaXRlbS5uYW1lIgogICAgICAgICAgICAgICAgOnZhbHVlPSJpdGVtLmlkIgogICAgICAgICAgICAgID48L2VsLW9wdGlvbj4KICAgICAgICAgICAgPC9lbC1zZWxlY3Q+CiAgICAgICAgICA8L2VsLWZvcm0taXRlbT4KICAgICAgICAgIDxlbC1mb3JtLWl0ZW0gbGFiZWw9IuWFpeW6k+aXtumXtO+8miI+CiAgICAgICAgICAgIDxlbC1kYXRlLXBpY2tlcgogICAgICAgICAgICAgIHYtbW9kZWw9InRpbWUiCiAgICAgICAgICAgICAgdHlwZT0iZGF0ZXJhbmdlIgogICAgICAgICAgICAgIEBjaGFuZ2U9InRpbWVjaGFuZ2UiCiAgICAgICAgICAgICAgcmFuZ2Utc2VwYXJhdG9yPSLoh7MiCiAgICAgICAgICAgICAgc3RhcnQtcGxhY2Vob2xkZXI9IuW8gOWni+aXpeacnyIKICAgICAgICAgICAgICBlbmQtcGxhY2Vob2xkZXI9Iue7k+adn+aXpeacnyIKICAgICAgICAgICAgICBmb3JtYXQ9Inl5eXktTU0tZGQiCiAgICAgICAgICAgICAgdmFsdWUtZm9ybWF0PSJ5eXl5LU1NLWRkIgogICAgICAgICAgICA+CiAgICAgICAgICAgIDwvZWwtZGF0ZS1waWNrZXI+CiAgICAgICAgICA8L2VsLWZvcm0taXRlbT4KICAgICAgICAgIDxlbC1mb3JtLWl0ZW0+CiAgICAgICAgICAgIDxkaXYgc3R5bGU9ImRpc3BsYXk6IGZsZXg7Ij4KICAgICAgICAgICAgICA8ZWwtaW5wdXQKICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMzUwcHg7IgogICAgICAgICAgICAgICAgdi1tb2RlbD0ia2V5d29yZCIKICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSLlj6/ovpPlhaXkuqflk4HlkI3np7DjgIHorr7orqHlkI3np7DjgIHnu5/kuIDnvJblj7fjgIHlpIfms6jov5vooYzmkJzntKIiCiAgICAgICAgICAgICAgICBjbGVhcmFibGUKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgPC9lbC1pbnB1dD4KICAgICAgICAgICAgICA8ZWwtYnV0dG9uCiAgICAgICAgICAgICAgICBzdHlsZT0ibWFyZ2luLWxlZnQ6IDEwcHg7IgogICAgICAgICAgICAgICAgdHlwZT0icHJpbWFyeSIKICAgICAgICAgICAgICAgIEBjbGljaz0id2FyZWhvdXNlS2V5d29yZENoZWNrIgogICAgICAgICAgICAgICAgPuafpSDor6I8L2VsLWJ1dHRvbgogICAgICAgICAgICAgID4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2VsLWZvcm0taXRlbT4KICAgICAgICA8L2VsLWZvcm0+CiAgICAgICAgPGRpdiBjbGFzcz0idG9wLXJpZ2h0Ij4KICAgICAgICAgIDxlbC10b29sdGlwCiAgICAgICAgICAgIGNsYXNzPSJpdGVtIgogICAgICAgICAgICBzdHlsZT0ibWFyZ2luLWxlZnQ6IDIwcHg7aGVpZ2h0OiA0MHB4OyIKICAgICAgICAgICAgZWZmZWN0PSJkYXJrIgogICAgICAgICAgICBjb250ZW50PSLlm77ooajliIfmjaIiCiAgICAgICAgICAgIHBsYWNlbWVudD0iYm90dG9tLWVuZCIKICAgICAgICAgID4KICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgIDpzcmM9InN0b2NrSW5xdWlyeVBhcmFtLnNlbCA9PSAxID8gaW1nMSA6IGltZzIiCiAgICAgICAgICAgICAgQGNsaWNrPSJsaXN0T3JDaGFydCIKICAgICAgICAgICAgICBzdHlsZT0iY3Vyc29yOnBvaW50ZXI7IgogICAgICAgICAgICAvPgogICAgICAgICAgPC9lbC10b29sdGlwPgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0ic3RvY2staW5xdWlyeS1tYWluIj4KICAgICAgICA8IS0tIOWbvuW9oiAtLT4KICAgICAgICA8ZGl2IHYtaWY9InN0b2NrSW5xdWlyeVBhcmFtLnNlbCA9PSAxIiBjbGFzcz0ic3ZnLXN0eWxlIj4KICAgICAgICAgIDxkaXYgc3R5bGU9InRleHQtYWxpZ246IGNlbnRlcjsiIHYtaWY9InN0b2NrSW5MaXN0Lmxlbmd0aCA9PSAwIj4KICAgICAgICAgICAgPHA+e3sgc3RvY2tJbk1zZyB9fTwvcD4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPGRpdiB2LWVsc2UgY2xhc3M9ImJvcmRlci1ldmVyeS1zdHlsZSI+CiAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICB2LWZvcj0iKHdhcmVob3VzZSwgaW5kZXgpIGluIHN0b2NrSW5MaXN0IgogICAgICAgICAgICAgIDprZXk9ImluZGV4IgogICAgICAgICAgICAgIHN0eWxlPSJkaXNwbGF5OiBmbGV4O21hcmdpbi10b3A6IDIwcHg7IgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgY2xhc3M9ImJvcmRlci1zdHlsZSIKICAgICAgICAgICAgICAgIEBjbGljaz0iaW1nSW5xdWlyeURldGFpbHMod2FyZWhvdXNlLnByb2R1Y3RMaXN0LCBpbmRleCkiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAge3sgd2FyZWhvdXNlLnN0b3JhZ2VOYW1lIH19CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgY2xhc3M9ImV2ZXJ5LXN0eWxlIgogICAgICAgICAgICAgICAgdi1pZj0iaW5kZXggPCBzdG9ja0luTGlzdC5sZW5ndGggLSAxIgogICAgICAgICAgICAgID48L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8IS0tIOihqOagvCAtLT4KICAgICAgICA8ZGl2IHYtaWY9InN0b2NrSW5xdWlyeVBhcmFtLnNlbCA9PSAwIiBzdHlsZT0icGFkZGluZzogMjBweDsiPgogICAgICAgICAgPGRpdiBzdHlsZT0idGV4dC1hbGlnbjogY2VudGVyOyIgdi1pZj0ic3RvY2tJbkxpc3QubGVuZ3RoID09IDAiPgogICAgICAgICAgICA8cD57eyBzdG9ja0luTXNnIH19PC9wPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8ZGl2IHYtZWxzZT4KICAgICAgICAgICAgPGRpdiB2LWZvcj0iKGV2ZXJ5LCBpbmRleCkgaW4gc3RvY2tMaXN0UGFnZSIgOmtleT0iaW5kZXgiPgogICAgICAgICAgICAgIDxkaXYgc3R5bGU9ImRpc3BsYXk6IGZsZXg7dGV4dC1hbGlnbjogbGVmdDsiPgogICAgICAgICAgICAgICAgPHAgc3R5bGU9ImZvbnQtc2l6ZTogMThweDtmb250LXdlaWdodDogYm9sZDsiPgogICAgICAgICAgICAgICAgICDku5PlupMv5Yqg5bel5Y6C77yaIHt7IGV2ZXJ5LnN0b3JhZ2VOYW1lIH19CiAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICA8cCBzdHlsZT0ibWFyZ2luOiAyNHB4IDAgMCAyMHB4O2ZvbnQtc2l6ZTogMTNweDtjb2xvcjogI2JiYjsiPgogICAgICAgICAgICAgICAgICDmlbDph4/vvJoKICAgICAgICAgICAgICAgICAge3sgZXZlcnkucHJvZHVjdExpc3QubGVuZ3RoIH19CiAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGVsLXRhYmxlCiAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMCU7IgogICAgICAgICAgICAgICAgcmVmPSJtdWx0aXBsZVRhYmxlIgogICAgICAgICAgICAgICAgOmRhdGE9ImV2ZXJ5LnByb2R1Y3RMaXN0IgogICAgICAgICAgICAgICAgOnJvdy1rZXk9ImdldFJvd0tleXMiCiAgICAgICAgICAgICAgICB0b29sdGlwLWVmZmVjdD0iZGFyayIKICAgICAgICAgICAgICAgIGJvcmRlcgogICAgICAgICAgICAgICAgaGlnaGxpZ2h0LWN1cnJlbnQtcm93CiAgICAgICAgICAgICAgICBAcm93LWNsaWNrPSJjaGVja3Byb2R1Y3REZXRhaWxzIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxlbC10YWJsZS1jb2x1bW4gbGFiZWw9IuWHuuW6kyI+CiAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSBzbG90LXNjb3BlPSJzY29wZSI+CiAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJjdXJzb3I6IHBvaW50ZXI7Y29sb3I6ICMzZDgxZmQ7IgogICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9ImhhbmRsZUltZ1NlbGVjdGlvbkNoYW5nZShzY29wZS5yb3cpIgogICAgICAgICAgICAgICAgICAgICAgICA+5Ye65bqTPC9zcGFuCiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgICA8L2VsLXRhYmxlLWNvbHVtbj4KICAgICAgICAgICAgICAgIDxlbC10YWJsZS1jb2x1bW4gcHJvcD0ibWF0ZXJpYWxOYW1lIiBsYWJlbD0i5oiQ5ZOB5Zu+Ij4KICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHNsb3Qtc2NvcGU9InNjb3BlIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICA6c3JjPSJpbWcgKyAnL2ZpbGUvJyArIGZpcnN0aW1nKHNjb3BlLnJvdy5pbWcpIgogICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IiIKICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAlOyIKICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgICA8L2VsLXRhYmxlLWNvbHVtbj4KICAgICAgICAgICAgICAgIDxlbC10YWJsZS1jb2x1bW4gcHJvcD0icHJvZHVjdE51bWJlciIgbGFiZWw9Iue7n+S4gOe8luWPtyI+CiAgICAgICAgICAgICAgICA8L2VsLXRhYmxlLWNvbHVtbj4KICAgICAgICAgICAgICAgIDxlbC10YWJsZS1jb2x1bW4gbGFiZWw9IuijuOefs+aIkOacrCIgcHJvcD0iY29zdFByaWNlIj4KICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHNsb3Qtc2NvcGU9InNjb3BlIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4+e3sKICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUucm93LmNvc3RQcmljZSArICIgIiArIHNjb3BlLnJvdy5jdXJyZW5jeQogICAgICAgICAgICAgICAgICAgICAgfX08L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgICA8L2VsLXRhYmxlLWNvbHVtbj4KICAgICAgICAgICAgICAgIDxlbC10YWJsZS1jb2x1bW4gcHJvcD0icHJvY2Vzc0Nvc3QiIGxhYmVsPSLliqDlt6XotLkiPgogICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgc2xvdC1zY29wZT0ic2NvcGUiPgogICAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj57eyBzY29wZS5yb3cucHJvY2Vzc0Nvc3QgKyAiIENOWSIgfX08L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgICA8L2VsLXRhYmxlLWNvbHVtbj4KICAgICAgICAgICAgICAgIDxlbC10YWJsZS1jb2x1bW4gbGFiZWw9IuacgOS9jumUgOWUruS7tyIgcHJvcD0ibG93ZXN0U2VsbFByaWNlIj4KICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHNsb3Qtc2NvcGU9InNjb3BlIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4+e3sgc2NvcGUucm93Lmxvd2VzdFNlbGxQcmljZSArICIgQ05ZIiB9fTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICAgIDwvZWwtdGFibGUtY29sdW1uPgogICAgICAgICAgICAgICAgPGVsLXRhYmxlLWNvbHVtbiBsYWJlbD0i5bu66K6u6ZSA5ZSu5Lu3IiBwcm9wPSJhZHZpc2VTZWxsUHJpY2UiPgogICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgc2xvdC1zY29wZT0ic2NvcGUiPgogICAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj57eyBzY29wZS5yb3cuYWR2aXNlU2VsbFByaWNlICsgIiBDTlkiIH19PC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICAgICAgPC9lbC10YWJsZS1jb2x1bW4+CiAgICAgICAgICAgICAgICA8ZWwtdGFibGUtY29sdW1uCiAgICAgICAgICAgICAgICAgIGxhYmVsPSLlu7rorq7mibnlj5Hku7ciCiAgICAgICAgICAgICAgICAgIHByb3A9ImFkdmljZVdob2xlc2FsZVByaWNlIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgc2xvdC1zY29wZT0ic2NvcGUiPgogICAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj57ewogICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5yb3cuYWR2aWNlV2hvbGVzYWxlUHJpY2UgKyAiIENOWSIKICAgICAgICAgICAgICAgICAgICAgIH19PC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICAgICAgPC9lbC10YWJsZS1jb2x1bW4+CiAgICAgICAgICAgICAgICA8ZWwtdGFibGUtY29sdW1uIGxhYmVsPSLmoIfnrb7ku7ciIHByb3A9InRhZ1ByaWNlIj4KICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHNsb3Qtc2NvcGU9InNjb3BlIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4+e3sgc2NvcGUucm93LnRhZ1ByaWNlICsgIiBDTlkiIH19PC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICAgICAgPC9lbC10YWJsZS1jb2x1bW4+CiAgICAgICAgICAgICAgICA8ZWwtdGFibGUtY29sdW1uIHByb3A9InNhbGVDb21taXNzaW9uIiBsYWJlbD0i6ZSA5ZSu5o+Q5oiQIj4KICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHNsb3Qtc2NvcGU9InNjb3BlIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4+e3sgc2NvcGUucm93LnNhbGVDb21taXNzaW9uICsgIiBDTlkiIH19PC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICAgICAgPC9lbC10YWJsZS1jb2x1bW4+CiAgICAgICAgICAgICAgICA8ZWwtdGFibGUtY29sdW1uIGxhYmVsPSLlh7rlupPorrDlvZUiIHByb3A9ImlzT3V0Ij4KICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHNsb3Qtc2NvcGU9InNjb3BlIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdi1pZj0ic2NvcGUucm93LmlzT3V0ID09IDAiPuaXoOWHuuW6k+iusOW9lTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHYtZWxzZT7lrZjlnKjlh7rlupPorrDlvZU8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgICA8L2VsLXRhYmxlLWNvbHVtbj4KICAgICAgICAgICAgICAgIDxlbC10YWJsZS1jb2x1bW4gbGFiZWw9IueKtuaAgSI+CiAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSBzbG90LXNjb3BlPSJzY29wZSI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWZvcj0iKGUsIGluZGV4KSBpbiBzdGF0ZUxpc3QiIDprZXk9ImluZGV4Ij4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgIHYtc2hvdz0ic2NvcGUucm93LnN0YXRlID09IGUuaWQgJiYgZS5uYW1lICE9ICflhajpg6gnIgogICAgICAgICAgICAgICAgICAgICAgICA+e3sgZS5uYW1lIH19PC9zcGFuCiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgICA8L2VsLXRhYmxlLWNvbHVtbj4KICAgICAgICAgICAgICAgIDxlbC10YWJsZS1jb2x1bW4gcHJvcD0ibm90ZSIgbGFiZWw9IuWkh+azqCI+IDwvZWwtdGFibGUtY29sdW1uPgogICAgICAgICAgICAgIDwvZWwtdGFibGU+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IHN0eWxlPSJ3aWR0aDogMTAwJTtoZWlnaHQ6IDUwcHg7Ij4KICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJtYXJnaW46MTVweCAwO3Bvc2l0aW9uOmFic29sdXRlO3JpZ2h0OjYlOyI+CiAgICAgICAgICAgICAgICA8ZWwtcGFnaW5hdGlvbgogICAgICAgICAgICAgICAgICBAY3VycmVudC1jaGFuZ2U9ImhhbmRsZUN1cnJlbnRDaGFuZ2UiCiAgICAgICAgICAgICAgICAgIDpjdXJyZW50LXBhZ2U9InBhZ2UiCiAgICAgICAgICAgICAgICAgIDpwYWdlLXNpemU9IjEiCiAgICAgICAgICAgICAgICAgIGxheW91dD0idG90YWwsIHByZXYsIHBhZ2VyLCBuZXh0LCBqdW1wZXIiCiAgICAgICAgICAgICAgICAgIDp0b3RhbD0idG90YWwiCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8L2VsLXBhZ2luYXRpb24+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8IS0tIOWbvuW9oi0t44CL6KGo5qC8IC0tPgogICAgPGRpdiB2LXNob3c9InNpdGVTZWwgPT0gMSI+CiAgICAgIDxkaXYKICAgICAgICBzdHlsZT0id2lkdGg6IDYwcHg7bWFyZ2luLWJvdHRvbTogMjBweDtkaXNwbGF5OiBmbGV4O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO2N1cnNvcjogcG9pbnRlcjsiCiAgICAgICAgQGNsaWNrPSJiYWNrVG9JbWciCiAgICAgID4KICAgICAgICA8aW1nIHNyYz0iLi4vYXNzZXRzL2ltZ3MvaG9tZS9nb2JhY2sucG5nIiBzdHlsZT0iaGVpZ2h0OiAyMXB4OyIgLz4KICAgICAgICA8cCBzdHlsZT0ibWFyZ2luOiAwOyI+6L+U5ZuePC9wPgogICAgICA8L2Rpdj4KICAgICAgPGVsLXRhYmxlCiAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAlOyIKICAgICAgICByZWY9Im11bHRpcGxlVGFibGVTZWwiCiAgICAgICAgOmRhdGE9ImltZ01hdGVyaWFsTGlzdCIKICAgICAgICA6cm93LWtleT0iZ2V0Um93S2V5cyIKICAgICAgICB0b29sdGlwLWVmZmVjdD0iZGFyayIKICAgICAgICBib3JkZXIKICAgICAgICBoaWdobGlnaHQtY3VycmVudC1yb3cKICAgICAgICBAcm93LWNsaWNrPSJjaGVja3Byb2R1Y3REZXRhaWxzIgogICAgICA+CiAgICAgICAgPGVsLXRhYmxlLWNvbHVtbiBsYWJlbD0i5Ye65bqTIj4KICAgICAgICAgIDx0ZW1wbGF0ZSBzbG90LXNjb3BlPSJzY29wZSI+CiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgIHN0eWxlPSJjdXJzb3I6IHBvaW50ZXI7Y29sb3I6ICMzZDgxZmQ7IgogICAgICAgICAgICAgICAgQGNsaWNrPSJoYW5kbGVJbWdTZWxlY3Rpb25DaGFuZ2Uoc2NvcGUucm93KSIKICAgICAgICAgICAgICAgID7lh7rlupM8L3NwYW4KICAgICAgICAgICAgICA+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICA8L2VsLXRhYmxlLWNvbHVtbj4KICAgICAgICA8ZWwtdGFibGUtY29sdW1uIHByb3A9Im1hdGVyaWFsTmFtZSIgbGFiZWw9IuaIkOWTgeWbviI+CiAgICAgICAgICA8dGVtcGxhdGUgc2xvdC1zY29wZT0ic2NvcGUiPgogICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgIDpzcmM9ImltZyArICcvZmlsZS8nICsgZmlyc3RpbWcoc2NvcGUucm93LmltZykiCiAgICAgICAgICAgICAgICBhbHQ9IiIKICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwJTsiCiAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgIDwvZWwtdGFibGUtY29sdW1uPgogICAgICAgIDxlbC10YWJsZS1jb2x1bW4gcHJvcD0icHJvZHVjdE51bWJlciIgbGFiZWw9Iue7n+S4gOe8luWPtyI+CiAgICAgICAgPC9lbC10YWJsZS1jb2x1bW4+CiAgICAgICAgPGVsLXRhYmxlLWNvbHVtbiBsYWJlbD0i6KO455+z5oiQ5pysIiBwcm9wPSJjb3N0UHJpY2UiPgogICAgICAgICAgPHRlbXBsYXRlIHNsb3Qtc2NvcGU9InNjb3BlIj4KICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICA8c3Bhbj57ewogICAgICAgICAgICAgICAgc2NvcGUucm93LmNvc3RQcmljZSArICIgIiArIHNjb3BlLnJvdy5jdXJyZW5jeQogICAgICAgICAgICAgIH19PC9zcGFuPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgPC9lbC10YWJsZS1jb2x1bW4+CiAgICAgICAgPGVsLXRhYmxlLWNvbHVtbiBwcm9wPSJwcm9jZXNzQ29zdCIgbGFiZWw9IuWKoOW3pei0uSI+CiAgICAgICAgICA8dGVtcGxhdGUgc2xvdC1zY29wZT0ic2NvcGUiPgogICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgIDxzcGFuPnt7IHNjb3BlLnJvdy5wcm9jZXNzQ29zdCArICIgQ05ZIiB9fTwvc3Bhbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgIDwvZWwtdGFibGUtY29sdW1uPgogICAgICAgIDxlbC10YWJsZS1jb2x1bW4gbGFiZWw9IuacgOS9jumUgOWUruS7tyIgcHJvcD0ibG93ZXN0U2VsbFByaWNlIj4KICAgICAgICAgIDx0ZW1wbGF0ZSBzbG90LXNjb3BlPSJzY29wZSI+CiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgPHNwYW4+e3sgc2NvcGUucm93Lmxvd2VzdFNlbGxQcmljZSArICIgQ05ZIiB9fTwvc3Bhbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgIDwvZWwtdGFibGUtY29sdW1uPgogICAgICAgIDxlbC10YWJsZS1jb2x1bW4gbGFiZWw9IuW7uuiurumUgOWUruS7tyIgcHJvcD0iYWR2aXNlU2VsbFByaWNlIj4KICAgICAgICAgIDx0ZW1wbGF0ZSBzbG90LXNjb3BlPSJzY29wZSI+CiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgPHNwYW4+e3sgc2NvcGUucm93LmFkdmlzZVNlbGxQcmljZSArICIgQ05ZIiB9fTwvc3Bhbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgIDwvZWwtdGFibGUtY29sdW1uPgogICAgICAgIDxlbC10YWJsZS1jb2x1bW4gbGFiZWw9IuW7uuiuruaJueWPkeS7tyIgcHJvcD0iYWR2aWNlV2hvbGVzYWxlUHJpY2UiPgogICAgICAgICAgPHRlbXBsYXRlIHNsb3Qtc2NvcGU9InNjb3BlIj4KICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICA8c3Bhbj57eyBzY29wZS5yb3cuYWR2aWNlV2hvbGVzYWxlUHJpY2UgKyAiIENOWSIgfX08L3NwYW4+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICA8L2VsLXRhYmxlLWNvbHVtbj4KICAgICAgICA8ZWwtdGFibGUtY29sdW1uIGxhYmVsPSLmoIfnrb7ku7ciIHByb3A9InRhZ1ByaWNlIj4KICAgICAgICAgIDx0ZW1wbGF0ZSBzbG90LXNjb3BlPSJzY29wZSI+CiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgPHNwYW4+e3sgc2NvcGUucm93LnRhZ1ByaWNlICsgIiBDTlkiIH19PC9zcGFuPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgPC9lbC10YWJsZS1jb2x1bW4+CgogICAgICAgIDxlbC10YWJsZS1jb2x1bW4gcHJvcD0ic2FsZUNvbW1pc3Npb24iIGxhYmVsPSLplIDllK7mj5DmiJAiPgogICAgICAgICAgPHRlbXBsYXRlIHNsb3Qtc2NvcGU9InNjb3BlIj4KICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICA8c3Bhbj57eyBzY29wZS5yb3cuc2FsZUNvbW1pc3Npb24gKyAiIENOWSIgfX08L3NwYW4+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICA8L2VsLXRhYmxlLWNvbHVtbj4KICAgICAgICA8ZWwtdGFibGUtY29sdW1uIGxhYmVsPSLlh7rlupPorrDlvZUiIHByb3A9ImlzT3V0Ij4KICAgICAgICAgIDx0ZW1wbGF0ZSBzbG90LXNjb3BlPSJzY29wZSI+CiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgPHNwYW4gdi1pZj0ic2NvcGUucm93LmlzT3V0ID09IDAiPuaXoOWHuuW6k+iusOW9lTwvc3Bhbj4KICAgICAgICAgICAgICA8c3BhbiB2LWVsc2U+5a2Y5Zyo5Ye65bqT6K6w5b2VPC9zcGFuPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgPC9lbC10YWJsZS1jb2x1bW4+CiAgICAgICAgPGVsLXRhYmxlLWNvbHVtbiBsYWJlbD0i54q25oCBIj4KICAgICAgICAgIDx0ZW1wbGF0ZSBzbG90LXNjb3BlPSJzY29wZSI+CiAgICAgICAgICAgIDxkaXYgdi1mb3I9IihlLCBpbmRleCkgaW4gc3RhdGVMaXN0IiA6a2V5PSJpbmRleCI+CiAgICAgICAgICAgICAgPHNwYW4gdi1zaG93PSJzY29wZS5yb3cuc3RhdGUgPT0gZS5pZCAmJiBlLm5hbWUgIT0gJ+WFqOmDqCciPnt7CiAgICAgICAgICAgICAgICBlLm5hbWUKICAgICAgICAgICAgICB9fTwvc3Bhbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgIDwvZWwtdGFibGUtY29sdW1uPgogICAgICAgIDxlbC10YWJsZS1jb2x1bW4gcHJvcD0ibm90ZSIgbGFiZWw9IuWkh+azqCI+IDwvZWwtdGFibGUtY29sdW1uPgogICAgICA8L2VsLXRhYmxlPgogICAgPC9kaXY+CiAgICA8ZGl2IHYtc2hvdz0ic2l0ZVNlbCA9PSAyIiBzdHlsZT0icGFkZGluZzogMjBweDtiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmOyI+CiAgICAgIDxkaXYKICAgICAgICBzdHlsZT0id2lkdGg6IDYwcHg7bWFyZ2luLWJvdHRvbTogMjBweDtkaXNwbGF5OiBmbGV4O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO2N1cnNvcjogcG9pbnRlcjsiCiAgICAgICAgQGNsaWNrPSJiYWNrVG9MaXN0IgogICAgICA+CiAgICAgICAgPGltZyBzcmM9Ii4uL2Fzc2V0cy9pbWdzL2hvbWUvZ29iYWNrLnBuZyIgc3R5bGU9ImhlaWdodDogMjFweDsiIC8+CiAgICAgICAgPHAgc3R5bGU9Im1hcmdpbjogMDsiPui/lOWbnjwvcD4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9ImFkZC1sZWZ0Ij4KICAgICAgICA8cCBjbGFzcz0idGl0bGUtZm9udCI+5b6F5Ye65bqT5riF5Y2VPC9wPgogICAgICAgIDxlbC10YWJsZQogICAgICAgICAgOmRhdGE9ImRlbGl2ZXJ5RGF0YS5zdG9ja0luSWRMaXN0IgogICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAlIgogICAgICAgICAgYm9yZGVyCiAgICAgICAgICBpZD0ibGVmdCIKICAgICAgICA+CiAgICAgICAgICA8ZWwtdGFibGUtY29sdW1uIHByb3A9ImRlc2lnbk5hbWUiIGxhYmVsPSLmiJDlk4Hlm77niYciPgogICAgICAgICAgICA8dGVtcGxhdGUgc2xvdC1zY29wZT0ic2NvcGUiPgogICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8c3BhbiB2LWlmPSJzY29wZS5yb3cuaW1nID09ICcnIHx8IHNjb3BlLnJvdy5pbWcgPT0gbnVsbCIKICAgICAgICAgICAgICAgICAgPi0tLTwvc3BhbgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICB2LWVsc2UKICAgICAgICAgICAgICAgICAgOnNyYz0iaW1nICsgJy9maWxlLycgKyBzY29wZS5yb3cuaW1nIgogICAgICAgICAgICAgICAgICB3aWR0aD0iNTBweCIKICAgICAgICAgICAgICAgICAgaGVpZ2h0PSI1MHB4IgogICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgIDwvZWwtdGFibGUtY29sdW1uPgogICAgICAgICAgPGVsLXRhYmxlLWNvbHVtbiBwcm9wPSJwcm9kdWN0TnVtYmVyIiBsYWJlbD0i57uf5LiA57yW5Y+3Ij4KICAgICAgICAgIDwvZWwtdGFibGUtY29sdW1uPgogICAgICAgIDwvZWwtdGFibGU+CgogICAgICAgIDxlbC1mb3JtCiAgICAgICAgICBzdHlsZT0ibWFyZ2luLXRvcDogMjBweDsiCiAgICAgICAgICA6bW9kZWw9ImRlbGl2ZXJ5RGF0YSIKICAgICAgICAgIDpydWxlcz0iZGVsaXZlcnlSdWxlcyIKICAgICAgICAgIHJlZj0iZGVsaXZlcnlGb3JtIgogICAgICAgICAgbGFiZWwtd2lkdGg9IjE2MHB4IgogICAgICAgID4KICAgICAgICAgIDxlbC1mb3JtLWl0ZW0gbGFiZWw9IuWHuuW6k+exu+Wei++8miIgcHJvcD0idHlwZSI+CiAgICAgICAgICAgIDxlbC1zZWxlY3QKICAgICAgICAgICAgICB2LW1vZGVsPSJkZWxpdmVyeURhdGEudHlwZSIKICAgICAgICAgICAgICBjbGFzcz0iaW5wdXQtc3R5bGUiCiAgICAgICAgICAgICAgQGNoYW5nZT0idHlwZUNoYW5nZSIKICAgICAgICAgICAgICA6cG9wcGVyLWFwcGVuZC10by1ib2R5PSJmYWxzZSIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDxlbC1vcHRpb24KICAgICAgICAgICAgICAgIHYtZm9yPSJpdGVtIGluIGRlbGl2ZXJ5VHlwZSIKICAgICAgICAgICAgICAgIDprZXk9Iml0ZW0uaWQiCiAgICAgICAgICAgICAgICA6bGFiZWw9Iml0ZW0ubmFtZSIKICAgICAgICAgICAgICAgIDp2YWx1ZT0iaXRlbS5pZCIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgPC9lbC1vcHRpb24+CiAgICAgICAgICAgIDwvZWwtc2VsZWN0PgogICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+CiAgICAgICAgICA8ZWwtZm9ybS1pdGVtCiAgICAgICAgICAgIGxhYmVsPSLnm67nmoTlnLDvvJoiCiAgICAgICAgICAgIHByb3A9ImVuZFN0b3JhZ2VJZCIKICAgICAgICAgICAgdi1pZj0iZGVsaXZlcnlEYXRhLnR5cGUgPT0gMCIKICAgICAgICAgID4KICAgICAgICAgICAgPGVsLXNlbGVjdAogICAgICAgICAgICAgIHYtbW9kZWw9ImRlbGl2ZXJ5RGF0YS5lbmRTdG9yYWdlSWQiCiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9Iuivt+mAieaLqeebrueahOWcsCIKICAgICAgICAgICAgICBjbGFzcz0iaW5wdXQtc3R5bGUiCiAgICAgICAgICAgICAgOnBvcHBlci1hcHBlbmQtdG8tYm9keT0iZmFsc2UiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8ZWwtb3B0aW9uCiAgICAgICAgICAgICAgICB2LWZvcj0iaXRlbSBpbiB3YXJlaG91c2VGaWx0ZXJMaXN0IgogICAgICAgICAgICAgICAgOmtleT0iaXRlbS5pZCIKICAgICAgICAgICAgICAgIDpsYWJlbD0iaXRlbS5uYW1lIgogICAgICAgICAgICAgICAgOnZhbHVlPSJpdGVtLmlkIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICA8L2VsLW9wdGlvbj4KICAgICAgICAgICAgPC9lbC1zZWxlY3Q+CiAgICAgICAgICA8L2VsLWZvcm0taXRlbT4KICAgICAgICAgIDxlbC1mb3JtLWl0ZW0KICAgICAgICAgICAgbGFiZWw9IumUgOWUruWRmO+8miIKICAgICAgICAgICAgcHJvcD0ic29sZGVyIgogICAgICAgICAgICB2LWlmPSJkZWxpdmVyeURhdGEudHlwZSA9PSAxIgogICAgICAgICAgPgogICAgICAgICAgICA8ZWwtaW5wdXQKICAgICAgICAgICAgICB2LW1vZGVsPSJkZWxpdmVyeURhdGEuc29sZGVyIgogICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSLor7fovpPlhaXplIDllK7lkZgiCiAgICAgICAgICAgICAgY2xlYXJhYmxlCiAgICAgICAgICAgICAgY2xhc3M9ImlucHV0LXN0eWxlIgogICAgICAgICAgICA+PC9lbC1pbnB1dD4KICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPgogICAgICAgICAgPGVsLWZvcm0taXRlbQogICAgICAgICAgICBsYWJlbD0i57uE77yaIgogICAgICAgICAgICBwcm9wPSJncm91cCIKICAgICAgICAgICAgdi1pZj0iZGVsaXZlcnlEYXRhLnR5cGUgPT0gMSIKICAgICAgICAgID4KICAgICAgICAgICAgPGVsLWlucHV0CiAgICAgICAgICAgICAgdi1tb2RlbD0iZGVsaXZlcnlEYXRhLmdyb3VwIgogICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSLor7fovpPlhaUiCiAgICAgICAgICAgICAgY2xlYXJhYmxlCiAgICAgICAgICAgICAgY2xhc3M9ImlucHV0LXN0eWxlIgogICAgICAgICAgICA+PC9lbC1pbnB1dD4KICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPgogICAgICAgICAgPGVsLWZvcm0taXRlbQogICAgICAgICAgICBsYWJlbD0i6aG+5a6i5aeT5ZCN77yaIgogICAgICAgICAgICBwcm9wPSJjdXN0b21lciIKICAgICAgICAgICAgdi1pZj0iZGVsaXZlcnlEYXRhLnR5cGUgPT0gMSIKICAgICAgICAgID4KICAgICAgICAgICAgPGVsLWlucHV0CiAgICAgICAgICAgICAgdi1tb2RlbD0iZGVsaXZlcnlEYXRhLmN1c3RvbWVyIgogICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSLor7fovpPlhaXpob7lrqLlp5PlkI0iCiAgICAgICAgICAgICAgY2xlYXJhYmxlCiAgICAgICAgICAgICAgY2xhc3M9ImlucHV0LXN0eWxlIgogICAgICAgICAgICA+PC9lbC1pbnB1dD4KICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPgogICAgICAgICAgPGVsLWZvcm0taXRlbQogICAgICAgICAgICBsYWJlbD0i5Ye65ZSu5biB56eN77yaIgogICAgICAgICAgICB2LWlmPSJkZWxpdmVyeURhdGEudHlwZSA9PSAxIgogICAgICAgICAgICBwcm9wPSJzYWxlQ3VycmVuY3kiCiAgICAgICAgICA+CiAgICAgICAgICAgIDxlbC1yYWRpby1ncm91cAogICAgICAgICAgICAgIHYtbW9kZWw9ImRlbGl2ZXJ5RGF0YS5zYWxlQ3VycmVuY3kiCiAgICAgICAgICAgICAgQGNoYW5nZT0iY3VycmVuY3lDaGFuZ2UiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8ZWwtcmFkaW8gbGFiZWw9IkNOWSI+Q05ZPC9lbC1yYWRpbz4KICAgICAgICAgICAgICA8ZWwtcmFkaW8gbGFiZWw9IkVVUiI+RVVSPC9lbC1yYWRpbz4KICAgICAgICAgICAgICA8ZWwtcmFkaW8gbGFiZWw9IlVTRCI+VVNEPC9lbC1yYWRpbz4KICAgICAgICAgICAgICA8ZWwtcmFkaW8gbGFiZWw9IkhLRCI+SEtEPC9lbC1yYWRpbz4KICAgICAgICAgICAgPC9lbC1yYWRpby1ncm91cD4KICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPgogICAgICAgICAgPGVsLWZvcm0taXRlbQogICAgICAgICAgICBsYWJlbD0i5p+l5om+55So5oi377yaIgogICAgICAgICAgICBwcm9wPSJ1c2VyIgogICAgICAgICAgICB2LWlmPSIKICAgICAgICAgICAgICBkZWxpdmVyeURhdGEudHlwZSA9PSAxICYmIGRlbGl2ZXJ5RGF0YS5zYWxlQ3VycmVuY3kgPT0gJ0NOWScKICAgICAgICAgICAgIgogICAgICAgICAgPgogICAgICAgICAgICA8ZWwtc2VsZWN0CiAgICAgICAgICAgICAgdi1tb2RlbD0iZGVsaXZlcnlEYXRhLnVzZXIiCiAgICAgICAgICAgICAgZmlsdGVyYWJsZQogICAgICAgICAgICAgIHJlbW90ZQogICAgICAgICAgICAgIHJlc2VydmUta2V5d29yZAogICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSLlj6/ovpPlhaXpgq7nrrEv5omL5py65Y+35p+l5om+5a6i5oi3IgogICAgICAgICAgICAgIDpyZW1vdGUtbWV0aG9kPSJyZW1vdGVNZXRob2QiCiAgICAgICAgICAgICAgOmxvYWRpbmc9ImxvYWRpbmciCiAgICAgICAgICAgICAgY2xhc3M9ImlucHV0LXN0eWxlIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgPGVsLW9wdGlvbgogICAgICAgICAgICAgICAgdi1mb3I9Iml0ZW0gaW4gdXNlckxpc3QiCiAgICAgICAgICAgICAgICA6a2V5PSJpdGVtLnVzZXJJZCIKICAgICAgICAgICAgICAgIDpsYWJlbD0iaXRlbS51c2VybmFtZSIKICAgICAgICAgICAgICAgIDp2YWx1ZT0iaXRlbS51c2VySWQiCiAgICAgICAgICAgICAgICBAY2xpY2submF0aXZlPSJ1c2VyQ2hhbmdlKGl0ZW0pIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICA8L2VsLW9wdGlvbj4KICAgICAgICAgICAgPC9lbC1zZWxlY3Q+CiAgICAgICAgICA8L2VsLWZvcm0taXRlbT4KICAgICAgICAgIDxlbC1mb3JtLWl0ZW0KICAgICAgICAgICAgbGFiZWw9IuaAu+enr+WIhu+8miIKICAgICAgICAgICAgdi1pZj0iCiAgICAgICAgICAgICAgZGVsaXZlcnlEYXRhLnR5cGUgPT0gMSAmJiBkZWxpdmVyeURhdGEuc2FsZUN1cnJlbmN5ID09ICdDTlknCiAgICAgICAgICAgICIKICAgICAgICAgID4KICAgICAgICAgICAgPGVsLWlucHV0CiAgICAgICAgICAgICAgdi1tb2RlbD0iaW50ZWdyYWxUb3RhbCIKICAgICAgICAgICAgICByZWFkb25seQogICAgICAgICAgICAgIGNsYXNzPSJpbnB1dC1zdHlsZSIKICAgICAgICAgICAgPjwvZWwtaW5wdXQ+CiAgICAgICAgICA8L2VsLWZvcm0taXRlbT4KICAgICAgICAgIDxlbC1mb3JtLWl0ZW0KICAgICAgICAgICAgbGFiZWw9IuaKteaJo+enr+WIhu+8miIKICAgICAgICAgICAgcHJvcD0iaW50ZWdyYWwiCiAgICAgICAgICAgIHYtaWY9IgogICAgICAgICAgICAgIGRlbGl2ZXJ5RGF0YS50eXBlID09IDEgJiYgZGVsaXZlcnlEYXRhLnNhbGVDdXJyZW5jeSA9PSAnQ05ZJwogICAgICAgICAgICAiCiAgICAgICAgICA+CiAgICAgICAgICAgIDxlbC1pbnB1dAogICAgICAgICAgICAgIEBpbnB1dD0iaW50ZWdyYWxJbnB1dCIKICAgICAgICAgICAgICB2LW1vZGVsPSJkZWxpdmVyeURhdGEuaW50ZWdyYWwiCiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9Iuivt+i+k+WFpSIKICAgICAgICAgICAgICBjbGVhcmFibGUKICAgICAgICAgICAgICBjbGFzcz0iaW5wdXQtc3R5bGUiCiAgICAgICAgICAgID48L2VsLWlucHV0PgogICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+CiAgICAgICAgICA8ZWwtZm9ybS1pdGVtCiAgICAgICAgICAgIGxhYmVsPSLlh7rllK7ph5Hpop3vvJoiCiAgICAgICAgICAgIHByb3A9InNhbGVNb25leSIKICAgICAgICAgICAgdi1pZj0iZGVsaXZlcnlEYXRhLnR5cGUgPT0gMSIKICAgICAgICAgID4KICAgICAgICAgICAgPGVsLWlucHV0CiAgICAgICAgICAgICAgQGlucHV0PSJjdXJyZW5jeUNoYW5nZSIKICAgICAgICAgICAgICBAY2hhbmdlPSJ0b3RhbENoYW5nZSIKICAgICAgICAgICAgICB2LW1vZGVsPSJkZWxpdmVyeURhdGEuc2FsZU1vbmV5IgogICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSLor7fovpPlhaXlh7rllK7ph5Hpop0iCiAgICAgICAgICAgICAgY2xlYXJhYmxlCiAgICAgICAgICAgICAgY2xhc3M9ImlucHV0LXN0eWxlIgogICAgICAgICAgICA+PC9lbC1pbnB1dD4KICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPgogICAgICAgICAgPGVsLWZvcm0taXRlbQogICAgICAgICAgICBsYWJlbD0i5aSW5biB5YWR5o2i5Lq65rCR5biB5rGH546H77yaIgogICAgICAgICAgICBwcm9wPSJ0b3RhbCIKICAgICAgICAgICAgdi1pZj0iZGVsaXZlcnlEYXRhLnR5cGUgPT0gMSIKICAgICAgICAgID4KICAgICAgICAgICAgPGVsLWlucHV0CiAgICAgICAgICAgICAgQGlucHV0PSJ0b3RhbENuUmF0ZUNoYW5nZSIKICAgICAgICAgICAgICB2LW1vZGVsPSJkZWxpdmVyeURhdGEudG90YWxUb0NuUmF0ZSIKICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0i6K+36L6T5YWlIgogICAgICAgICAgICAgIGNsZWFyYWJsZQogICAgICAgICAgICAgIGNsYXNzPSJpbnB1dC1zdHlsZSIKICAgICAgICAgICAgPjwvZWwtaW5wdXQ+CiAgICAgICAgICA8L2VsLWZvcm0taXRlbT4KICAgICAgICAgIDxlbC1mb3JtLWl0ZW0KICAgICAgICAgICAgbGFiZWw9IuWHuuWUruS6uuawkeW4gemHkemine+8miIKICAgICAgICAgICAgcHJvcD0idG90YWwiCiAgICAgICAgICAgIHYtaWY9ImRlbGl2ZXJ5RGF0YS50eXBlID09IDEiCiAgICAgICAgICA+CiAgICAgICAgICAgIDxlbC1pbnB1dAogICAgICAgICAgICAgIHYtbW9kZWw9ImRlbGl2ZXJ5RGF0YS5zZWxsVG90YWxDblByaWNlIgogICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSLor7fovpPlhaUiCiAgICAgICAgICAgICAgY2xlYXJhYmxlCiAgICAgICAgICAgICAgY2xhc3M9ImlucHV0LXN0eWxlIgogICAgICAgICAgICAgIEBjaGFuZ2U9InRvdGFsQ2hhbmdlIgogICAgICAgICAgICA+PC9lbC1pbnB1dD4KICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPgogICAgICAgICAgPGVsLWZvcm0taXRlbQogICAgICAgICAgICBsYWJlbD0i5riv5biB5YWR5o2i5Lq65rCR5biB5rGH546H77yaIgogICAgICAgICAgICBwcm9wPSJ0b3RhbCIKICAgICAgICAgICAgdi1pZj0iZGVsaXZlcnlEYXRhLnR5cGUgPT0gMSIKICAgICAgICAgID4KICAgICAgICAgICAgPGVsLWlucHV0CiAgICAgICAgICAgICAgQGlucHV0PSJ0b3RhbEhrUmF0ZUNoYW5nZSIKICAgICAgICAgICAgICB2LW1vZGVsPSJkZWxpdmVyeURhdGEudG90YWxUb0hrUmF0ZSIKICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0i6K+36L6T5YWlIgogICAgICAgICAgICAgIGNsZWFyYWJsZQogICAgICAgICAgICAgIGNsYXNzPSJpbnB1dC1zdHlsZSIKICAgICAgICAgICAgPjwvZWwtaW5wdXQ+CiAgICAgICAgICA8L2VsLWZvcm0taXRlbT4KICAgICAgICAgIDxlbC1mb3JtLWl0ZW0KICAgICAgICAgICAgbGFiZWw9IuWHuuWUrua4r+W4gemHkemine+8miIKICAgICAgICAgICAgcHJvcD0idG90YWwiCiAgICAgICAgICAgIHYtaWY9ImRlbGl2ZXJ5RGF0YS50eXBlID09IDEiCiAgICAgICAgICA+CiAgICAgICAgICAgIDxlbC1pbnB1dAogICAgICAgICAgICAgIHYtbW9kZWw9ImRlbGl2ZXJ5RGF0YS5zZWxsVG90YWxIa1ByaWNlIgogICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSLor7fovpPlhaUiCiAgICAgICAgICAgICAgY2xlYXJhYmxlCiAgICAgICAgICAgICAgY2xhc3M9ImlucHV0LXN0eWxlIgogICAgICAgICAgICAgIEBjaGFuZ2U9InRvdGFsQ2hhbmdlIgogICAgICAgICAgICA+PC9lbC1pbnB1dD4KICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPgogICAgICAgICAgPGVsLWZvcm0taXRlbQogICAgICAgICAgICBsYWJlbD0i6ZSA5ZSu5Y+R56Wo5Y+377yaIgogICAgICAgICAgICBwcm9wPSJ0b3RhbCIKICAgICAgICAgICAgdi1pZj0iZGVsaXZlcnlEYXRhLnR5cGUgPT0gMSIKICAgICAgICAgID4KICAgICAgICAgICAgPGVsLWlucHV0CiAgICAgICAgICAgICAgdi1tb2RlbD0iZGVsaXZlcnlEYXRhLnNlbGxCaWxsTnVtYmVyIgogICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSLor7fovpPlhaUiCiAgICAgICAgICAgICAgY2xlYXJhYmxlCiAgICAgICAgICAgICAgY2xhc3M9ImlucHV0LXN0eWxlIgogICAgICAgICAgICA+PC9lbC1pbnB1dD4KICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPgogICAgICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD0i5Ye65bqT5pe26Ze077yaIiBwcm9wPSJzdG9ja091dFRpbWUiPgogICAgICAgICAgICA8ZWwtZGF0ZS1waWNrZXIKICAgICAgICAgICAgICBjbGFzcz0iaW5wdXQtc3R5bGUiCiAgICAgICAgICAgICAgdi1tb2RlbD0iZGVsaXZlcnlEYXRhLnN0b2NrT3V0VGltZSIKICAgICAgICAgICAgICB0eXBlPSJkYXRlIgogICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSLor7fpgInmi6nlh7rlupPml7bpl7QiCiAgICAgICAgICAgICAgdmFsdWUtZm9ybWF0PSJ5eXl5LU1NLWRkIgogICAgICAgICAgICAgIGZvcm1hdD0ieXl5eS1NTS1kZCIKICAgICAgICAgICAgPgogICAgICAgICAgICA8L2VsLWRhdGUtcGlja2VyPgogICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+CiAgICAgICAgICA8ZWwtZm9ybS1pdGVtIGxhYmVsPSLpoobotKfkurrvvJoiIHByb3A9InJlY2VpdmVyIj4KICAgICAgICAgICAgPGVsLWlucHV0CiAgICAgICAgICAgICAgY2xhc3M9ImlucHV0LXN0eWxlIgogICAgICAgICAgICAgIHYtbW9kZWw9ImRlbGl2ZXJ5RGF0YS5yZWNlaXZlciIKICAgICAgICAgICAgPjwvZWwtaW5wdXQ+CiAgICAgICAgICA8L2VsLWZvcm0taXRlbT4KICAgICAgICAgIDxlbC1mb3JtLWl0ZW0gbGFiZWw9IuWkh+azqO+8miIgcHJvcD0ibm90ZSIgaWQ9Im5vdGVTdHlsZSI+CiAgICAgICAgICAgIDxlbC1pbnB1dAogICAgICAgICAgICAgIHR5cGU9InRleHRhcmVhIgogICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSLor7fovpPlhaXlpIfms6jkv6Hmga8iCiAgICAgICAgICAgICAgdi1tb2RlbD0iZGVsaXZlcnlEYXRhLm5vdGUiCiAgICAgICAgICAgID48L2VsLWlucHV0PgogICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+CiAgICAgICAgPC9lbC1mb3JtPgogICAgICAgIDxkaXYgc3R5bGU9Im1hcmdpbi10b3A6IDgwcHg7dGV4dC1hbGlnbjogcmlnaHQ7Ij4KICAgICAgICAgIDxlbC1idXR0b24KICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMjBweDsiCiAgICAgICAgICAgIHR5cGU9InByaW1hcnkiCiAgICAgICAgICAgIEBjbGljaz0ic3RvY2tJblN1Ym1pdCgnZGVsaXZlcnlGb3JtJykiCiAgICAgICAgICAgIHYtcHJldmVudENsaWNrCiAgICAgICAgICAgID7mj5Ag5LqkPC9lbC1idXR0b24KICAgICAgICAgID4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDxlbC1kaWFsb2cKICAgICAgdGl0bGU9IuaIkOWTgeS/oeaBryIKICAgICAgdi1pZj0iZGlhbG9nRGV2aWNlRGV0YWlsVmlzaWJsZSIKICAgICAgOnZpc2libGUuc3luYz0iZGlhbG9nRGV2aWNlRGV0YWlsVmlzaWJsZSIKICAgICAgOmNsb3NlLW9uLXByZXNzLWVzY2FwZT0iZmFsc2UiCiAgICAgIDpjbG9zZS1vbi1jbGljay1tb2RhbD0iZmFsc2UiCiAgICAgIDptb2RhbC1hcHBlbmQtdG8tYm9keT0iZmFsc2UiCiAgICAgIDphcHBlbmQtdG8tYm9keT0iZmFsc2UiCiAgICA+CiAgICAgIDxkaXYgaWQ9ImludmVuU29tZSI+CiAgICAgICAgPGVsLXRhYnMgc3R5bGU9Im1hcmdpbi10b3A6IDIwcHg7IiB2LW1vZGVsPSJhY3RpdmVTdG9ja05hbWUiPgogICAgICAgICAgPGVsLXRhYi1wYW5lIGxhYmVsPSLmiJDlk4Hkv6Hmga8iIG5hbWU9ImZpcnN0Ij4KICAgICAgICAgICAgPGRpdiBzdHlsZT0iZGlzcGxheTogZmxleDtqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47Ij4KICAgICAgICAgICAgICA8cCBjbGFzcz0iZm9udC10aXRsZS1zdHlsZSIgc3R5bGU9Im1hcmdpbi10b3A6IDA7Ij4KICAgICAgICAgICAgICAgIOaIkOWTgeS/oeaBrwogICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJwYWRkaW5nLXRvcDogNnB4OyI+CiAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgIHN0eWxlPSJjdXJzb3I6IHBvaW50ZXI7IgogICAgICAgICAgICAgICAgICB0aXRsZT0i5L+u5pS55oiQ5ZOB5L+h5oGvIgogICAgICAgICAgICAgICAgICBzcmM9Ii4uL2Fzc2V0cy9pbWdzL2hvbWUvdXBkYXRlLnBuZyIKICAgICAgICAgICAgICAgICAgQGNsaWNrPSJ1cGRhdGVEZXZpY2UiCiAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9udC1kaXYiPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdi1vbmUiPgogICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICBjbGFzcz0ib25lLWxlZnQiCiAgICAgICAgICAgICAgICAgIDpzdHlsZT0iewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiBpc1VwZGF0ZSA9PSAwID8gJyM2MDYyNjYnIDogJyMzZDgyZmUnLAogICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IGlzVXBkYXRlID09IDAgPyAnbm9ybWFsJyA6ICdib2xkJywKICAgICAgICAgICAgICAgICAgfSIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAg5oiQ5ZOB5ZCN56ewCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9uZS1yaWdodCI+CiAgICAgICAgICAgICAgICAgIDxlbC1pbnB1dAogICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImRldmljZURldGFpbC5wcm9kdWN0TmFtZSIKICAgICAgICAgICAgICAgICAgICA6cmVhZG9ubHk9ImlzVXBkYXRlID09IDAgPyB0cnVlIDogZmFsc2UiCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPC9lbC1pbnB1dD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdi1vbmUiPgogICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICBjbGFzcz0ib25lLWxlZnQiCiAgICAgICAgICAgICAgICAgIDpzdHlsZT0iewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiBpc1VwZGF0ZSA9PSAwID8gJyM2MDYyNjYnIDogJyMzZDgyZmUnLAogICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IGlzVXBkYXRlID09IDAgPyAnbm9ybWFsJyA6ICdib2xkJywKICAgICAgICAgICAgICAgICAgfSIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAg5qCH562+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9uZS1yaWdodCI+CiAgICAgICAgICAgICAgICAgIDxlbC1zZWxlY3QKICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMCU7IgogICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImxhYmVsU2VsTGlzdCIKICAgICAgICAgICAgICAgICAgICA6ZGlzYWJsZWQ9ImlzVXBkYXRlID09IDAgPyB0cnVlIDogZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IuWPr+WkmumAiSIKICAgICAgICAgICAgICAgICAgICBtdWx0aXBsZQogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgPGVsLW9wdGlvbgogICAgICAgICAgICAgICAgICAgICAgdi1mb3I9Iml0ZW0gaW4gcHJvZHVjdExhYmVsTGlzdCIKICAgICAgICAgICAgICAgICAgICAgIDprZXk9Iml0ZW0iCiAgICAgICAgICAgICAgICAgICAgICA6bGFiZWw9Iml0ZW0iCiAgICAgICAgICAgICAgICAgICAgICA6dmFsdWU9Iml0ZW0iCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDwvZWwtb3B0aW9uPgogICAgICAgICAgICAgICAgICA8L2VsLXNlbGVjdD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdi1vbmUiPgogICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICBjbGFzcz0ib25lLWxlZnQiCiAgICAgICAgICAgICAgICAgIDpzdHlsZT0iewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiBpc1VwZGF0ZSA9PSAwID8gJyM2MDYyNjYnIDogJyMzZDgyZmUnLAogICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IGlzVXBkYXRlID09IDAgPyAnbm9ybWFsJyA6ICdib2xkJywKICAgICAgICAgICAgICAgICAgfSIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAg6K6+6K6h5ZCN56ew77yaCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9uZS1yaWdodCI+CiAgICAgICAgICAgICAgICAgIDxlbC1pbnB1dAogICAgICAgICAgICAgICAgICAgIEBmb2N1cz0iY2hvb3NlaW1nc2hvdyA9IHRydWUiCiAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iZGV2aWNlRGV0YWlsLmRlc2lnbk5hbWUiCiAgICAgICAgICAgICAgICAgICAgOnJlYWRvbmx5PSJpc1VwZGF0ZSA9PSAwID8gdHJ1ZSA6IGZhbHNlIgogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDwvZWwtaW5wdXQ+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGl2LW9uZSI+CiAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgIGNsYXNzPSJvbmUtbGVmdCIKICAgICAgICAgICAgICAgICAgOnN0eWxlPSJ7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjNjA2MjY2JywKICAgICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiAnbm9ybWFsJywKICAgICAgICAgICAgICAgICAgfSIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAg6K6+6K6h5biI77yaCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9uZS1yaWdodCI+CiAgICAgICAgICAgICAgICAgIDxlbC1pbnB1dCB2LW1vZGVsPSJkZXZpY2VEZXRhaWwuZGVzaWduZXJOYW1lIiByZWFkb25seT4KICAgICAgICAgICAgICAgICAgPC9lbC1pbnB1dD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdi1vbmUiPgogICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICBjbGFzcz0ib25lLWxlZnQiCiAgICAgICAgICAgICAgICAgIDpzdHlsZT0iewogICAgICAgICAgICAgICAgICAgIGNvbG9yOgogICAgICAgICAgICAgICAgICAgICAgaXNVcGRhdGUgPT0gMAogICAgICAgICAgICAgICAgICAgICAgICA/ICcjNjA2MjY2JwogICAgICAgICAgICAgICAgICAgICAgICA6IGRldmljZURldGFpbC5pc1VwZGF0ZSA9PSAwCiAgICAgICAgICAgICAgICAgICAgICAgID8gJyMzZDgyZmUnCiAgICAgICAgICAgICAgICAgICAgICAgIDogJyM2MDYyNjYnLAogICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6CiAgICAgICAgICAgICAgICAgICAgICBpc1VwZGF0ZSA9PSAwCiAgICAgICAgICAgICAgICAgICAgICAgID8gJ25vcm1hbCcKICAgICAgICAgICAgICAgICAgICAgICAgOiBkZXZpY2VEZXRhaWwuaXNVcGRhdGUgPT0gMAogICAgICAgICAgICAgICAgICAgICAgICA/ICdib2xkJwogICAgICAgICAgICAgICAgICAgICAgICA6ICdub3JtYWwnLAogICAgICAgICAgICAgICAgICB9IgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICDllK/kuIDnvJblj7cKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib25lLXJpZ2h0Ij4KICAgICAgICAgICAgICAgICAgPGVsLWlucHV0CiAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iZGV2aWNlRGV0YWlsLnByb2R1Y3ROdW1iZXIiCiAgICAgICAgICAgICAgICAgICAgOnJlYWRvbmx5PSIKICAgICAgICAgICAgICAgICAgICAgIGlzVXBkYXRlID09IDAKICAgICAgICAgICAgICAgICAgICAgICAgPyB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgIDogZGV2aWNlRGV0YWlsLmlzVXBkYXRlID09IDAKICAgICAgICAgICAgICAgICAgICAgICAgPyBmYWxzZQogICAgICAgICAgICAgICAgICAgICAgICA6IHRydWUKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPC9lbC1pbnB1dD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdi1vbmUiPgogICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICBjbGFzcz0ib25lLWxlZnQiCiAgICAgICAgICAgICAgICAgIDpzdHlsZT0iewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiBpc1VwZGF0ZSA9PSAwID8gJyM2MDYyNjYnIDogJyMzZDgyZmUnLAogICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IGlzVXBkYXRlID09IDAgPyAnbm9ybWFsJyA6ICdib2xkJywKICAgICAgICAgICAgICAgICAgfSIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAg5Y+C5pWwCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9uZS1yaWdodCI+CiAgICAgICAgICAgICAgICAgIDxlbC1pbnB1dAogICAgICAgICAgICAgICAgICAgIHR5cGU9InRleHRhcmVhIgogICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImRldmljZURldGFpbC5wYXJhbXMiCiAgICAgICAgICAgICAgICAgICAgOnJlYWRvbmx5PSJpc1VwZGF0ZSA9PSAwID8gdHJ1ZSA6IGZhbHNlIgogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDwvZWwtaW5wdXQ+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkaXYtb25lIj4KICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgY2xhc3M9Im9uZS1sZWZ0IgogICAgICAgICAgICAgICAgICA6c3R5bGU9InsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogaXNVcGRhdGUgPT0gMCA/ICcjNjA2MjY2JyA6ICcjM2Q4MmZlJywKICAgICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiBpc1VwZGF0ZSA9PSAwID8gJ25vcm1hbCcgOiAnYm9sZCcsCiAgICAgICAgICAgICAgICAgIH0iCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIOivgeS5pue8luWPtwogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvbmUtcmlnaHQiPgogICAgICAgICAgICAgICAgICA8ZWwtaW5wdXQKICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJkZXZpY2VEZXRhaWwuY2VydGlmaWNhdGVOdW1iZXIiCiAgICAgICAgICAgICAgICAgICAgOnJlYWRvbmx5PSJpc1VwZGF0ZSA9PSAwID8gdHJ1ZSA6IGZhbHNlIgogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDwvZWwtaW5wdXQ+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxwIGNsYXNzPSJmb250LXRpdGxlLXN0eWxlIj7lm77niYfkv6Hmga88L3A+CiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgPHAKICAgICAgICAgICAgICAgIDpzdHlsZT0iewogICAgICAgICAgICAgICAgICBjb2xvcjogaXNVcGRhdGUgPT0gMCA/ICcjNjA2MjY2JyA6ICcjM2Q4MmZlJywKICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogaXNVcGRhdGUgPT0gMCA/ICdub3JtYWwnIDogJ2JvbGQnLAogICAgICAgICAgICAgICAgICBtYXJnaW46IDAsCiAgICAgICAgICAgICAgICAgIHdpZHRoOiAnOTBweCcsCiAgICAgICAgICAgICAgICB9IgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIOaIkOWTgeWbvueJh++8mgogICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICBjbGFzcz0idXBsb2FkLWltZ3MiCiAgICAgICAgICAgICAgICB2LWlmPSJkZXZpY2VEZXRhaWwuaW1nICE9ICcnIHx8IGlzVXBkYXRlID09IDEiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWRkIiB2LWlmPSJpc1VwZGF0ZSA9PSAxIj4KICAgICAgICAgICAgICAgICAgPGZvcm0gZW5jdHlwZT0ibXVsdGlwYXJ0L2Zvcm0tZGF0YSIgc3R5bGU9IndpZHRoOiAxMDBweDsiPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICAgICAgQGNoYW5nZT0iaW5wdXRDaGFuZ2UoJGV2ZW50KSIKICAgICAgICAgICAgICAgICAgICAgIG11bHRpcGxlCiAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJmaWxlIgogICAgICAgICAgICAgICAgICAgICAgbmFtZT0iaW1nIgogICAgICAgICAgICAgICAgICAgICAgYWNjZXB0PSJpbWFnZS8qIgogICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImlucHV0VXBsb2FkIgogICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImVsLWljb24tcGx1cyBhZGRJY29uIj48L2k+CiAgICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICBzdHlsZT0iZGlzcGxheTpmbGV4O3Bvc2l0aW9uOnJlbGF0aXZlO2ZsZXgtd3JhcDogd3JhcDsiCiAgICAgICAgICAgICAgICAgIGlkPSJkZWxJbWciCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJkZWxJbWciCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICB2LWZvcj0iKGltZ3VybCwgaW5kZXgpIG9mIHByb2R1Y3RpbWdMaXN0IgogICAgICAgICAgICAgICAgICAgIDprZXk9ImluZGV4IgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJtYXJnaW4tbGVmdDoxMHB4O3Bvc2l0aW9uOnJlbGF0aXZlOyIKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgICAgICB2LWlmPSJpbWd1cmwgIT09ICcnICYmIGltZ3VybCAhPT0gbnVsbCAmJiBpc1VwZGF0ZSA9PSAxIgogICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InNwYW5TdHlsZSIKICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iZGVsSW1hZ2UoaW5kZXgpIgogICAgICAgICAgICAgICAgICAgICAgPng8L3NwYW4KICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgdi1pZj0iaW1ndXJsICE9PSAnJyAmJiBpbWd1cmwgIT09IG51bGwiCiAgICAgICAgICAgICAgICAgICAgICA6c3JjPSJpbWcgKyAnL2ZpbGUvJyArIGltZ3VybCIKICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPSIxMDBweCIKICAgICAgICAgICAgICAgICAgICAgIGhlaWdodD0iMTAwcHgiCiAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iYm9yZGVyLXJhZGl1czo1cHg7b2JqZWN0LWZpdDpjb3ZlcjsiCiAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8cAogICAgICAgICAgICAgICAgdi1pZj0iZGV2aWNlRGV0YWlsLmltZyA9PSAnJyAmJiBpc1VwZGF0ZSA9PSAwIgogICAgICAgICAgICAgICAgc3R5bGU9Im1hcmdpbi1sZWZ0OiAxMHB4O2ZvbnQtc2l6ZTogMTNweDsiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAg5peg5oiQ5ZOB5Zu+54mHCiAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICA8cAogICAgICAgICAgICAgICAgOnN0eWxlPSJ7CiAgICAgICAgICAgICAgICAgIGNvbG9yOiBpc1VwZGF0ZSA9PSAwID8gJyM2MDYyNjYnIDogJyMzZDgyZmUnLAogICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiBpc1VwZGF0ZSA9PSAwID8gJ25vcm1hbCcgOiAnYm9sZCcsCiAgICAgICAgICAgICAgICAgIG1hcmdpbjogMCwKICAgICAgICAgICAgICAgICAgd2lkdGg6ICc5MHB4JywKICAgICAgICAgICAgICAgIH0iCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAg6K+m5oOF5Zu+54mH77yaCiAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgIGNsYXNzPSJ1cGxvYWQtaW1ncyIKICAgICAgICAgICAgICAgIHYtaWY9ImRldmljZURldGFpbC5kZXRhaWxJbWcgIT0gJycgfHwgaXNVcGRhdGUgPT0gMSIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhZGQiIHYtaWY9ImlzVXBkYXRlID09IDEiPgogICAgICAgICAgICAgICAgICA8Zm9ybSBlbmN0eXBlPSJtdWx0aXBhcnQvZm9ybS1kYXRhIiBzdHlsZT0id2lkdGg6IDEwMHB4OyI+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICAgICAgICBAY2hhbmdlPSJpbnB1dENoYW5nZTIoJGV2ZW50KSIKICAgICAgICAgICAgICAgICAgICAgIG11bHRpcGxlCiAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJmaWxlIgogICAgICAgICAgICAgICAgICAgICAgbmFtZT0iaW1nIgogICAgICAgICAgICAgICAgICAgICAgYWNjZXB0PSJpbWFnZS8qIgogICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImlucHV0VXBsb2FkIgogICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImVsLWljb24tcGx1cyBhZGRJY29uIj48L2k+CiAgICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICBzdHlsZT0iZGlzcGxheTpmbGV4O3Bvc2l0aW9uOnJlbGF0aXZlO2ZsZXgtd3JhcDogd3JhcDsiCiAgICAgICAgICAgICAgICAgIGlkPSJkZWxJbWciCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJkZWxJbWciCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICB2LWZvcj0iKGltZ3VybCwgaW5kZXgpIG9mIGRldGFpbEltZ0xpc3QiCiAgICAgICAgICAgICAgICAgICAgOmtleT0iaW5kZXgiCiAgICAgICAgICAgICAgICAgICAgc3R5bGU9Im1hcmdpbi1sZWZ0OjEwcHg7cG9zaXRpb246cmVsYXRpdmU7IgogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgICAgICAgIHYtaWY9ImltZ3VybCAhPT0gJycgJiYgaW1ndXJsICE9PSBudWxsICYmIGlzVXBkYXRlID09IDEiCiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ic3BhblN0eWxlIgogICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSJkZWxJbWFnZTIoaW5kZXgpIgogICAgICAgICAgICAgICAgICAgICAgPng8L3NwYW4KICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgdi1pZj0iaW1ndXJsICE9PSAnJyAmJiBpbWd1cmwgIT09IG51bGwiCiAgICAgICAgICAgICAgICAgICAgICA6c3JjPSJpbWcgKyAnL2ZpbGUvJyArIGltZ3VybCIKICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPSIxMDBweCIKICAgICAgICAgICAgICAgICAgICAgIGhlaWdodD0iMTAwcHgiCiAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iYm9yZGVyLXJhZGl1czo1cHg7b2JqZWN0LWZpdDpjb3ZlcjsiCiAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8cAogICAgICAgICAgICAgICAgdi1pZj0iZGV2aWNlRGV0YWlsLmRldGFpbEltZyA9PSAnJyAmJiBpc1VwZGF0ZSA9PSAwIgogICAgICAgICAgICAgICAgc3R5bGU9Im1hcmdpbi1sZWZ0OiAxMHB4O2ZvbnQtc2l6ZTogMTNweDsiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAg5peg6K+m5oOF5Zu+54mHCiAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICA8cAogICAgICAgICAgICAgICAgOnN0eWxlPSJ7CiAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzYwNjI2NicsCiAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6ICdub3JtYWwnLAogICAgICAgICAgICAgICAgICBtYXJnaW46IDAsCiAgICAgICAgICAgICAgICAgIHdpZHRoOiAnOTBweCcsCiAgICAgICAgICAgICAgICB9IgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIOiuvuiuoeWbvueJh++8mgogICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1cGxvYWQtaW1ncyIgdi1pZj0iZGV2aWNlRGV0YWlsLmRlc2lnbkltZyAhPSAnJyI+CiAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgIHN0eWxlPSJkaXNwbGF5OmZsZXg7cG9zaXRpb246cmVsYXRpdmU7ZmxleC13cmFwOiB3cmFwOyIKICAgICAgICAgICAgICAgICAgaWQ9ImRlbEltZyIKICAgICAgICAgICAgICAgICAgY2xhc3M9ImRlbEltZyIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgIHYtZm9yPSIoaW1ndXJsLCBpbmRleCkgb2YgaW1nRmlsbHRlcigKICAgICAgICAgICAgICAgICAgICAgIGRldmljZURldGFpbC5kZXNpZ25JbWcKICAgICAgICAgICAgICAgICAgICApIgogICAgICAgICAgICAgICAgICAgIDprZXk9ImluZGV4IgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJtYXJnaW4tbGVmdDoxMHB4O3Bvc2l0aW9uOnJlbGF0aXZlOyIKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgIHYtaWY9ImltZ3VybCAhPT0gJycgJiYgaW1ndXJsICE9PSBudWxsIgogICAgICAgICAgICAgICAgICAgICAgOnNyYz0iaW1ndXJsIgogICAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjEwMHB4IgogICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PSIxMDBweCIKICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJib3JkZXItcmFkaXVzOjVweDtvYmplY3QtZml0OmNvdmVyOyIKICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxwIHYtZWxzZSBzdHlsZT0ibWFyZ2luLWxlZnQ6IDEwcHg7Zm9udC1zaXplOiAxM3B4OyI+CiAgICAgICAgICAgICAgICDml6Dorr7orqHlm77niYcKICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8cCBjbGFzcz0iZm9udC10aXRsZS1zdHlsZSI+5Y6f5p2Q5paZ5L+h5oGvPC9wPgogICAgICAgICAgICA8ZWwtdGFibGUKICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMCU7IgogICAgICAgICAgICAgIDpkYXRhPSJkZXZpY2VEZXRhaWwubWF0ZXJpYWxMaXN0IgogICAgICAgICAgICAgIHRvb2x0aXAtZWZmZWN0PSJkYXJrIgogICAgICAgICAgICAgIGJvcmRlcgogICAgICAgICAgICAgIGhpZ2hsaWdodC1jdXJyZW50LXJvdwogICAgICAgICAgICAgIEByb3ctY2xpY2s9ImNoZWNrRGV2aWNlRGV0YWlscyIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDxlbC10YWJsZS1jb2x1bW4gcHJvcD0ibmFtZSIgbGFiZWw9IuWQjeensCI+IDwvZWwtdGFibGUtY29sdW1uPgogICAgICAgICAgICAgIDxlbC10YWJsZS1jb2x1bW4gcHJvcD0ibnVtYmVyIiBsYWJlbD0i5pWw6YePIj4gPC9lbC10YWJsZS1jb2x1bW4+CiAgICAgICAgICAgICAgPGVsLXRhYmxlLWNvbHVtbiBsYWJlbD0i5p+l55yL6K+m5oOFIj4KICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZT4KICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiB0aXRsZT0i5p+l55yL5p2Q5paZ5L+h5oGvIiBjbGFzcz0ibG9vayI+5p+l55yLPC9zcGFuPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgPC9lbC10YWJsZS1jb2x1bW4+CiAgICAgICAgICAgIDwvZWwtdGFibGU+CiAgICAgICAgICAgIDxwIGNsYXNzPSJmb250LXRpdGxlLXN0eWxlIj7lpIfms6jkv6Hmga88L3A+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvbnQtZGl2Ij4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkaXYtb25lLW5vdGUiPgogICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICBjbGFzcz0ib25lLWxlZnQiCiAgICAgICAgICAgICAgICAgIDpzdHlsZT0iewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiBpc1VwZGF0ZSA9PSAwID8gJyM2MDYyNjYnIDogJyMzZDgyZmUnLAogICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IGlzVXBkYXRlID09IDAgPyAnbm9ybWFsJyA6ICdib2xkJywKICAgICAgICAgICAgICAgICAgfSIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAg5Lqn5ZOB5aSH5rOoCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9uZS1yaWdodCI+CiAgICAgICAgICAgICAgICAgIDxlbC1pbnB1dAogICAgICAgICAgICAgICAgICAgIHR5cGU9InRleHRhcmVhIgogICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImRldmljZURldGFpbC5ub3RlIgogICAgICAgICAgICAgICAgICAgIDpyZWFkb25seT0iaXNVcGRhdGUgPT0gMCA/IHRydWUgOiBmYWxzZSIKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8L2VsLWlucHV0PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9lbC10YWItcGFuZT4KICAgICAgICAgIDxlbC10YWItcGFuZSBsYWJlbD0i5Lu35qC85L+h5oGvIiBuYW1lPSJmb3VydGgiPgogICAgICAgICAgICA8ZGl2IHN0eWxlPSJkaXNwbGF5OiBmbGV4O2p1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjsiPgogICAgICAgICAgICAgIDxwIGNsYXNzPSJmb250LXRpdGxlLXN0eWxlIiBzdHlsZT0ibWFyZ2luLXRvcDogMDsiPgogICAgICAgICAgICAgICAg5Lu35qC85L+h5oGvCiAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgIDxkaXYgc3R5bGU9InBhZGRpbmctdG9wOiA2cHg7Ij4KICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgc3R5bGU9ImN1cnNvcjogcG9pbnRlcjsiCiAgICAgICAgICAgICAgICAgIHRpdGxlPSLkv67mlLnku7fmoLzkv6Hmga8iCiAgICAgICAgICAgICAgICAgIHNyYz0iLi4vYXNzZXRzL2ltZ3MvaG9tZS91cGRhdGUucG5nIgogICAgICAgICAgICAgICAgICBAY2xpY2s9InVwZGF0ZURldmljZSIKICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb250LWRpdiI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGl2LW9uZSI+CiAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgIGNsYXNzPSJvbmUtbGVmdCIKICAgICAgICAgICAgICAgICAgOnN0eWxlPSJ7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6IGlzVXBkYXRlID09IDAgPyAnIzYwNjI2NicgOiAnIzNkODJmZScsCiAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogaXNVcGRhdGUgPT0gMCA/ICdub3JtYWwnIDogJ2JvbGQnLAogICAgICAgICAgICAgICAgICB9IgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICDoo7jnn7PmiJDmnKzluIHnp40KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib25lLXJpZ2h0Ij4KICAgICAgICAgICAgICAgICAgPGVsLXJhZGlvLWdyb3VwCiAgICAgICAgICAgICAgICAgICAgQGNoYW5nZT0iY3VycmVuY3lDb3N0Q2hhbmdlIgogICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImRldmljZURldGFpbC5jdXJyZW5jeSIKICAgICAgICAgICAgICAgICAgICA6ZGlzYWJsZWQ9ImlzVXBkYXRlID09IDAgPyB0cnVlIDogZmFsc2UiCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8ZWwtcmFkaW8gbGFiZWw9IkNOWSI+Q05ZPC9lbC1yYWRpbz4KICAgICAgICAgICAgICAgICAgICA8ZWwtcmFkaW8gbGFiZWw9IkVVUiI+RVVSPC9lbC1yYWRpbz4KICAgICAgICAgICAgICAgICAgICA8ZWwtcmFkaW8gbGFiZWw9IlVTRCI+VVNEPC9lbC1yYWRpbz4KICAgICAgICAgICAgICAgICAgICA8ZWwtcmFkaW8gbGFiZWw9IkhLRCI+SEtEPC9lbC1yYWRpbz4KICAgICAgICAgICAgICAgICAgPC9lbC1yYWRpby1ncm91cD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdi1vbmUiPgogICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICBjbGFzcz0ib25lLWxlZnQiCiAgICAgICAgICAgICAgICAgIDpzdHlsZT0iewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiBpc1VwZGF0ZSA9PSAwID8gJyM2MDYyNjYnIDogJyMzZDgyZmUnLAogICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IGlzVXBkYXRlID09IDAgPyAnbm9ybWFsJyA6ICdib2xkJywKICAgICAgICAgICAgICAgICAgfSIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAg6KO455+z5oiQ5pysCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9uZS1yaWdodCI+CiAgICAgICAgICAgICAgICAgIDxlbC1pbnB1dAogICAgICAgICAgICAgICAgICAgIEBpbnB1dD0iY3VycmVuY3lDb3N0Q2hhbmdlIgogICAgICAgICAgICAgICAgICAgIDpyZWFkb25seT0iaXNVcGRhdGUgPT0gMCA/IHRydWUgOiBmYWxzZSIKICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJkZXZpY2VEZXRhaWwuY29zdFByaWNlIgogICAgICAgICAgICAgICAgICAgIGNsZWFyYWJsZT0iIgogICAgICAgICAgICAgICAgICA+PC9lbC1pbnB1dD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdi1vbmUiPgogICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICBjbGFzcz0ib25lLWxlZnQiCiAgICAgICAgICAgICAgICAgIDpzdHlsZT0iewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiBpc1VwZGF0ZSA9PSAwID8gJyM2MDYyNjYnIDogJyMzZDgyZmUnLAogICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IGlzVXBkYXRlID09IDAgPyAnbm9ybWFsJyA6ICdib2xkJywKICAgICAgICAgICAgICAgICAgfSIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAg5Yqg5bel6LS5KENOWSkKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib25lLXJpZ2h0Ij4KICAgICAgICAgICAgICAgICAgPGVsLWlucHV0CiAgICAgICAgICAgICAgICAgICAgQGlucHV0PSJ0b3RhbENvc3RDblJhdGVDaGFuZ2UiCiAgICAgICAgICAgICAgICAgICAgOnJlYWRvbmx5PSJpc1VwZGF0ZSA9PSAwID8gdHJ1ZSA6IGZhbHNlIgogICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImRldmljZURldGFpbC5wcm9jZXNzQ29zdCIKICAgICAgICAgICAgICAgICAgICBjbGVhcmFibGUKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8L2VsLWlucHV0PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGl2LW9uZSI+CiAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgIGNsYXNzPSJvbmUtbGVmdCIKICAgICAgICAgICAgICAgICAgOnN0eWxlPSJ7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6IGlzVXBkYXRlID09IDAgPyAnIzYwNjI2NicgOiAnIzNkODJmZScsCiAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogaXNVcGRhdGUgPT0gMCA/ICdub3JtYWwnIDogJ2JvbGQnLAogICAgICAgICAgICAgICAgICB9IgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICDlpJbluIHlhZHkurrmsJHluIHmsYfnjocKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib25lLXJpZ2h0Ij4KICAgICAgICAgICAgICAgICAgPGVsLWlucHV0CiAgICAgICAgICAgICAgICAgICAgQGlucHV0PSJ0b3RhbENvc3RDblJhdGVDaGFuZ2UiCiAgICAgICAgICAgICAgICAgICAgOnJlYWRvbmx5PSJpc1VwZGF0ZSA9PSAwID8gdHJ1ZSA6IGZhbHNlIgogICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImRldmljZURldGFpbC50b3RhbENuUmF0ZSIKICAgICAgICAgICAgICAgICAgICBjbGVhcmFibGUKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8L2VsLWlucHV0PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGl2LW9uZSI+CiAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgIGNsYXNzPSJvbmUtbGVmdCIKICAgICAgICAgICAgICAgICAgOnN0eWxlPSJ7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6IGlzVXBkYXRlID09IDAgPyAnIzYwNjI2NicgOiAnIzNkODJmZScsCiAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogaXNVcGRhdGUgPT0gMCA/ICdub3JtYWwnIDogJ2JvbGQnLAogICAgICAgICAgICAgICAgICB9IgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICDmiJDmnKzkurrmsJHluIHph5Hpop0KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib25lLXJpZ2h0Ij4KICAgICAgICAgICAgICAgICAgPGVsLWlucHV0CiAgICAgICAgICAgICAgICAgICAgOnJlYWRvbmx5PSJpc1VwZGF0ZSA9PSAwID8gdHJ1ZSA6IGZhbHNlIgogICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImRldmljZURldGFpbC50b3RhbENuUHJpY2UiCiAgICAgICAgICAgICAgICAgICAgY2xlYXJhYmxlCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPC9lbC1pbnB1dD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdi1vbmUiPgogICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICBjbGFzcz0ib25lLWxlZnQiCiAgICAgICAgICAgICAgICAgIDpzdHlsZT0iewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiBpc1VwZGF0ZSA9PSAwID8gJyM2MDYyNjYnIDogJyMzZDgyZmUnLAogICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IGlzVXBkYXRlID09IDAgPyAnbm9ybWFsJyA6ICdib2xkJywKICAgICAgICAgICAgICAgICAgfSIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAg5riv5biB5YWR5Lq65rCR5biB5rGH546HCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9uZS1yaWdodCI+CiAgICAgICAgICAgICAgICAgIDxlbC1pbnB1dAogICAgICAgICAgICAgICAgICAgIEBpbnB1dD0idG90YWxDb3N0SGtSYXRlQ2hhbmdlIgogICAgICAgICAgICAgICAgICAgIDpyZWFkb25seT0iaXNVcGRhdGUgPT0gMCA/IHRydWUgOiBmYWxzZSIKICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJkZXZpY2VEZXRhaWwudG90YWxIa1JhdGUiCiAgICAgICAgICAgICAgICAgICAgY2xlYXJhYmxlCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPC9lbC1pbnB1dD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdi1vbmUiPgogICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICBjbGFzcz0ib25lLWxlZnQiCiAgICAgICAgICAgICAgICAgIDpzdHlsZT0iewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiBpc1VwZGF0ZSA9PSAwID8gJyM2MDYyNjYnIDogJyMzZDgyZmUnLAogICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IGlzVXBkYXRlID09IDAgPyAnbm9ybWFsJyA6ICdib2xkJywKICAgICAgICAgICAgICAgICAgfSIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAg5oiQ5pys5riv5biB6YeR6aKdCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9uZS1yaWdodCI+CiAgICAgICAgICAgICAgICAgIDxlbC1pbnB1dAogICAgICAgICAgICAgICAgICAgIDpyZWFkb25seT0iaXNVcGRhdGUgPT0gMCA/IHRydWUgOiBmYWxzZSIKICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJkZXZpY2VEZXRhaWwudG90YWxIa1ByaWNlIgogICAgICAgICAgICAgICAgICAgIGNsZWFyYWJsZQogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDwvZWwtaW5wdXQ+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkaXYtb25lIj4KICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgY2xhc3M9Im9uZS1sZWZ0IgogICAgICAgICAgICAgICAgICA6c3R5bGU9InsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogaXNVcGRhdGUgPT0gMCA/ICcjNjA2MjY2JyA6ICcjM2Q4MmZlJywKICAgICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiBpc1VwZGF0ZSA9PSAwID8gJ25vcm1hbCcgOiAnYm9sZCcsCiAgICAgICAgICAgICAgICAgIH0iCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIOacgOS9jumUgOWUruS7tyhDTlkpCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9uZS1yaWdodCI+CiAgICAgICAgICAgICAgICAgIDxlbC1pbnB1dAogICAgICAgICAgICAgICAgICAgIDpyZWFkb25seT0iaXNVcGRhdGUgPT0gMCA/IHRydWUgOiBmYWxzZSIKICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJkZXZpY2VEZXRhaWwubG93ZXN0U2VsbFByaWNlIgogICAgICAgICAgICAgICAgICAgIGNsZWFyYWJsZQogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDwvZWwtaW5wdXQ+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkaXYtb25lIj4KICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgY2xhc3M9Im9uZS1sZWZ0IgogICAgICAgICAgICAgICAgICA6c3R5bGU9InsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogaXNVcGRhdGUgPT0gMCA/ICcjNjA2MjY2JyA6ICcjM2Q4MmZlJywKICAgICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiBpc1VwZGF0ZSA9PSAwID8gJ25vcm1hbCcgOiAnYm9sZCcsCiAgICAgICAgICAgICAgICAgIH0iCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIOW7uuiurumUgOWUruS7tyhDTlkpCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9uZS1yaWdodCI+CiAgICAgICAgICAgICAgICAgIDxlbC1pbnB1dAogICAgICAgICAgICAgICAgICAgIDpyZWFkb25seT0iaXNVcGRhdGUgPT0gMCA/IHRydWUgOiBmYWxzZSIKICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJkZXZpY2VEZXRhaWwuYWR2aXNlU2VsbFByaWNlIgogICAgICAgICAgICAgICAgICAgIGNsZWFyYWJsZQogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDwvZWwtaW5wdXQ+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkaXYtb25lIj4KICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgY2xhc3M9Im9uZS1sZWZ0IgogICAgICAgICAgICAgICAgICA6c3R5bGU9InsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogaXNVcGRhdGUgPT0gMCA/ICcjNjA2MjY2JyA6ICcjM2Q4MmZlJywKICAgICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiBpc1VwZGF0ZSA9PSAwID8gJ25vcm1hbCcgOiAnYm9sZCcsCiAgICAgICAgICAgICAgICAgIH0iCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIOW7uuiuruaJueWPkeS7tyhDTlkpCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9uZS1yaWdodCI+CiAgICAgICAgICAgICAgICAgIDxlbC1pbnB1dAogICAgICAgICAgICAgICAgICAgIDpyZWFkb25seT0iaXNVcGRhdGUgPT0gMCA/IHRydWUgOiBmYWxzZSIKICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJkZXZpY2VEZXRhaWwuYWR2aWNlV2hvbGVzYWxlUHJpY2UiCiAgICAgICAgICAgICAgICAgICAgY2xlYXJhYmxlCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPC9lbC1pbnB1dD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdi1vbmUiPgogICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICBjbGFzcz0ib25lLWxlZnQiCiAgICAgICAgICAgICAgICAgIDpzdHlsZT0iewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiBpc1VwZGF0ZSA9PSAwID8gJyM2MDYyNjYnIDogJyMzZDgyZmUnLAogICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IGlzVXBkYXRlID09IDAgPyAnbm9ybWFsJyA6ICdib2xkJywKICAgICAgICAgICAgICAgICAgfSIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAg5qCH562+5Lu3KENOWSkKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib25lLXJpZ2h0Ij4KICAgICAgICAgICAgICAgICAgPGVsLWlucHV0CiAgICAgICAgICAgICAgICAgICAgOnJlYWRvbmx5PSJpc1VwZGF0ZSA9PSAwID8gdHJ1ZSA6IGZhbHNlIgogICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImRldmljZURldGFpbC50YWdQcmljZSIKICAgICAgICAgICAgICAgICAgICBjbGVhcmFibGUKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8L2VsLWlucHV0PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGl2LW9uZSI+CiAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgIGNsYXNzPSJvbmUtbGVmdCIKICAgICAgICAgICAgICAgICAgOnN0eWxlPSJ7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6IGlzVXBkYXRlID09IDAgPyAnIzYwNjI2NicgOiAnIzNkODJmZScsCiAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogaXNVcGRhdGUgPT0gMCA/ICdub3JtYWwnIDogJ2JvbGQnLAogICAgICAgICAgICAgICAgICB9IgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICDplIDllK7mj5DmiJAoQ05ZKQogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvbmUtcmlnaHQiPgogICAgICAgICAgICAgICAgICA8ZWwtaW5wdXQKICAgICAgICAgICAgICAgICAgICA6cmVhZG9ubHk9ImlzVXBkYXRlID09IDAgPyB0cnVlIDogZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iZGV2aWNlRGV0YWlsLnNhbGVDb21taXNzaW9uIgogICAgICAgICAgICAgICAgICAgIGNsZWFyYWJsZQogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDwvZWwtaW5wdXQ+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxwIGNsYXNzPSJmb250LXRpdGxlLXN0eWxlIj7lpIfms6jkv6Hmga88L3A+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvbnQtZGl2Ij4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkaXYtb25lLW5vdGUiIGlkPSJvbmUtbm90ZSI+CiAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgIGNsYXNzPSJvbmUtbGVmdCIKICAgICAgICAgICAgICAgICAgOnN0eWxlPSJ7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6IGlzVXBkYXRlID09IDAgPyAnIzYwNjI2NicgOiAnIzNkODJmZScsCiAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogaXNVcGRhdGUgPT0gMCA/ICdub3JtYWwnIDogJ2JvbGQnLAogICAgICAgICAgICAgICAgICB9IgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICDmiJDmnKzlpIfms6gKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib25lLXJpZ2h0Ij4KICAgICAgICAgICAgICAgICAgPGVsLWlucHV0CiAgICAgICAgICAgICAgICAgICAgdHlwZT0idGV4dGFyZWEiCiAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iZGV2aWNlRGV0YWlsLnRvdGFsUHJpY2VOb3RlIgogICAgICAgICAgICAgICAgICAgIDpyZWFkb25seT0iaXNVcGRhdGUgPT0gMCA/IHRydWUgOiBmYWxzZSIKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8L2VsLWlucHV0PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9lbC10YWItcGFuZT4KICAgICAgICAgIDxlbC10YWItcGFuZQogICAgICAgICAgICBsYWJlbD0i6ZSA5ZSu5L+h5oGvIgogICAgICAgICAgICBuYW1lPSJ0aGlyZCIKICAgICAgICAgICAgdi1pZj0iZGV2aWNlRGV0YWlsLnN0YXRlID09IDQiCiAgICAgICAgICA+CiAgICAgICAgICAgIDxkaXYgc3R5bGU9ImRpc3BsYXk6IGZsZXg7anVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuOyI+CiAgICAgICAgICAgICAgPHAgY2xhc3M9ImZvbnQtdGl0bGUtc3R5bGUiIHN0eWxlPSJtYXJnaW4tdG9wOiAwOyI+CiAgICAgICAgICAgICAgICDplIDllK7kv6Hmga8KICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgPGRpdiBzdHlsZT0icGFkZGluZy10b3A6IDZweDsiPgogICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICBzdHlsZT0iY3Vyc29yOiBwb2ludGVyOyIKICAgICAgICAgICAgICAgICAgdGl0bGU9IuS/ruaUuemUgOWUruS/oeaBryIKICAgICAgICAgICAgICAgICAgc3JjPSIuLi9hc3NldHMvaW1ncy9ob21lL3VwZGF0ZS5wbmciCiAgICAgICAgICAgICAgICAgIEBjbGljaz0idXBkYXRlRGV2aWNlIgogICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvbnQtZGl2Ij4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkaXYtb25lIj4KICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgY2xhc3M9Im9uZS1sZWZ0IgogICAgICAgICAgICAgICAgICA6c3R5bGU9InsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogaXNVcGRhdGUgPT0gMCA/ICcjNjA2MjY2JyA6ICcjM2Q4MmZlJywKICAgICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiBpc1VwZGF0ZSA9PSAwID8gJ25vcm1hbCcgOiAnYm9sZCcsCiAgICAgICAgICAgICAgICAgIH0iCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIOmUgOWUruWRmAogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvbmUtcmlnaHQiPgogICAgICAgICAgICAgICAgICA8ZWwtaW5wdXQKICAgICAgICAgICAgICAgICAgICA6cmVhZG9ubHk9ImlzVXBkYXRlID09IDAgPyB0cnVlIDogZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iZGV2aWNlRGV0YWlsLnNvbGRlciIKICAgICAgICAgICAgICAgICAgICBjbGVhcmFibGUKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8L2VsLWlucHV0PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGl2LW9uZSI+CiAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgIGNsYXNzPSJvbmUtbGVmdCIKICAgICAgICAgICAgICAgICAgOnN0eWxlPSJ7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6IGlzVXBkYXRlID09IDAgPyAnIzYwNjI2NicgOiAnIzNkODJmZScsCiAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogaXNVcGRhdGUgPT0gMCA/ICdub3JtYWwnIDogJ2JvbGQnLAogICAgICAgICAgICAgICAgICB9IgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICDnu4QKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib25lLXJpZ2h0Ij4KICAgICAgICAgICAgICAgICAgPGVsLWlucHV0CiAgICAgICAgICAgICAgICAgICAgOnJlYWRvbmx5PSJpc1VwZGF0ZSA9PSAwID8gdHJ1ZSA6IGZhbHNlIgogICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImRldmljZURldGFpbC5ncm91cCIKICAgICAgICAgICAgICAgICAgICBjbGVhcmFibGUKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8L2VsLWlucHV0PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGl2LW9uZSI+CiAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgIGNsYXNzPSJvbmUtbGVmdCIKICAgICAgICAgICAgICAgICAgOnN0eWxlPSJ7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6IGlzVXBkYXRlID09IDAgPyAnIzYwNjI2NicgOiAnIzNkODJmZScsCiAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogaXNVcGRhdGUgPT0gMCA/ICdub3JtYWwnIDogJ2JvbGQnLAogICAgICAgICAgICAgICAgICB9IgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICDpob7lrqLlp5PlkI0KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib25lLXJpZ2h0Ij4KICAgICAgICAgICAgICAgICAgPGVsLWlucHV0CiAgICAgICAgICAgICAgICAgICAgOnJlYWRvbmx5PSJpc1VwZGF0ZSA9PSAwID8gdHJ1ZSA6IGZhbHNlIgogICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImRldmljZURldGFpbC5jdXN0b21lciIKICAgICAgICAgICAgICAgICAgICBjbGVhcmFibGUKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8L2VsLWlucHV0PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGl2LW9uZSI+CiAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgIGNsYXNzPSJvbmUtbGVmdCIKICAgICAgICAgICAgICAgICAgOnN0eWxlPSJ7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6IGlzVXBkYXRlID09IDAgPyAnIzYwNjI2NicgOiAnIzNkODJmZScsCiAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogaXNVcGRhdGUgPT0gMCA/ICdub3JtYWwnIDogJ2JvbGQnLAogICAgICAgICAgICAgICAgICB9IgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICDlh7rllK7luIHnp40KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib25lLXJpZ2h0Ij4KICAgICAgICAgICAgICAgICAgPGVsLXJhZGlvLWdyb3VwCiAgICAgICAgICAgICAgICAgICAgQGNoYW5nZT0iY3VycmVuY3lDaGFuZ2UyIgogICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImRldmljZURldGFpbC5zYWxlQ3VycmVuY3kiCiAgICAgICAgICAgICAgICAgICAgOmRpc2FibGVkPSJpc1VwZGF0ZSA9PSAwID8gdHJ1ZSA6IGZhbHNlIgogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgPGVsLXJhZGlvIGxhYmVsPSJDTlkiPkNOWTwvZWwtcmFkaW8+CiAgICAgICAgICAgICAgICAgICAgPGVsLXJhZGlvIGxhYmVsPSJFVVIiPkVVUjwvZWwtcmFkaW8+CiAgICAgICAgICAgICAgICAgICAgPGVsLXJhZGlvIGxhYmVsPSJVU0QiPlVTRDwvZWwtcmFkaW8+CiAgICAgICAgICAgICAgICAgICAgPGVsLXJhZGlvIGxhYmVsPSJIS0QiPkhLRDwvZWwtcmFkaW8+CiAgICAgICAgICAgICAgICAgIDwvZWwtcmFkaW8tZ3JvdXA+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkaXYtb25lIj4KICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgY2xhc3M9Im9uZS1sZWZ0IgogICAgICAgICAgICAgICAgICA6c3R5bGU9InsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogaXNVcGRhdGUgPT0gMCA/ICcjNjA2MjY2JyA6ICcjM2Q4MmZlJywKICAgICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiBpc1VwZGF0ZSA9PSAwID8gJ25vcm1hbCcgOiAnYm9sZCcsCiAgICAgICAgICAgICAgICAgIH0iCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIOWHuuWUrumHkeminQogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvbmUtcmlnaHQiPgogICAgICAgICAgICAgICAgICA8ZWwtaW5wdXQKICAgICAgICAgICAgICAgICAgICBAaW5wdXQ9ImN1cnJlbmN5Q2hhbmdlMiIKICAgICAgICAgICAgICAgICAgICA6cmVhZG9ubHk9ImlzVXBkYXRlID09IDAgPyB0cnVlIDogZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iZGV2aWNlRGV0YWlsLnNhbGVNb25leSIKICAgICAgICAgICAgICAgICAgICBjbGVhcmFibGUKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8L2VsLWlucHV0PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGl2LW9uZSI+CiAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgIGNsYXNzPSJvbmUtbGVmdCIKICAgICAgICAgICAgICAgICAgOnN0eWxlPSJ7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6IGlzVXBkYXRlID09IDAgPyAnIzYwNjI2NicgOiAnIzNkODJmZScsCiAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogaXNVcGRhdGUgPT0gMCA/ICdub3JtYWwnIDogJ2JvbGQnLAogICAgICAgICAgICAgICAgICB9IgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICDlpJbluIHlhZHkurrmsJHluIHmsYfnjocKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib25lLXJpZ2h0Ij4KICAgICAgICAgICAgICAgICAgPGVsLWlucHV0CiAgICAgICAgICAgICAgICAgICAgQGlucHV0PSJ0b3RhbENuUmF0ZUNoYW5nZTIiCiAgICAgICAgICAgICAgICAgICAgOnJlYWRvbmx5PSJpc1VwZGF0ZSA9PSAwID8gdHJ1ZSA6IGZhbHNlIgogICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImRldmljZURldGFpbC50b3RhbFRvQ25SYXRlIgogICAgICAgICAgICAgICAgICAgIGNsZWFyYWJsZQogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDwvZWwtaW5wdXQ+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkaXYtb25lIj4KICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgY2xhc3M9Im9uZS1sZWZ0IgogICAgICAgICAgICAgICAgICA6c3R5bGU9InsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogaXNVcGRhdGUgPT0gMCA/ICcjNjA2MjY2JyA6ICcjM2Q4MmZlJywKICAgICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiBpc1VwZGF0ZSA9PSAwID8gJ25vcm1hbCcgOiAnYm9sZCcsCiAgICAgICAgICAgICAgICAgIH0iCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIOWHuuWUruS6uuawkeW4gemHkeminQogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvbmUtcmlnaHQiPgogICAgICAgICAgICAgICAgICA8ZWwtaW5wdXQKICAgICAgICAgICAgICAgICAgICA6cmVhZG9ubHk9ImlzVXBkYXRlID09IDAgPyB0cnVlIDogZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iZGV2aWNlRGV0YWlsLnNlbGxUb3RhbENuUHJpY2UiCiAgICAgICAgICAgICAgICAgICAgY2xlYXJhYmxlCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPC9lbC1pbnB1dD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdi1vbmUiPgogICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICBjbGFzcz0ib25lLWxlZnQiCiAgICAgICAgICAgICAgICAgIDpzdHlsZT0iewogICAgICAgICAgICAgICAgICAgIGNvbG9yOiBpc1VwZGF0ZSA9PSAwID8gJyM2MDYyNjYnIDogJyMzZDgyZmUnLAogICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IGlzVXBkYXRlID09IDAgPyAnbm9ybWFsJyA6ICdib2xkJywKICAgICAgICAgICAgICAgICAgfSIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAg5riv5biB5YWR5Lq65rCR5biB5rGH546HCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9uZS1yaWdodCI+CiAgICAgICAgICAgICAgICAgIDxlbC1pbnB1dAogICAgICAgICAgICAgICAgICAgIEBpbnB1dD0idG90YWxIa1JhdGVDaGFuZ2UyIgogICAgICAgICAgICAgICAgICAgIDpyZWFkb25seT0iaXNVcGRhdGUgPT0gMCA/IHRydWUgOiBmYWxzZSIKICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJkZXZpY2VEZXRhaWwudG90YWxUb0hrUmF0ZSIKICAgICAgICAgICAgICAgICAgICBjbGVhcmFibGUKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8L2VsLWlucHV0PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGl2LW9uZSI+CiAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgIGNsYXNzPSJvbmUtbGVmdCIKICAgICAgICAgICAgICAgICAgOnN0eWxlPSJ7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6IGlzVXBkYXRlID09IDAgPyAnIzYwNjI2NicgOiAnIzNkODJmZScsCiAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogaXNVcGRhdGUgPT0gMCA/ICdub3JtYWwnIDogJ2JvbGQnLAogICAgICAgICAgICAgICAgICB9IgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICDlh7rllK7muK/luIHph5Hpop0KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib25lLXJpZ2h0Ij4KICAgICAgICAgICAgICAgICAgPGVsLWlucHV0CiAgICAgICAgICAgICAgICAgICAgOnJlYWRvbmx5PSJpc1VwZGF0ZSA9PSAwID8gdHJ1ZSA6IGZhbHNlIgogICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImRldmljZURldGFpbC5zZWxsVG90YWxIa1ByaWNlIgogICAgICAgICAgICAgICAgICAgIGNsZWFyYWJsZQogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDwvZWwtaW5wdXQ+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkaXYtb25lIj4KICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgY2xhc3M9Im9uZS1sZWZ0IgogICAgICAgICAgICAgICAgICA6c3R5bGU9InsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogaXNVcGRhdGUgPT0gMCA/ICcjNjA2MjY2JyA6ICcjM2Q4MmZlJywKICAgICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiBpc1VwZGF0ZSA9PSAwID8gJ25vcm1hbCcgOiAnYm9sZCcsCiAgICAgICAgICAgICAgICAgIH0iCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIOmUgOWUruWPkeelqOWPtwogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvbmUtcmlnaHQiPgogICAgICAgICAgICAgICAgICA8ZWwtaW5wdXQKICAgICAgICAgICAgICAgICAgICA6cmVhZG9ubHk9ImlzVXBkYXRlID09IDAgPyB0cnVlIDogZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iZGV2aWNlRGV0YWlsLnNlbGxCaWxsTnVtYmVyIgogICAgICAgICAgICAgICAgICAgIGNsZWFyYWJsZQogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDwvZWwtaW5wdXQ+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkaXYtb25lIj4KICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgY2xhc3M9Im9uZS1sZWZ0IgogICAgICAgICAgICAgICAgICA6c3R5bGU9InsKICAgICAgICAgICAgICAgICAgICBjb2xvcjogaXNVcGRhdGUgPT0gMCA/ICcjNjA2MjY2JyA6ICcjM2Q4MmZlJywKICAgICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiBpc1VwZGF0ZSA9PSAwID8gJ25vcm1hbCcgOiAnYm9sZCcsCiAgICAgICAgICAgICAgICAgIH0iCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIOmihui0p+S6ugogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvbmUtcmlnaHQiPgogICAgICAgICAgICAgICAgICA8ZWwtaW5wdXQKICAgICAgICAgICAgICAgICAgICA6cmVhZG9ubHk9ImlzVXBkYXRlID09IDAgPyB0cnVlIDogZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iZGV2aWNlRGV0YWlsLnJlY2VpdmVyIgogICAgICAgICAgICAgICAgICAgIGNsZWFyYWJsZQogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDwvZWwtaW5wdXQ+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2VsLXRhYi1wYW5lPgogICAgICAgICAgPGVsLXRhYi1wYW5lIGxhYmVsPSLljoblj7LorrDlvZUiIG5hbWU9InNlY29uZCI+CiAgICAgICAgICAgIDxwIGNsYXNzPSJmb250LXRpdGxlLXN0eWxlIiBzdHlsZT0ibWFyZ2luLXRvcDogMDsiPgogICAgICAgICAgICAgIOaIkOWTgeeKtuaAge+8mnt7CiAgICAgICAgICAgICAgICBkZXZpY2VEZXRhaWwuc3RhdGUgPT0gMAogICAgICAgICAgICAgICAgICA/ICLlupPlrZjkuK0iCiAgICAgICAgICAgICAgICAgIDogZGV2aWNlRGV0YWlsLnN0YXRlID09IDEKICAgICAgICAgICAgICAgICAgPyAi6L+Q6L6T5LitIgogICAgICAgICAgICAgICAgICA6IGRldmljZURldGFpbC5zdGF0ZSA9PSAzCiAgICAgICAgICAgICAgICAgID8gIuWKoOW3peWujOaIkCIKICAgICAgICAgICAgICAgICAgOiAi5bey5Ye65ZSuIgogICAgICAgICAgICAgIH19CiAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgPGVsLXRpbWVsaW5lPgogICAgICAgICAgICAgIDxlbC10aW1lbGluZS1pdGVtCiAgICAgICAgICAgICAgICBjb2xvcj0iIzNkODJmZSIKICAgICAgICAgICAgICAgIHNpemU9ImxhcmdlIgogICAgICAgICAgICAgICAgdi1mb3I9IihhY3Rpdml0eSwgaW5kZXgpIGluIGRldmljZURldGFpbC5zdG9ja0luT3V0TGlzdCIKICAgICAgICAgICAgICAgIDprZXk9ImluZGV4IgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9ImRpc3BsYXk6IGZsZXg7YWxpZ24taXRlbXM6IGNlbnRlcjsiPgogICAgICAgICAgICAgICAgICA8cCBzdHlsZT0ibWFyZ2luOjAgMjBweCAxNHB4IDA7d2lkdGg6IDcycHg7Ij4KICAgICAgICAgICAgICAgICAgICB7eyBhY3Rpdml0eS50aW1lLnNsaWNlKDAsIDEwKSB9fQogICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgIDxwIHN0eWxlPSJtYXJnaW4tdG9wOjAiIHYtaHRtbD0iYWN0aXZpdHkuZGVzY3JpYmUiPjwvcD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPHAKICAgICAgICAgICAgICAgICAgdi1pZj0iYWN0aXZpdHkubm90ZSAhPT0gJyciCiAgICAgICAgICAgICAgICAgIHN0eWxlPSJtYXJnaW46IDA7Y29sb3I6IzkxOTA5MDttYXJnaW4tbGVmdDo5MnB4O3dvcmQtYnJlYWs6IGJyZWFrLWFsbDt3b3JkLXdyYXA6IGJyZWFrLXdvcmQiCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIHt7IGFjdGl2aXR5Lm5vdGUgfX0KICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICA8L2VsLXRpbWVsaW5lLWl0ZW0+CiAgICAgICAgICAgIDwvZWwtdGltZWxpbmU+CiAgICAgICAgICA8L2VsLXRhYi1wYW5lPgogICAgICAgIDwvZWwtdGFicz4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgc2xvdD0iZm9vdGVyIj4KICAgICAgICA8ZWwtYnV0dG9uIEBjbGljaz0iZGlhbG9nRGV2aWNlRGV0YWlsVmlzaWJsZSA9IGZhbHNlIgogICAgICAgICAgPuWPliDmtog8L2VsLWJ1dHRvbgogICAgICAgID4KICAgICAgICA8ZWwtYnV0dG9uIHR5cGU9InByaW1hcnkiIEBjbGljaz0iaW52ZW50b3J5TG9va1N1cmUiPuehriDlrpo8L2VsLWJ1dHRvbj4KICAgICAgPC9kaXY+CiAgICA8L2VsLWRpYWxvZz4KICAgIDxlbC1kaWFsb2cKICAgICAgdi1pZj0iZGlhbG9nRGV2aWNlRGV0YWlsc1Zpc2libGUiCiAgICAgIHRpdGxlPSLmnZDmlpnkv6Hmga8iCiAgICAgIDp2aXNpYmxlLnN5bmM9ImRpYWxvZ0RldmljZURldGFpbHNWaXNpYmxlIgogICAgICA6Y2xvc2Utb24tcHJlc3MtZXNjYXBlPSJmYWxzZSIKICAgICAgOmNsb3NlLW9uLWNsaWNrLW1vZGFsPSJmYWxzZSIKICAgICAgOm1vZGFsLWFwcGVuZC10by1ib2R5PSJmYWxzZSIKICAgICAgOmFwcGVuZC10by1ib2R5PSJmYWxzZSIKICAgICAgc3R5bGU9Im1hcmdpbi10b3A6MjBweCIKICAgID4KICAgICAgPGRpdiBpZD0iaW52ZW5Tb21lIj4KICAgICAgICA8ZWwtdGFicyBzdHlsZT0ibWFyZ2luLXRvcDogMjBweDsiIHYtbW9kZWw9ImFjdGl2ZU5hbWUiPgogICAgICAgICAgPGVsLXRhYi1wYW5lIGxhYmVsPSLmnZDmlpnkv6Hmga8iIG5hbWU9ImZmIj4KICAgICAgICAgICAgPHAgY2xhc3M9ImZvbnQtdGl0bGUtc3R5bGUiIHN0eWxlPSJtYXJnaW4tdG9wOiAwOyI+CiAgICAgICAgICAgICAg5p2Q5paZ5L+h5oGvCiAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9udC1kaXYiPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdi1vbmUiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib25lLWxlZnQiPgogICAgICAgICAgICAgICAgICDmnZDmlpnlkI3np7AKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib25lLXJpZ2h0Ij4KICAgICAgICAgICAgICAgICAge3sgZGV2aWNlRGV0YWlscy5tYXRlcmlhbE5hbWUgfX0KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdi1vbmUiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib25lLWxlZnQiPgogICAgICAgICAgICAgICAgICDku5PlupMv5Yqg5bel5Y6CCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9uZS1yaWdodCI+CiAgICAgICAgICAgICAgICAgIHt7IGRldmljZURldGFpbHMuc3RvcmFnZU5hbWUgfX0KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdi1vbmUiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib25lLWxlZnQiPgogICAgICAgICAgICAgICAgICDnu5/kuIDnvJblj7cKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib25lLXJpZ2h0Ij4KICAgICAgICAgICAgICAgICAge3sgZGV2aWNlRGV0YWlscy5wcm9kdWN0TnVtYmVyIH19CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkaXYtb25lIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9uZS1sZWZ0Ij4KICAgICAgICAgICAgICAgICAg5b2i54q2CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9uZS1yaWdodCI+CiAgICAgICAgICAgICAgICAgIHt7IGRldmljZURldGFpbHMuc2hhcGUgfX0KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdi1vbmUiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib25lLWxlZnQiPgogICAgICAgICAgICAgICAgICDkuqflk4HnsbvlnosKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib25lLXJpZ2h0Ij4KICAgICAgICAgICAgICAgICAgPGVsLWlucHV0IHYtbW9kZWw9ImRldmljZURldGFpbHMucHJvZHVjdFR5cGUiIGNsZWFyYWJsZT4KICAgICAgICAgICAgICAgICAgPC9lbC1pbnB1dD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdi1vbmUiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib25lLWxlZnQiPgogICAgICAgICAgICAgICAgICDkuqflnLAKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib25lLXJpZ2h0Ij4KICAgICAgICAgICAgICAgICAgPGVsLWlucHV0IHYtbW9kZWw9ImRldmljZURldGFpbHMucHJvZHVjdEFyZWEiIGNsZWFyYWJsZT4KICAgICAgICAgICAgICAgICAgPC9lbC1pbnB1dD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdi1vbmUiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib25lLWxlZnQiPgogICAgICAgICAgICAgICAgICDlsLrlr7gv5q+r57GzCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9uZS1yaWdodCI+CiAgICAgICAgICAgICAgICAgIHt7IGRldmljZURldGFpbHMuc2l6ZSB9fQogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGl2LW9uZSI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvbmUtbGVmdCI+CiAgICAgICAgICAgICAgICAgIOminOiJsgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvbmUtcmlnaHQiPgogICAgICAgICAgICAgICAgICB7eyBkZXZpY2VEZXRhaWxzLmNvbG9yIH19CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkaXYtb25lIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9uZS1sZWZ0Ij4KICAgICAgICAgICAgICAgICAg6YWN5a+5CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9uZS1yaWdodCI+CiAgICAgICAgICAgICAgICAgIHt7IGRldmljZURldGFpbHMucGFpcmVkIH19CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkaXYtb25lIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9uZS1sZWZ0Ij4KICAgICAgICAgICAgICAgICAg5ZOB6LSoCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9uZS1yaWdodCI+CiAgICAgICAgICAgICAgICAgIHt7IGRldmljZURldGFpbHMucXVhbGl0eSB9fQogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGl2LW9uZSI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvbmUtbGVmdCI+CiAgICAgICAgICAgICAgICAgIOWTgei0qOe7huWIhgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvbmUtcmlnaHQiPgogICAgICAgICAgICAgICAgICB7eyBkZXZpY2VEZXRhaWxzLnN1YnNlY3Rpb24gfX0KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdi1vbmUiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib25lLWxlZnQiPgogICAgICAgICAgICAgICAgICDnm5LlrZDnvJblj7cKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib25lLXJpZ2h0Ij4KICAgICAgICAgICAgICAgICAge3sgZGV2aWNlRGV0YWlscy5ib3hOdW1iZXIgfX0KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdi1vbmUiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib25lLWxlZnQiPgogICAgICAgICAgICAgICAgICDor4HkuabnvJblj7cKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib25lLXJpZ2h0Ij4KICAgICAgICAgICAgICAgICAge3sgZGV2aWNlRGV0YWlscy5jZXJ0aWZpY2F0ZU51bWJlciB9fQogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGl2LW9uZSI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvbmUtbGVmdCI+CiAgICAgICAgICAgICAgICAgIOWPkeelqOWPtwogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvbmUtcmlnaHQiPgogICAgICAgICAgICAgICAgICA8ZWwtaW5wdXQgdi1tb2RlbD0iZGV2aWNlRGV0YWlscy5iaWxsTnVtYmVyIiBjbGVhcmFibGU+CiAgICAgICAgICAgICAgICAgIDwvZWwtaW5wdXQ+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxwIGNsYXNzPSJmb250LXRpdGxlLXN0eWxlIj7lm77niYfkv6Hmga88L3A+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwbG9hZC1pbWdzIj4KICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICBzdHlsZT0iZGlzcGxheTpmbGV4O3Bvc2l0aW9uOnJlbGF0aXZlOyIKICAgICAgICAgICAgICAgIGlkPSJkZWxJbWciCiAgICAgICAgICAgICAgICBjbGFzcz0iZGVsSW1nIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgdi1mb3I9IihpbWd1cmwsIGluZGV4KSBvZiBpbWdMaXN0IgogICAgICAgICAgICAgICAgICA6a2V5PSJpbmRleCIKICAgICAgICAgICAgICAgICAgc3R5bGU9Im1hcmdpbi1sZWZ0OjEwcHg7cG9zaXRpb246cmVsYXRpdmU7IgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgdi1pZj0iaW1ndXJsICE9PSAnJyAmJiBpbWd1cmwgIT09IG51bGwiCiAgICAgICAgICAgICAgICAgICAgOnNyYz0iCiAgICAgICAgICAgICAgICAgICAgICBpbWd1cmwubGVuZ3RoIDwgNDIgPyBpbWcgKyAnL2ZpbGUvJyArIGltZ3VybCA6IGltZ3VybAogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICB3aWR0aD0iMTAwcHgiCiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PSIxMDBweCIKICAgICAgICAgICAgICAgICAgICBzdHlsZT0iYm9yZGVyLXJhZGl1czo1cHg7b2JqZWN0LWZpdDpjb3ZlcjsiCiAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxwIGNsYXNzPSJmb250LXRpdGxlLXN0eWxlIj7lpIfms6jkv6Hmga88L3A+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvbnQtZGl2Ij4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkaXYtb25lLW5vdGUiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib25lLWxlZnQiPgogICAgICAgICAgICAgICAgICDkuqflk4HlpIfms6gKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib25lLXJpZ2h0Ij4KICAgICAgICAgICAgICAgICAgPGVsLWlucHV0CiAgICAgICAgICAgICAgICAgICAgdHlwZT0idGV4dGFyZWEiCiAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iZGV2aWNlRGV0YWlscy5ub3RlIgogICAgICAgICAgICAgICAgICAgIHJlYWRvbmx5CiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPC9lbC1pbnB1dD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZWwtdGFiLXBhbmU+CiAgICAgICAgICA8ZWwtdGFiLXBhbmUgbGFiZWw9IuS7t+agvOS/oeaBryIgbmFtZT0icXEiPgogICAgICAgICAgICA8cCBjbGFzcz0iZm9udC10aXRsZS1zdHlsZSIgc3R5bGU9Im1hcmdpbi10b3A6IDA7Ij4KICAgICAgICAgICAgICDku7fmoLzkv6Hmga8KICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb250LWRpdiI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGl2LW9uZSI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvbmUtbGVmdCI+CiAgICAgICAgICAgICAgICAgIOiuoeS7t+WNleS9jQogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvbmUtcmlnaHQiPgogICAgICAgICAgICAgICAgICA8ZWwtcmFkaW8tZ3JvdXAKICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJkZXZpY2VEZXRhaWxzLmNoYXJnZVVuaXQiCiAgICAgICAgICAgICAgICAgICAgOmRpc2FibGVkPSJ0cnVlIgogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgPGVsLXJhZGlvIGxhYmVsPSLnspIiPueykjwvZWwtcmFkaW8+CiAgICAgICAgICAgICAgICAgICAgPGVsLXJhZGlvIGxhYmVsPSJjdCI+Y3Q8L2VsLXJhZGlvPgogICAgICAgICAgICAgICAgICAgIDxlbC1yYWRpbyBsYWJlbD0iZyI+ZzwvZWwtcmFkaW8+CiAgICAgICAgICAgICAgICAgIDwvZWwtcmFkaW8tZ3JvdXA+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkaXYtb25lIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9uZS1sZWZ0Ij4KICAgICAgICAgICAgICAgICAg5Y2V5Lu3CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9uZS1yaWdodCI+CiAgICAgICAgICAgICAgICAgIHt7IGRldmljZURldGFpbHMudW5pdFByaWNlIH19CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkaXYtb25lIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9uZS1sZWZ0Ij4KICAgICAgICAgICAgICAgICAg5biB56eNCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9uZS1yaWdodCI+CiAgICAgICAgICAgICAgICAgIDxlbC1yYWRpby1ncm91cAogICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImRldmljZURldGFpbHMuY3VycmVuY3kiCiAgICAgICAgICAgICAgICAgICAgOmRpc2FibGVkPSJ0cnVlIgogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgPGVsLXJhZGlvIGxhYmVsPSJDTlkiPkNOWTwvZWwtcmFkaW8+CiAgICAgICAgICAgICAgICAgICAgPGVsLXJhZGlvIGxhYmVsPSJFVVIiPkVVUjwvZWwtcmFkaW8+CiAgICAgICAgICAgICAgICAgICAgPGVsLXJhZGlvIGxhYmVsPSJVU0QiPlVTRDwvZWwtcmFkaW8+CiAgICAgICAgICAgICAgICAgICAgPGVsLXJhZGlvIGxhYmVsPSJIS0QiPkhLRDwvZWwtcmFkaW8+CiAgICAgICAgICAgICAgICAgIDwvZWwtcmFkaW8tZ3JvdXA+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkaXYtb25lIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9uZS1sZWZ0Ij4KICAgICAgICAgICAgICAgICAg5oC75pWw6YePCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9uZS1yaWdodCI+CiAgICAgICAgICAgICAgICAgIHt7CiAgICAgICAgICAgICAgICAgICAgZGV2aWNlRGV0YWlscy5jaGFyZ2VVbml0ID09ICLnspIiCiAgICAgICAgICAgICAgICAgICAgICA/IGRldmljZURldGFpbHMubnVtYmVyICsgIiAiICsgZGV2aWNlRGV0YWlscy5jaGFyZ2VVbml0CiAgICAgICAgICAgICAgICAgICAgICA6IGRldmljZURldGFpbHMubnVtYmVyCiAgICAgICAgICAgICAgICAgIH19CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkaXYtb25lIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9uZS1sZWZ0Ij4KICAgICAgICAgICAgICAgICAg5oC76YeN6YePCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9uZS1yaWdodCI+CiAgICAgICAgICAgICAgICAgIHt7CiAgICAgICAgICAgICAgICAgICAgZGV2aWNlRGV0YWlscy5jaGFyZ2VVbml0ICE9ICLnspIiCiAgICAgICAgICAgICAgICAgICAgICA/IGRldmljZURldGFpbHMud2VpZ2h0ICsgIiAiICsgZGV2aWNlRGV0YWlscy5jaGFyZ2VVbml0CiAgICAgICAgICAgICAgICAgICAgICA6ICItLSIKICAgICAgICAgICAgICAgICAgfX0KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdi1vbmUiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib25lLWxlZnQiPgogICAgICAgICAgICAgICAgICDmgLvku7cKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib25lLXJpZ2h0Ij4KICAgICAgICAgICAgICAgICAge3sKICAgICAgICAgICAgICAgICAgICBkZXZpY2VEZXRhaWxzLnRvdGFsUHJpY2UgKyAiICIgKyBkZXZpY2VEZXRhaWxzLmN1cnJlbmN5CiAgICAgICAgICAgICAgICAgIH19CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkaXYtb25lIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9uZS1sZWZ0Ij4KICAgICAgICAgICAgICAgICAg6Zu25ZSu5Y2V5Lu3CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9uZS1yaWdodCI+CiAgICAgICAgICAgICAgICAgIHt7IGRldmljZURldGFpbHMucmV0YWlsUHJpY2UgfX0KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdi1vbmUiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib25lLWxlZnQiPgogICAgICAgICAgICAgICAgICDmibnlj5HljZXku7cKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib25lLXJpZ2h0Ij4KICAgICAgICAgICAgICAgICAge3sgZGV2aWNlRGV0YWlscy53aG9sZXNhbGVQcmljZSB9fQogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGl2LW9uZSI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvbmUtbGVmdCI+CiAgICAgICAgICAgICAgICAgIOWkluW4geWFkeS6uuawkeW4geaxh+eOhwogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvbmUtcmlnaHQiPgogICAgICAgICAgICAgICAgICB7eyBkZXZpY2VEZXRhaWxzLnRvdGFsQ25SYXRlIH19CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkaXYtb25lIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9uZS1sZWZ0Ij4KICAgICAgICAgICAgICAgICAg5oC75Lu35Lq65rCR5biB6YeR6aKdCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9uZS1yaWdodCI+CiAgICAgICAgICAgICAgICAgIHt7IGRldmljZURldGFpbHMudG90YWxDblByaWNlIH19CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkaXYtb25lIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9uZS1sZWZ0Ij4KICAgICAgICAgICAgICAgICAg5riv5biB5YWR5Lq65rCR5biB5rGH546HCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9uZS1yaWdodCI+CiAgICAgICAgICAgICAgICAgIHt7IGRldmljZURldGFpbHMudG90YWxIa1JhdGUgfX0KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdi1vbmUiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib25lLWxlZnQiPgogICAgICAgICAgICAgICAgICDmgLvku7fmuK/luIHph5Hpop0KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib25lLXJpZ2h0Ij4KICAgICAgICAgICAgICAgICAge3sgZGV2aWNlRGV0YWlscy50b3RhbEhrUHJpY2UgfX0KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPHAgY2xhc3M9ImZvbnQtdGl0bGUtc3R5bGUiPuWkh+azqOS/oeaBrzwvcD4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9udC1kaXYiPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdi1vbmUtbm90ZSIgaWQ9Im9uZS1ub3RlIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9uZS1sZWZ0Ij4KICAgICAgICAgICAgICAgICAg5oiQ5pys5aSH5rOoCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9uZS1yaWdodCI+CiAgICAgICAgICAgICAgICAgIDxlbC1pbnB1dAogICAgICAgICAgICAgICAgICAgIHR5cGU9InRleHRhcmVhIgogICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImRldmljZURldGFpbHMudG90YWxQcmljZU5vdGUiCiAgICAgICAgICAgICAgICAgICAgcmVhZG9ubHkKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8L2VsLWlucHV0PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9lbC10YWItcGFuZT4KICAgICAgICAgIDxlbC10YWItcGFuZSBsYWJlbD0i5Y6G5Y+y6K6w5b2VIiBuYW1lPSJzcyI+CiAgICAgICAgICAgIDxwIGNsYXNzPSJmb250LXRpdGxlLXN0eWxlIiBzdHlsZT0ibWFyZ2luLXRvcDogMDsiPgogICAgICAgICAgICAgIOadkOaWmeeKtuaAge+8mnt7CiAgICAgICAgICAgICAgICBkZXZpY2VEZXRhaWxzLnN0YXRlID09IDAKICAgICAgICAgICAgICAgICAgPyAi5bqT5a2Y5LitIgogICAgICAgICAgICAgICAgICA6IGRldmljZURldGFpbHMuc3RhdGUgPT0gMQogICAgICAgICAgICAgICAgICA/ICLov5DovpPkuK0iCiAgICAgICAgICAgICAgICAgIDogZGV2aWNlRGV0YWlscy5zdGF0ZSA9PSAyCiAgICAgICAgICAgICAgICAgID8gIuWKoOW3peS4rSIKICAgICAgICAgICAgICAgICAgOiBkZXZpY2VEZXRhaWxzLnN0YXRlID09IDMKICAgICAgICAgICAgICAgICAgPyAi5Yqg5bel5a6M5oiQIgogICAgICAgICAgICAgICAgICA6ICLlt7Llh7rllK4iCiAgICAgICAgICAgICAgfX0KICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8ZWwtdGltZWxpbmU+CiAgICAgICAgICAgICAgPGVsLXRpbWVsaW5lLWl0ZW0KICAgICAgICAgICAgICAgIGNvbG9yPSIjM2Q4MmZlIgogICAgICAgICAgICAgICAgc2l6ZT0ibGFyZ2UiCiAgICAgICAgICAgICAgICB2LWZvcj0iKGFjdGl2aXR5LCBpbmRleCkgaW4gZGV2aWNlRGV0YWlscy5zdG9ja0luT3V0TGlzdCIKICAgICAgICAgICAgICAgIDprZXk9ImluZGV4IgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9ImRpc3BsYXk6IGZsZXg7YWxpZ24taXRlbXM6IGNlbnRlcjsiPgogICAgICAgICAgICAgICAgICA8cCBzdHlsZT0ibWFyZ2luOjAgMjBweCAxNHB4IDA7d2lkdGg6IDcycHg7Ij4KICAgICAgICAgICAgICAgICAgICB7eyBhY3Rpdml0eS50aW1lLnNsaWNlKDAsIDEwKSB9fQogICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgIDxwIHN0eWxlPSJtYXJnaW4tdG9wOjAiIHYtaHRtbD0iYWN0aXZpdHkuZGVzY3JpYmUiPjwvcD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPHAKICAgICAgICAgICAgICAgICAgdi1pZj0iYWN0aXZpdHkubm90ZSAhPT0gJyciCiAgICAgICAgICAgICAgICAgIHN0eWxlPSJtYXJnaW46IDA7Y29sb3I6IzkxOTA5MDttYXJnaW4tbGVmdDo5MnB4O3dvcmQtYnJlYWs6IGJyZWFrLWFsbDt3b3JkLXdyYXA6IGJyZWFrLXdvcmQiCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIHt7IGFjdGl2aXR5Lm5vdGUgfX0KICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICA8L2VsLXRpbWVsaW5lLWl0ZW0+CiAgICAgICAgICAgIDwvZWwtdGltZWxpbmU+CiAgICAgICAgICA8L2VsLXRhYi1wYW5lPgogICAgICAgIDwvZWwtdGFicz4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgc2xvdD0iZm9vdGVyIj4KICAgICAgICA8ZWwtYnV0dG9uIEBjbGljaz0iZGlhbG9nRGV2aWNlRGV0YWlsc1Zpc2libGUgPSBmYWxzZSIKICAgICAgICAgID7lj5Yg5raIPC9lbC1idXR0b24KICAgICAgICA+CiAgICAgICAgPGVsLWJ1dHRvbiB0eXBlPSJwcmltYXJ5IiBAY2xpY2s9ImRpYWxvZ0RldmljZURldGFpbHNWaXNpYmxlID0gZmFsc2UiCiAgICAgICAgICA+56GuIOWumjwvZWwtYnV0dG9uCiAgICAgICAgPgogICAgICA8L2Rpdj4KICAgIDwvZWwtZGlhbG9nPgogICAgPGVsLWRpYWxvZwogICAgICB0aXRsZT0i6K6+6K6h56i/5YiX6KGoIgogICAgICA6dmlzaWJsZS5zeW5jPSJjaG9vc2VpbWdzaG93IgogICAgICA6YXBwZW5kLXRvLWJvZHk9ImZhbHNlIgogICAgICA6Y2xvc2Utb24tcHJlc3MtZXNjYXBlPSJmYWxzZSIKICAgICAgOmNsb3NlLW9uLWNsaWNrLW1vZGFsPSJmYWxzZSIKICAgICAgOmJlZm9yZS1jbG9zZT0iaGFuZGxlQ2xvc2UiCiAgICAgIDptb2RhbC1hcHBlbmQtdG8tYm9keT0iZmFsc2UiCiAgICAgIHdpZHRoPSI0MCUiCiAgICA+CiAgICAgIDxkaXYgc3R5bGU9ImRpc3BsYXk6ZmxleDtwYWRkaW5nOiAzMHB4IDIwcHggMCAyMHB4OyI+CiAgICAgICAgPGVsLWlucHV0CiAgICAgICAgICBwbGFjZWhvbGRlcj0i6K+36L6T5YWl6K6+6K6h5biI77yM6K6+6K6h5ZCN56ewIgogICAgICAgICAgdi1tb2RlbD0iZGVzaWduTGlzdEtleXdvcmQiCiAgICAgICAgPjwvZWwtaW5wdXQKICAgICAgICA+PGVsLWJ1dHRvbgogICAgICAgICAgc3R5bGU9Im1hcmdpbi1sZWZ0OiAxMHB4OyIKICAgICAgICAgIEBjbGljaz0iZ2V0cHJvZHVjaWJsZURlc2lnbkxpc3QiCiAgICAgICAgICA+5pCc57SiPC9lbC1idXR0b24KICAgICAgICA+CiAgICAgIDwvZGl2PgogICAgICA8ZGl2IHN0eWxlPSJwYWRkaW5nOiAyMHB4OyI+CiAgICAgICAgPGVsLXJhZGlvLWdyb3VwCiAgICAgICAgICB2LW1vZGVsPSJzdGF0dXNEZXNpZ24iCiAgICAgICAgICBAY2hhbmdlPSJnZXRwcm9kdWNpYmxlRGVzaWduTGlzdCIKICAgICAgICA+CiAgICAgICAgICA8ZWwtcmFkaW8gbGFiZWw9IjAiPuWFqOmDqDwvZWwtcmFkaW8+CiAgICAgICAgICA8ZWwtcmFkaW8gbGFiZWw9IjEiPuacqueUn+S6pzwvZWwtcmFkaW8+CiAgICAgICAgPC9lbC1yYWRpby1ncm91cD4KICAgICAgPC9kaXY+CiAgICAgIDxlbC10YWJsZQogICAgICAgIDpkYXRhPSJwcm9kdWNpYmxlRGVzaWduTGlzdCIKICAgICAgICBzdHlsZT0id2lkdGg6IDkwJTttYXJnaW46YXV0bzsiCiAgICAgICAgaGlnaGxpZ2h0LWN1cnJlbnQtcm93CiAgICAgICAgYm9yZGVyCiAgICAgICAgQGN1cnJlbnQtY2hhbmdlPSJjaG9vc2VpbWdsaXN0IgogICAgICAgIHJlZj0ibXVsdGlwbGVUYWJsZURlc2lnbiIKICAgICAgPgogICAgICAgIDxlbC10YWJsZS1jb2x1bW4gcHJvcD0ibmFtZSIgbGFiZWw9IuiuvuiuoeWQjeensCI+IDwvZWwtdGFibGUtY29sdW1uPgogICAgICAgIDxlbC10YWJsZS1jb2x1bW4gcHJvcD0iZGVzaWduZXJOYW1lIiBsYWJlbD0i6K6+6K6h5biI5ZCN56ewIj4KICAgICAgICA8L2VsLXRhYmxlLWNvbHVtbj4KICAgICAgICA8ZWwtdGFibGUtY29sdW1uIHByb3A9ImRlc2lnbklkIiBsYWJlbD0i6K6+6K6h5Zu+54mHIj4KICAgICAgICAgIDx0ZW1wbGF0ZSBzbG90LXNjb3BlPSJzY29wZSI+CiAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICB2LWltYWdlLXByZXZpZXcKICAgICAgICAgICAgICA6c3JjPSJpbWcgKyAnL2ZpbGUvJyArIGZpcnN0aW1nKHNjb3BlLnJvdy5pbWcpIgogICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwcHg7aGVpZ2h0OiAxMDBweDtvYmplY3QtZml0OiBjb3ZlcjsiCiAgICAgICAgICAgIC8+CiAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgIDwvZWwtdGFibGUtY29sdW1uPgogICAgICA8L2VsLXRhYmxlPgogICAgICA8ZGl2IHNsb3Q9ImZvb3RlciI+CiAgICAgICAgPGVsLWJ1dHRvbiB0eXBlPSJwcmltYXJ5IiBAY2xpY2s9ImNob29zZWltZ3Nob3cgPSBmYWxzZSIKICAgICAgICAgID7noa4g5a6aPC9lbC1idXR0b24KICAgICAgICA+CiAgICAgIDwvZGl2PgogICAgPC9lbC1kaWFsb2c+CiAgPC9kaXY+CjwvZGl2Pgo="},null]}