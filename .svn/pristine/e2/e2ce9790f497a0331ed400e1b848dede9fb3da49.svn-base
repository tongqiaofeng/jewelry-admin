{"remainingRequest":"G:\\aa-tong\\my-project\\jewelry-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!G:\\aa-tong\\my-project\\jewelry-admin\\src\\components\\Stock-management.vue?vue&type=template&id=e5441470&scoped=true&","dependencies":[{"path":"G:\\aa-tong\\my-project\\jewelry-admin\\src\\components\\Stock-management.vue","mtime":1637649554365},{"path":"G:\\aa-tong\\my-project\\jewelry-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\aa-tong\\my-project\\jewelry-admin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"G:\\aa-tong\\my-project\\jewelry-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\aa-tong\\my-project\\jewelry-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}