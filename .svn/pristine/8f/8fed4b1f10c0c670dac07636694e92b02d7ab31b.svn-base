{"remainingRequest":"G:\\aa-tong\\my-project\\jewelry-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!G:\\aa-tong\\my-project\\jewelry-admin\\src\\components\\Finished-stock-inquiry.vue?vue&type=template&id=665e38b6&scoped=true&","dependencies":[{"path":"G:\\aa-tong\\my-project\\jewelry-admin\\src\\components\\Finished-stock-inquiry.vue","mtime":1643350824669},{"path":"G:\\aa-tong\\my-project\\jewelry-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\aa-tong\\my-project\\jewelry-admin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"G:\\aa-tong\\my-project\\jewelry-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\aa-tong\\my-project\\jewelry-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:
<div class="stock-inquiry-container" id="stock-inquiry">
  <!-- 库存查询 -->
  <div class="stock-inquiry-pc">
    <div v-show="siteSel == 0">
      <!-- 头部查询条件 -->
      <div class="stock-inquiry-top" id="stockWarehouseCheck">
        <el-form :inline="true" class="demo-form-inline">
          <el-form-item label="状态：">
            <el-select
              v-model="state"
              placeholder="请选择"
              style="width: 150px;"
              :popper-append-to-body="false"
            >
              <el-option
                v-for="flag in stateList"
                :key="flag.id"
                :label="flag.name"
                :value="flag.id"
              ></el-option>
            </el-select>
          </el-form-item>
          <el-form-item label="仓库/加工厂：">
            <el-select
              v-model="storageIdList"
              multiple
              placeholder="可多选"
              style="width: 150px;"
              @change="storageChange"
              :popper-append-to-body="false"
            >
              <!-- //存在出库记录 -->
              <el-option
                v-for="item in storageList"
                v-show="item.isOwn != 0"
                :key="item.id"
                :label="item.name"
                :value="item.id"
              ></el-option>
            </el-select>
          </el-form-item>
          <el-form-item label="入库时间：">
            <el-date-picker
              v-model="time"
              type="daterange"
              @change="timechange"
              range-separator="至"
              start-placeholder="开始日期"
              end-placeholder="结束日期"
              format="yyyy-MM-dd"
              value-format="yyyy-MM-dd"
            >
            </el-date-picker>
          </el-form-item>
          <el-form-item>
            <div style="display: flex;">
              <el-input
                style="width: 350px;"
                v-model="keyword"
                placeholder="可输入产品名称、设计名称、统一编号、备注进行搜索"
                clearable
              >
              </el-input>
              <el-button
                style="margin-left: 10px;"
                type="primary"
                @click="warehouseKeywordCheck"
                >查 询</el-button
              >
            </div>
          </el-form-item>
        </el-form>
        <div class="top-right">
          <el-tooltip
            class="item"
            style="margin-left: 20px;height: 40px;"
            effect="dark"
            content="图表切换"
            placement="bottom-end"
          >
            <img
              :src="stockInquiryParam.sel == 1 ? img1 : img2"
              @click="listOrChart"
              style="cursor:pointer;"
            />
          </el-tooltip>
        </div>
      </div>
      <div class="stock-inquiry-main">
        <!-- 图形 -->
        <div v-if="stockInquiryParam.sel == 1" class="svg-style">
          <div style="text-align: center;" v-if="stockInList.length == 0">
            <p>{{ stockInMsg }}</p>
          </div>
          <div v-else class="border-every-style">
            <div
              v-for="(warehouse, index) in stockInList"
              :key="index"
              style="display: flex;margin-top: 20px;"
            >
              <div
                class="border-style"
                @click="imgInquiryDetails(warehouse.productList, index)"
              >
                {{ warehouse.storageName }}
              </div>
              <div
                class="every-style"
                v-if="index < stockInList.length - 1"
              ></div>
            </div>
          </div>
        </div>
        <!-- 表格 -->
        <div v-if="stockInquiryParam.sel == 0" style="padding: 20px;">
          <div style="text-align: center;" v-if="stockInList.length == 0">
            <p>{{ stockInMsg }}</p>
          </div>
          <div v-else>
            <div v-for="(every, index) in stockListPage" :key="index">
              <div style="display: flex;text-align: left;">
                <p style="font-size: 18px;font-weight: bold;">
                  仓库/加工厂： {{ every.storageName }}
                </p>
                <p style="margin: 24px 0 0 20px;font-size: 13px;color: #bbb;">
                  数量：
                  {{ every.productList.length }}
                </p>
              </div>
              <el-table
                style="width: 100%;"
                ref="multipleTable"
                :data="every.productList"
                :row-key="getRowKeys"
                tooltip-effect="dark"
                border
                highlight-current-row
                @row-click="checkproductDetails"
                @row-dblclick="dblProductDetails"
              >
                <el-table-column label="出库">
                  <template>
                    <div>
                      <span style="cursor: pointer;color: #3d81fd;"
                        >出库</span
                      >
                    </div>
                  </template>
                </el-table-column>
                <el-table-column prop="materialName" label="成品图">
                  <template slot-scope="scope">
                    <div>
                      <img
                        :src="img + '/file/' + firstimg(scope.row.img)"
                        alt=""
                        style="width: 100%;"
                      />
                    </div>
                  </template>
                </el-table-column>
                <el-table-column prop="productNumber" label="统一编号">
                </el-table-column>
                <el-table-column label="裸石成本" prop="costPrice">
                  <template slot-scope="scope">
                    <div>
                      <span>{{
                        scope.row.costPrice + " " + scope.row.currency
                      }}</span>
                    </div>
                  </template>
                </el-table-column>
                <el-table-column prop="processCost" label="加工费">
                  <template slot-scope="scope">
                    <div>
                      <span>{{ scope.row.processCost + " CNY" }}</span>
                    </div>
                  </template>
                </el-table-column>
                <el-table-column label="最低销售价" prop="lowestSellPrice">
                  <template slot-scope="scope">
                    <div>
                      <span>{{ scope.row.lowestSellPrice + " CNY" }}</span>
                    </div>
                  </template>
                </el-table-column>
                <el-table-column label="建议销售价" prop="adviseSellPrice">
                  <template slot-scope="scope">
                    <div>
                      <span>{{ scope.row.adviseSellPrice + " CNY" }}</span>
                    </div>
                  </template>
                </el-table-column>
                <el-table-column
                  label="建议批发价"
                  prop="adviceWholesalePrice"
                >
                  <template slot-scope="scope">
                    <div>
                      <span>{{
                        scope.row.adviceWholesalePrice + " CNY"
                      }}</span>
                    </div>
                  </template>
                </el-table-column>
                <el-table-column label="标签价" prop="tagPrice">
                  <template slot-scope="scope">
                    <div>
                      <span>{{ scope.row.tagPrice + " CNY" }}</span>
                    </div>
                  </template>
                </el-table-column>
                <el-table-column prop="saleCommission" label="销售提成">
                  <template slot-scope="scope">
                    <div>
                      <span>{{ scope.row.saleCommission + " CNY" }}</span>
                    </div>
                  </template>
                </el-table-column>
                <el-table-column label="出库记录" prop="isOut">
                  <template slot-scope="scope">
                    <div>
                      <span v-if="scope.row.isOut == 0">无出库记录</span>
                      <span v-else>存在出库记录</span>
                    </div>
                  </template>
                </el-table-column>
                <el-table-column label="状态">
                  <template slot-scope="scope">
                    <div v-for="(e, index) in stateList" :key="index">
                      <span
                        v-show="scope.row.state == e.id && e.name != '全部'"
                        >{{ e.name }}</span
                      >
                    </div>
                  </template>
                </el-table-column>
                <el-table-column prop="note" label="备注"> </el-table-column>
              </el-table>
            </div>
            <div style="width: 100%;height: 50px;">
              <div style="margin:15px 0;position:absolute;right:6%;">
                <el-pagination
                  @current-change="handleCurrentChange"
                  :current-page="page"
                  :page-size="1"
                  layout="total, prev, pager, next, jumper"
                  :total="total"
                >
                </el-pagination>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <!-- 图形--》表格 -->
    <div v-show="siteSel == 1">
      <div
        style="width: 60px;margin-bottom: 20px;display: flex;justify-content:space-between;cursor: pointer;"
        @click="backToImg"
      >
        <img src="../assets/imgs/home/goback.png" style="height: 21px;" />
        <p style="margin: 0;">返回</p>
      </div>
      <el-table
        style="width: 100%;"
        ref="multipleTableSel"
        :data="imgMaterialList"
        :row-key="getRowKeys"
        tooltip-effect="dark"
        border
        highlight-current-row
        @row-click="checkproductDetails"
        @row-dblclick="dblProductDetails"
      >
        <el-table-column label="出库">
          <template>
            <div>
              <span style="cursor: pointer;color: #3d81fd;">出库</span>
            </div>
          </template>
        </el-table-column>
        <el-table-column prop="materialName" label="成品图">
          <template slot-scope="scope">
            <div>
              <img
                :src="img + '/file/' + firstimg(scope.row.img)"
                alt=""
                style="width: 100%;"
              />
            </div>
          </template>
        </el-table-column>
        <el-table-column prop="productNumber" label="统一编号">
        </el-table-column>
        <el-table-column label="裸石成本" prop="costPrice">
          <template slot-scope="scope">
            <div>
              <span>{{
                scope.row.costPrice + " " + scope.row.currency
              }}</span>
            </div>
          </template>
        </el-table-column>
        <el-table-column prop="processCost" label="加工费">
          <template slot-scope="scope">
            <div>
              <span>{{ scope.row.processCost + " CNY" }}</span>
            </div>
          </template>
        </el-table-column>
        <el-table-column label="最低销售价" prop="lowestSellPrice">
          <template slot-scope="scope">
            <div>
              <span>{{ scope.row.lowestSellPrice + " CNY" }}</span>
            </div>
          </template>
        </el-table-column>
        <el-table-column label="建议销售价" prop="adviseSellPrice">
          <template slot-scope="scope">
            <div>
              <span>{{ scope.row.adviseSellPrice + " CNY" }}</span>
            </div>
          </template>
        </el-table-column>
        <el-table-column label="建议批发价" prop="adviceWholesalePrice">
          <template slot-scope="scope">
            <div>
              <span>{{ scope.row.adviceWholesalePrice + " CNY" }}</span>
            </div>
          </template>
        </el-table-column>
        <el-table-column label="标签价" prop="tagPrice">
          <template slot-scope="scope">
            <div>
              <span>{{ scope.row.tagPrice + " CNY" }}</span>
            </div>
          </template>
        </el-table-column>

        <el-table-column prop="saleCommission" label="销售提成">
          <template slot-scope="scope">
            <div>
              <span>{{ scope.row.saleCommission + " CNY" }}</span>
            </div>
          </template>
        </el-table-column>
        <el-table-column label="出库记录" prop="isOut">
          <template slot-scope="scope">
            <div>
              <span v-if="scope.row.isOut == 0">无出库记录</span>
              <span v-else>存在出库记录</span>
            </div>
          </template>
        </el-table-column>
        <el-table-column label="状态">
          <template slot-scope="scope">
            <div v-for="(e, index) in stateList" :key="index">
              <span v-show="scope.row.state == e.id && e.name != '全部'">{{
                e.name
              }}</span>
            </div>
          </template>
        </el-table-column>
        <el-table-column prop="note" label="备注"> </el-table-column>
      </el-table>
    </div>
    <div v-show="siteSel == 2" style="padding: 20px;background-color: #fff;">
      <div
        style="width: 60px;margin-bottom: 20px;display: flex;justify-content:space-between;cursor: pointer;"
        @click="backToList"
      >
        <img src="../assets/imgs/home/goback.png" style="height: 21px;" />
        <p style="margin: 0;">返回</p>
      </div>
      <div class="add-left">
        <p class="title-font">待出库清单</p>
        <el-table
          :data="deliveryData.stockInIdList"
          style="width: 100%"
          border
          id="left"
        >
          <el-table-column prop="designName" label="成品图片">
            <template slot-scope="scope">
              <div>
                <span v-if="scope.row.img == '' || scope.row.img == null"
                  >---</span
                >
                <img
                  v-else
                  :src="img + '/file/' + scope.row.img"
                  width="50px"
                  height="50px"
                />
              </div>
            </template>
          </el-table-column>
          <el-table-column prop="productNumber" label="统一编号">
          </el-table-column>
        </el-table>

        <el-form
          style="margin-top: 20px;"
          :model="deliveryData"
          :rules="deliveryRules"
          ref="deliveryForm"
          label-width="160px"
        >
          <el-form-item label="出库类型：" prop="type">
            <el-select
              v-model="deliveryData.type"
              class="input-style"
              @change="typeChange"
              :popper-append-to-body="false"
            >
              <el-option
                v-for="item in deliveryType"
                :key="item.id"
                :label="item.name"
                :value="item.id"
              >
              </el-option>
            </el-select>
          </el-form-item>
          <el-form-item
            label="目的地："
            prop="endStorageId"
            v-if="deliveryData.type == 0"
          >
            <el-select
              v-model="deliveryData.endStorageId"
              placeholder="请选择目的地"
              class="input-style"
              :popper-append-to-body="false"
            >
              <el-option
                v-for="item in warehouseFilterList"
                :key="item.id"
                :label="item.name"
                :value="item.id"
              >
              </el-option>
            </el-select>
          </el-form-item>
          <el-form-item
            label="销售员："
            prop="solder"
            v-if="deliveryData.type == 1"
          >
            <el-input
              v-model="deliveryData.solder"
              placeholder="请输入销售员"
              clearable
              class="input-style"
            ></el-input>
          </el-form-item>
          <el-form-item
            label="组："
            prop="group"
            v-if="deliveryData.type == 1"
          >
            <el-input
              v-model="deliveryData.group"
              placeholder="请输入"
              clearable
              class="input-style"
            ></el-input>
          </el-form-item>
          <el-form-item
            label="顾客姓名："
            prop="customer"
            v-if="deliveryData.type == 1"
          >
            <el-input
              v-model="deliveryData.customer"
              placeholder="请输入顾客姓名"
              clearable
              class="input-style"
            ></el-input>
          </el-form-item>
          <el-form-item
            label="出售币种："
            v-if="deliveryData.type == 1"
            prop="saleCurrency"
          >
            <el-radio-group
              v-model="deliveryData.saleCurrency"
              @change="currencyChange"
            >
              <el-radio label="CNY">CNY</el-radio>
              <el-radio label="EUR">EUR</el-radio>
              <el-radio label="USD">USD</el-radio>
              <el-radio label="HKD">HKD</el-radio>
            </el-radio-group>
          </el-form-item>
          <el-form-item
            label="查找用户："
            prop="user"
            v-if="
              deliveryData.type == 1 && deliveryData.saleCurrency == 'CNY'
            "
          >
            <el-select
              v-model="deliveryData.user"
              filterable
              remote
              reserve-keyword
              placeholder="可输入邮箱/手机号查找客户"
              :remote-method="remoteMethod"
              :loading="loading"
              class="input-style"
            >
              <el-option
                v-for="item in userList"
                :key="item.userId"
                :label="item.username"
                :value="item.userId"
                @click.native="userChange(item)"
              >
              </el-option>
            </el-select>
          </el-form-item>
          <el-form-item
            label="总积分："
            v-if="
              deliveryData.type == 1 && deliveryData.saleCurrency == 'CNY'
            "
          >
            <el-input
              v-model="integralTotal"
              readonly
              class="input-style"
            ></el-input>
          </el-form-item>
          <el-form-item
            label="抵扣积分："
            prop="integral"
            v-if="
              deliveryData.type == 1 && deliveryData.saleCurrency == 'CNY'
            "
          >
            <el-input
              @input="integralInput"
              v-model="deliveryData.integral"
              placeholder="请输入"
              clearable
              class="input-style"
            ></el-input>
          </el-form-item>
          <el-form-item
            label="出售金额："
            prop="saleMoney"
            v-if="deliveryData.type == 1"
          >
            <el-input
              @input="currencyChange"
              @change="totalChange"
              v-model="deliveryData.saleMoney"
              placeholder="请输入出售金额"
              clearable
              class="input-style"
            ></el-input>
          </el-form-item>
          <el-form-item
            label="外币兑换人民币汇率："
            prop="total"
            v-if="deliveryData.type == 1"
          >
            <el-input
              @input="totalCnRateChange"
              v-model="deliveryData.totalToCnRate"
              placeholder="请输入"
              clearable
              class="input-style"
            ></el-input>
          </el-form-item>
          <el-form-item
            label="出售人民币金额："
            prop="total"
            v-if="deliveryData.type == 1"
          >
            <el-input
              v-model="deliveryData.sellTotalCnPrice"
              placeholder="请输入"
              clearable
              class="input-style"
              @change="totalChange"
            ></el-input>
          </el-form-item>
          <el-form-item
            label="港币兑换人民币汇率："
            prop="total"
            v-if="deliveryData.type == 1"
          >
            <el-input
              @input="totalHkRateChange"
              v-model="deliveryData.totalToHkRate"
              placeholder="请输入"
              clearable
              class="input-style"
            ></el-input>
          </el-form-item>
          <el-form-item
            label="出售港币金额："
            prop="total"
            v-if="deliveryData.type == 1"
          >
            <el-input
              v-model="deliveryData.sellTotalHkPrice"
              placeholder="请输入"
              clearable
              class="input-style"
              @change="totalChange"
            ></el-input>
          </el-form-item>
          <el-form-item
            label="销售发票号："
            prop="total"
            v-if="deliveryData.type == 1"
          >
            <el-input
              v-model="deliveryData.sellBillNumber"
              placeholder="请输入"
              clearable
              class="input-style"
            ></el-input>
          </el-form-item>
          <el-form-item label="出库时间：" prop="stockOutTime">
            <el-date-picker
              class="input-style"
              v-model="deliveryData.stockOutTime"
              type="date"
              placeholder="请选择出库时间"
              value-format="yyyy-MM-dd"
              format="yyyy-MM-dd"
            >
            </el-date-picker>
          </el-form-item>
          <el-form-item label="领货人：" prop="receiver">
            <el-input
              class="input-style"
              v-model="deliveryData.receiver"
            ></el-input>
          </el-form-item>
          <el-form-item label="备注：" prop="note" id="noteStyle">
            <el-input
              type="textarea"
              placeholder="请输入备注信息"
              v-model="deliveryData.note"
            ></el-input>
          </el-form-item>
        </el-form>
        <div style="margin-top: 80px;text-align: right;">
          <el-button
            style="width: 120px;"
            type="primary"
            @click="stockInSubmit('deliveryForm')"
            v-preventClick
            >提 交</el-button
          >
        </div>
      </div>
    </div>
    <el-dialog
      title="成品信息"
      v-if="dialogDeviceDetailVisible"
      :visible.sync="dialogDeviceDetailVisible"
      :close-on-press-escape="false"
      :close-on-click-modal="false"
      :modal-append-to-body="false"
      :append-to-body="false"
    >
      <div id="invenSome">
        <el-tabs style="margin-top: 20px;" v-model="activeStockName">
          <el-tab-pane label="成品信息" name="first">
            <div style="display: flex;justify-content: space-between;">
              <p class="font-title-style" style="margin-top: 0;">
                成品信息
              </p>
              <div style="padding-top: 6px;">
                <img
                  style="cursor: pointer;"
                  title="修改成品信息"
                  src="../assets/imgs/home/update.png"
                  @click="updateDevice"
                />
              </div>
            </div>
            <div class="font-div">
              <div class="div-one">
                <div
                  class="one-left"
                  :style="{
                    color: isUpdate == 0 ? '#606266' : '#3d82fe',
                    fontWeight: isUpdate == 0 ? 'normal' : 'bold',
                  }"
                >
                  成品名称
                </div>
                <div class="one-right">
                  <el-input
                    v-model="deviceDetail.productName"
                    :readonly="isUpdate == 0 ? true : false"
                  >
                  </el-input>
                </div>
              </div>
              <div class="div-one">
                <div
                  class="one-left"
                  :style="{
                    color: isUpdate == 0 ? '#606266' : '#3d82fe',
                    fontWeight: isUpdate == 0 ? 'normal' : 'bold',
                  }"
                >
                  标签
                </div>
                <div class="one-right">
                  <el-select
                    style="width: 100%;"
                    v-model="labelSelList"
                    :disabled="isUpdate == 0 ? true : false"
                    placeholder="可多选"
                    multiple
                  >
                    <el-option
                      v-for="item in productLabelList"
                      :key="item"
                      :label="item"
                      :value="item"
                    >
                    </el-option>
                  </el-select>
                </div>
              </div>
              <div class="div-one">
                <div
                  class="one-left"
                  :style="{
                    color: isUpdate == 0 ? '#606266' : '#3d82fe',
                    fontWeight: isUpdate == 0 ? 'normal' : 'bold',
                  }"
                >
                  设计名称：
                </div>
                <div class="one-right">
                  <el-input
                    @focus="chooseimgshow = true"
                    v-model="deviceDetail.designName"
                    :readonly="isUpdate == 0 ? true : false"
                  >
                  </el-input>
                </div>
              </div>

              <div class="div-one">
                <div
                  class="one-left"
                  :style="{
                    color: '#606266',
                    fontWeight: 'normal',
                  }"
                >
                  设计师：
                </div>
                <div class="one-right">
                  <el-input v-model="deviceDetail.designerName" readonly>
                  </el-input>
                </div>
              </div>
              <div class="div-one">
                <div
                  class="one-left"
                  :style="{
                    color:
                      isUpdate == 0
                        ? '#606266'
                        : deviceDetail.isUpdate == 0
                        ? '#3d82fe'
                        : '#606266',
                    fontWeight:
                      isUpdate == 0
                        ? 'normal'
                        : deviceDetail.isUpdate == 0
                        ? 'bold'
                        : 'normal',
                  }"
                >
                  唯一编号
                </div>
                <div class="one-right">
                  <el-input
                    v-model="deviceDetail.productNumber"
                    :readonly="
                      isUpdate == 0
                        ? true
                        : deviceDetail.isUpdate == 0
                        ? false
                        : true
                    "
                  >
                  </el-input>
                </div>
              </div>
              <div class="div-one">
                <div
                  class="one-left"
                  :style="{
                    color: isUpdate == 0 ? '#606266' : '#3d82fe',
                    fontWeight: isUpdate == 0 ? 'normal' : 'bold',
                  }"
                >
                  参数
                </div>
                <div class="one-right">
                  <el-input
                    type="textarea"
                    v-model="deviceDetail.params"
                    :readonly="isUpdate == 0 ? true : false"
                  >
                  </el-input>
                </div>
              </div>
              <div class="div-one">
                <div
                  class="one-left"
                  :style="{
                    color: isUpdate == 0 ? '#606266' : '#3d82fe',
                    fontWeight: isUpdate == 0 ? 'normal' : 'bold',
                  }"
                >
                  证书编号
                </div>
                <div class="one-right">
                  <el-input
                    v-model="deviceDetail.certificateNumber"
                    :readonly="isUpdate == 0 ? true : false"
                  >
                  </el-input>
                </div>
              </div>
            </div>
            <p class="font-title-style">图片信息</p>
            <div>
              <p
                :style="{
                  color: isUpdate == 0 ? '#606266' : '#3d82fe',
                  fontWeight: isUpdate == 0 ? 'normal' : 'bold',
                  margin: 0,
                  width: '90px',
                }"
              >
                成品图片：
              </p>
              <div
                class="upload-imgs"
                v-if="deviceDetail.img != '' || isUpdate == 1"
              >
                <div class="add" v-if="isUpdate == 1">
                  <form enctype="multipart/form-data" style="width: 100px;">
                    <input
                      @change="inputChange($event)"
                      multiple
                      type="file"
                      name="img"
                      accept="image/*"
                      class="inputUpload"
                    />
                    <i class="el-icon-plus addIcon"></i>
                  </form>
                </div>
                <div
                  style="display:flex;position:relative;flex-wrap: wrap;"
                  id="delImg"
                  class="delImg"
                >
                  <div
                    v-for="(imgurl, index) of productimgList"
                    :key="index"
                    style="margin-left:10px;position:relative;"
                    v-dragging="{
                      item: imgurl,
                      list: productimgList,
                      group: 'productimgList',
                    }"
                  >
                    <span
                      v-if="imgurl !== '' && imgurl !== null && isUpdate == 1"
                      class="spanStyle"
                      @click="delImage(index)"
                      >x</span
                    >
                    <img
                      v-if="imgurl !== '' && imgurl !== null"
                      :src="img + '/file/' + imgurl"
                      width="100px"
                      height="100px"
                      style="border-radius:5px;object-fit:cover;"
                    />
                  </div>
                </div>
              </div>
              <p
                v-if="deviceDetail.img == '' && isUpdate == 0"
                style="margin-left: 10px;font-size: 13px;"
              >
                无成品图片
              </p>
            </div>
            <div>
              <p
                :style="{
                  color: isUpdate == 0 ? '#606266' : '#3d82fe',
                  fontWeight: isUpdate == 0 ? 'normal' : 'bold',
                  margin: 0,
                  width: '90px',
                }"
              >
                详情图片：
              </p>
              <div
                class="upload-imgs"
                v-if="deviceDetail.detailImg != '' || isUpdate == 1"
              >
                <div class="add" v-if="isUpdate == 1">
                  <form enctype="multipart/form-data" style="width: 100px;">
                    <input
                      @change="inputChange2($event)"
                      multiple
                      type="file"
                      name="img"
                      accept="image/*"
                      class="inputUpload"
                    />
                    <i class="el-icon-plus addIcon"></i>
                  </form>
                </div>
                <div
                  style="display:flex;position:relative;flex-wrap: wrap;"
                  id="delImg"
                  class="delImg"
                >
                  <div
                    v-for="(imgurl, index) of detailImgList"
                    :key="index"
                    style="margin-left:10px;position:relative;"
                    v-dragging="{
                      item: imgurl,
                      list: detailImgList,
                      group: 'detailImgList',
                    }"
                  >
                    <span
                      v-if="imgurl !== '' && imgurl !== null && isUpdate == 1"
                      class="spanStyle"
                      @click="delImage2(index)"
                      >x</span
                    >
                    <img
                      v-if="imgurl !== '' && imgurl !== null"
                      :src="img + '/file/' + imgurl"
                      width="100px"
                      height="100px"
                      style="border-radius:5px;object-fit:cover;"
                    />
                  </div>
                </div>
              </div>
              <p
                v-if="deviceDetail.detailImg == '' && isUpdate == 0"
                style="margin-left: 10px;font-size: 13px;"
              >
                无详情图片
              </p>
            </div>
            <div>
              <p
                :style="{
                  color: '#606266',
                  fontWeight: 'normal',
                  margin: 0,
                  width: '90px',
                }"
              >
                设计图片：
              </p>
              <div class="upload-imgs" v-if="deviceDetail.designImg != ''">
                <div
                  style="display:flex;position:relative;flex-wrap: wrap;"
                  id="delImg"
                  class="delImg"
                >
                  <div
                    v-for="(imgurl, index) of imgFillter(
                      deviceDetail.designImg
                    )"
                    :key="index"
                    style="margin-left:10px;position:relative;"
                  >
                    <img
                      v-if="imgurl !== '' && imgurl !== null"
                      :src="imgurl"
                      width="100px"
                      height="100px"
                      style="border-radius:5px;object-fit:cover;"
                    />
                  </div>
                </div>
              </div>
              <p v-else style="margin-left: 10px;font-size: 13px;">
                无设计图片
              </p>
            </div>
            <p class="font-title-style">原材料信息</p>
            <el-table
              style="width: 100%;"
              :data="deviceDetail.materialList"
              tooltip-effect="dark"
              border
              highlight-current-row
              @row-dblclick="checkDeviceDetails"
            >
              <el-table-column prop="name" label="名称"> </el-table-column>
              <el-table-column prop="number" label="数量"> </el-table-column>
              <el-table-column label="查看详情">
                <template>
                  <div>
                    <span title="查看材料信息" class="look">查看</span>
                  </div>
                </template>
              </el-table-column>
            </el-table>
            <p class="font-title-style">备注信息</p>
            <div class="font-div">
              <div class="div-one-note">
                <div
                  class="one-left"
                  :style="{
                    color: isUpdate == 0 ? '#606266' : '#3d82fe',
                    fontWeight: isUpdate == 0 ? 'normal' : 'bold',
                  }"
                >
                  产品备注
                </div>
                <div class="one-right">
                  <el-input
                    type="textarea"
                    v-model="deviceDetail.note"
                    :readonly="isUpdate == 0 ? true : false"
                  >
                  </el-input>
                </div>
              </div>
            </div>
          </el-tab-pane>
          <el-tab-pane label="价格信息" name="fourth">
            <div style="display: flex;justify-content: space-between;">
              <p class="font-title-style" style="margin-top: 0;">
                价格信息
              </p>
              <div style="padding-top: 6px;">
                <img
                  style="cursor: pointer;"
                  title="修改价格信息"
                  src="../assets/imgs/home/update.png"
                  @click="updateDevice"
                />
              </div>
            </div>
            <div class="font-div">
              <div class="div-one">
                <div
                  class="one-left"
                  :style="{
                    color: isUpdate == 0 ? '#606266' : '#3d82fe',
                    fontWeight: isUpdate == 0 ? 'normal' : 'bold',
                  }"
                >
                  裸石成本币种
                </div>
                <div class="one-right">
                  <el-radio-group
                    @change="currencyCostChange"
                    v-model="deviceDetail.currency"
                    :disabled="isUpdate == 0 ? true : false"
                  >
                    <el-radio label="CNY">CNY</el-radio>
                    <el-radio label="EUR">EUR</el-radio>
                    <el-radio label="USD">USD</el-radio>
                    <el-radio label="HKD">HKD</el-radio>
                  </el-radio-group>
                </div>
              </div>
              <div class="div-one">
                <div
                  class="one-left"
                  :style="{
                    color: isUpdate == 0 ? '#606266' : '#3d82fe',
                    fontWeight: isUpdate == 0 ? 'normal' : 'bold',
                  }"
                >
                  裸石成本
                </div>
                <div class="one-right">
                  <el-input
                    @input="currencyCostChange"
                    :readonly="isUpdate == 0 ? true : false"
                    v-model="deviceDetail.costPrice"
                    clearable=""
                  ></el-input>
                </div>
              </div>
              <div class="div-one">
                <div
                  class="one-left"
                  :style="{
                    color: isUpdate == 0 ? '#606266' : '#3d82fe',
                    fontWeight: isUpdate == 0 ? 'normal' : 'bold',
                  }"
                >
                  加工费(CNY)
                </div>
                <div class="one-right">
                  <el-input
                    @input="totalCostCnRateChange"
                    :readonly="isUpdate == 0 ? true : false"
                    v-model="deviceDetail.processCost"
                    clearable
                  >
                  </el-input>
                </div>
              </div>
              <div class="div-one">
                <div
                  class="one-left"
                  :style="{
                    color: isUpdate == 0 ? '#606266' : '#3d82fe',
                    fontWeight: isUpdate == 0 ? 'normal' : 'bold',
                  }"
                >
                  外币兑人民币汇率
                </div>
                <div class="one-right">
                  <el-input
                    @input="totalCostCnRateChange"
                    :readonly="isUpdate == 0 ? true : false"
                    v-model="deviceDetail.totalCnRate"
                    clearable
                  >
                  </el-input>
                </div>
              </div>
              <div class="div-one">
                <div
                  class="one-left"
                  :style="{
                    color: isUpdate == 0 ? '#606266' : '#3d82fe',
                    fontWeight: isUpdate == 0 ? 'normal' : 'bold',
                  }"
                >
                  成本人民币金额
                </div>
                <div class="one-right">
                  <el-input
                    :readonly="isUpdate == 0 ? true : false"
                    v-model="deviceDetail.totalCnPrice"
                    clearable
                  >
                  </el-input>
                </div>
              </div>
              <div class="div-one">
                <div
                  class="one-left"
                  :style="{
                    color: isUpdate == 0 ? '#606266' : '#3d82fe',
                    fontWeight: isUpdate == 0 ? 'normal' : 'bold',
                  }"
                >
                  港币兑人民币汇率
                </div>
                <div class="one-right">
                  <el-input
                    @input="totalCostHkRateChange"
                    :readonly="isUpdate == 0 ? true : false"
                    v-model="deviceDetail.totalHkRate"
                    clearable
                  >
                  </el-input>
                </div>
              </div>
              <div class="div-one">
                <div
                  class="one-left"
                  :style="{
                    color: isUpdate == 0 ? '#606266' : '#3d82fe',
                    fontWeight: isUpdate == 0 ? 'normal' : 'bold',
                  }"
                >
                  成本港币金额
                </div>
                <div class="one-right">
                  <el-input
                    :readonly="isUpdate == 0 ? true : false"
                    v-model="deviceDetail.totalHkPrice"
                    clearable
                  >
                  </el-input>
                </div>
              </div>
              <div class="div-one">
                <div
                  class="one-left"
                  :style="{
                    color: isUpdate == 0 ? '#606266' : '#3d82fe',
                    fontWeight: isUpdate == 0 ? 'normal' : 'bold',
                  }"
                >
                  最低销售价(CNY)
                </div>
                <div class="one-right">
                  <el-input
                    :readonly="isUpdate == 0 ? true : false"
                    v-model="deviceDetail.lowestSellPrice"
                    clearable
                  >
                  </el-input>
                </div>
              </div>
              <div class="div-one">
                <div
                  class="one-left"
                  :style="{
                    color: isUpdate == 0 ? '#606266' : '#3d82fe',
                    fontWeight: isUpdate == 0 ? 'normal' : 'bold',
                  }"
                >
                  建议销售价(CNY)
                </div>
                <div class="one-right">
                  <el-input
                    :readonly="isUpdate == 0 ? true : false"
                    v-model="deviceDetail.adviseSellPrice"
                    clearable
                  >
                  </el-input>
                </div>
              </div>
              <div class="div-one">
                <div
                  class="one-left"
                  :style="{
                    color: isUpdate == 0 ? '#606266' : '#3d82fe',
                    fontWeight: isUpdate == 0 ? 'normal' : 'bold',
                  }"
                >
                  建议批发价(CNY)
                </div>
                <div class="one-right">
                  <el-input
                    :readonly="isUpdate == 0 ? true : false"
                    v-model="deviceDetail.adviceWholesalePrice"
                    clearable
                  >
                  </el-input>
                </div>
              </div>
              <div class="div-one">
                <div
                  class="one-left"
                  :style="{
                    color: isUpdate == 0 ? '#606266' : '#3d82fe',
                    fontWeight: isUpdate == 0 ? 'normal' : 'bold',
                  }"
                >
                  标签价(CNY)
                </div>
                <div class="one-right">
                  <el-input
                    :readonly="isUpdate == 0 ? true : false"
                    v-model="deviceDetail.tagPrice"
                    clearable
                  >
                  </el-input>
                </div>
              </div>
              <div class="div-one">
                <div
                  class="one-left"
                  :style="{
                    color: isUpdate == 0 ? '#606266' : '#3d82fe',
                    fontWeight: isUpdate == 0 ? 'normal' : 'bold',
                  }"
                >
                  销售提成(CNY)
                </div>
                <div class="one-right">
                  <el-input
                    :readonly="isUpdate == 0 ? true : false"
                    v-model="deviceDetail.saleCommission"
                    clearable
                  >
                  </el-input>
                </div>
              </div>
            </div>
            <p class="font-title-style">备注信息</p>
            <div class="font-div">
              <div class="div-one-note" id="one-note">
                <div
                  class="one-left"
                  :style="{
                    color: isUpdate == 0 ? '#606266' : '#3d82fe',
                    fontWeight: isUpdate == 0 ? 'normal' : 'bold',
                  }"
                >
                  成本备注
                </div>
                <div class="one-right">
                  <el-input
                    type="textarea"
                    v-model="deviceDetail.totalPriceNote"
                    :readonly="isUpdate == 0 ? true : false"
                  >
                  </el-input>
                </div>
              </div>
            </div>
          </el-tab-pane>
          <el-tab-pane
            label="销售信息"
            name="third"
            v-if="deviceDetail.state == 4"
          >
            <div style="display: flex;justify-content: space-between;">
              <p class="font-title-style" style="margin-top: 0;">
                销售信息
              </p>
              <div style="padding-top: 6px;">
                <img
                  style="cursor: pointer;"
                  title="修改销售信息"
                  src="../assets/imgs/home/update.png"
                  @click="updateDevice"
                />
              </div>
            </div>
            <div class="font-div">
              <div class="div-one">
                <div
                  class="one-left"
                  :style="{
                    color: isUpdate == 0 ? '#606266' : '#3d82fe',
                    fontWeight: isUpdate == 0 ? 'normal' : 'bold',
                  }"
                >
                  销售员
                </div>
                <div class="one-right">
                  <el-input
                    :readonly="isUpdate == 0 ? true : false"
                    v-model="deviceDetail.solder"
                    clearable
                  >
                  </el-input>
                </div>
              </div>
              <div class="div-one">
                <div
                  class="one-left"
                  :style="{
                    color: isUpdate == 0 ? '#606266' : '#3d82fe',
                    fontWeight: isUpdate == 0 ? 'normal' : 'bold',
                  }"
                >
                  组
                </div>
                <div class="one-right">
                  <el-input
                    :readonly="isUpdate == 0 ? true : false"
                    v-model="deviceDetail.group"
                    clearable
                  >
                  </el-input>
                </div>
              </div>
              <div class="div-one">
                <div
                  class="one-left"
                  :style="{
                    color: isUpdate == 0 ? '#606266' : '#3d82fe',
                    fontWeight: isUpdate == 0 ? 'normal' : 'bold',
                  }"
                >
                  顾客姓名
                </div>
                <div class="one-right">
                  <el-input
                    :readonly="isUpdate == 0 ? true : false"
                    v-model="deviceDetail.customer"
                    clearable
                  >
                  </el-input>
                </div>
              </div>
              <div class="div-one">
                <div
                  class="one-left"
                  :style="{
                    color: isUpdate == 0 ? '#606266' : '#3d82fe',
                    fontWeight: isUpdate == 0 ? 'normal' : 'bold',
                  }"
                >
                  出售币种
                </div>
                <div class="one-right">
                  <el-radio-group
                    @change="currencyChange2"
                    v-model="deviceDetail.saleCurrency"
                    :disabled="isUpdate == 0 ? true : false"
                  >
                    <el-radio label="CNY">CNY</el-radio>
                    <el-radio label="EUR">EUR</el-radio>
                    <el-radio label="USD">USD</el-radio>
                    <el-radio label="HKD">HKD</el-radio>
                  </el-radio-group>
                </div>
              </div>
              <div class="div-one">
                <div
                  class="one-left"
                  :style="{
                    color: isUpdate == 0 ? '#606266' : '#3d82fe',
                    fontWeight: isUpdate == 0 ? 'normal' : 'bold',
                  }"
                >
                  出售金额
                </div>
                <div class="one-right">
                  <el-input
                    @input="currencyChange2"
                    :readonly="isUpdate == 0 ? true : false"
                    v-model="deviceDetail.saleMoney"
                    clearable
                  >
                  </el-input>
                </div>
              </div>
              <div class="div-one">
                <div
                  class="one-left"
                  :style="{
                    color: isUpdate == 0 ? '#606266' : '#3d82fe',
                    fontWeight: isUpdate == 0 ? 'normal' : 'bold',
                  }"
                >
                  外币兑人民币汇率
                </div>
                <div class="one-right">
                  <el-input
                    @input="totalCnRateChange2"
                    :readonly="isUpdate == 0 ? true : false"
                    v-model="deviceDetail.totalToCnRate"
                    clearable
                  >
                  </el-input>
                </div>
              </div>
              <div class="div-one">
                <div
                  class="one-left"
                  :style="{
                    color: isUpdate == 0 ? '#606266' : '#3d82fe',
                    fontWeight: isUpdate == 0 ? 'normal' : 'bold',
                  }"
                >
                  出售人民币金额
                </div>
                <div class="one-right">
                  <el-input
                    :readonly="isUpdate == 0 ? true : false"
                    v-model="deviceDetail.sellTotalCnPrice"
                    clearable
                  >
                  </el-input>
                </div>
              </div>
              <div class="div-one">
                <div
                  class="one-left"
                  :style="{
                    color: isUpdate == 0 ? '#606266' : '#3d82fe',
                    fontWeight: isUpdate == 0 ? 'normal' : 'bold',
                  }"
                >
                  港币兑人民币汇率
                </div>
                <div class="one-right">
                  <el-input
                    @input="totalHkRateChange2"
                    :readonly="isUpdate == 0 ? true : false"
                    v-model="deviceDetail.totalToHkRate"
                    clearable
                  >
                  </el-input>
                </div>
              </div>
              <div class="div-one">
                <div
                  class="one-left"
                  :style="{
                    color: isUpdate == 0 ? '#606266' : '#3d82fe',
                    fontWeight: isUpdate == 0 ? 'normal' : 'bold',
                  }"
                >
                  出售港币金额
                </div>
                <div class="one-right">
                  <el-input
                    :readonly="isUpdate == 0 ? true : false"
                    v-model="deviceDetail.sellTotalHkPrice"
                    clearable
                  >
                  </el-input>
                </div>
              </div>
              <div class="div-one">
                <div
                  class="one-left"
                  :style="{
                    color: isUpdate == 0 ? '#606266' : '#3d82fe',
                    fontWeight: isUpdate == 0 ? 'normal' : 'bold',
                  }"
                >
                  销售发票号
                </div>
                <div class="one-right">
                  <el-input
                    :readonly="isUpdate == 0 ? true : false"
                    v-model="deviceDetail.sellBillNumber"
                    clearable
                  >
                  </el-input>
                </div>
              </div>
              <div class="div-one">
                <div
                  class="one-left"
                  :style="{
                    color: isUpdate == 0 ? '#606266' : '#3d82fe',
                    fontWeight: isUpdate == 0 ? 'normal' : 'bold',
                  }"
                >
                  领货人
                </div>
                <div class="one-right">
                  <el-input
                    :readonly="isUpdate == 0 ? true : false"
                    v-model="deviceDetail.receiver"
                    clearable
                  >
                  </el-input>
                </div>
              </div>
            </div>
          </el-tab-pane>
          <el-tab-pane label="历史记录" name="second">
            <p class="font-title-style" style="margin-top: 0;">
              成品状态：{{
                deviceDetail.state == 0
                  ? "库存中"
                  : deviceDetail.state == 1
                  ? "运输中"
                  : deviceDetail.state == 3
                  ? "加工完成"
                  : "已出售"
              }}
            </p>
            <el-timeline>
              <el-timeline-item
                color="#3d82fe"
                size="large"
                v-for="(activity, index) in deviceDetail.stockInOutList"
                :key="index"
              >
                <div style="display: flex;align-items: center;">
                  <p style="margin:0 20px 14px 0;width: 72px;">
                    {{ activity.time.slice(0, 10) }}
                  </p>
                  <p style="margin-top:0" v-html="activity.describe"></p>
                </div>
                <p
                  v-if="activity.note !== ''"
                  style="margin: 0;color:#919090;margin-left:92px;word-break: break-all;word-wrap: break-word"
                >
                  {{ activity.note }}
                </p>
              </el-timeline-item>
            </el-timeline>
          </el-tab-pane>
        </el-tabs>
      </div>
      <div slot="footer">
        <el-button @click="dialogDeviceDetailVisible = false"
          >取 消</el-button
        >
        <el-button type="primary" @click="inventoryLookSure">确 定</el-button>
      </div>
    </el-dialog>
    <el-dialog
      v-if="dialogDeviceDetailsVisible"
      title="材料信息"
      :visible.sync="dialogDeviceDetailsVisible"
      :close-on-press-escape="false"
      :close-on-click-modal="false"
      :modal-append-to-body="false"
      :append-to-body="false"
      style="margin-top:20px"
    >
      <div id="invenSome">
        <el-tabs style="margin-top: 20px;" v-model="activeName">
          <el-tab-pane label="材料信息" name="ff">
            <p class="font-title-style" style="margin-top: 0;">
              材料信息
            </p>
            <div class="font-div">
              <div class="div-one">
                <div class="one-left">
                  材料名称
                </div>
                <div class="one-right">
                  {{ deviceDetails.materialName }}
                </div>
              </div>
              <div class="div-one">
                <div class="one-left">
                  仓库/加工厂
                </div>
                <div class="one-right">
                  {{ deviceDetails.storageName }}
                </div>
              </div>
              <div class="div-one">
                <div class="one-left">
                  统一编号
                </div>
                <div class="one-right">
                  {{ deviceDetails.productNumber }}
                </div>
              </div>
              <div class="div-one">
                <div class="one-left">
                  形状
                </div>
                <div class="one-right">
                  {{ deviceDetails.shape }}
                </div>
              </div>
              <div class="div-one">
                <div class="one-left">
                  产品类型
                </div>
                <div class="one-right">
                  <el-input v-model="deviceDetails.productType" clearable>
                  </el-input>
                </div>
              </div>
              <div class="div-one">
                <div class="one-left">
                  产地
                </div>
                <div class="one-right">
                  <el-input v-model="deviceDetails.productArea" clearable>
                  </el-input>
                </div>
              </div>
              <div class="div-one">
                <div class="one-left">
                  尺寸/毫米
                </div>
                <div class="one-right">
                  {{ deviceDetails.size }}
                </div>
              </div>
              <div class="div-one">
                <div class="one-left">
                  颜色
                </div>
                <div class="one-right">
                  {{ deviceDetails.color }}
                </div>
              </div>
              <div class="div-one">
                <div class="one-left">
                  配对
                </div>
                <div class="one-right">
                  {{ deviceDetails.paired }}
                </div>
              </div>
              <div class="div-one">
                <div class="one-left">
                  品质
                </div>
                <div class="one-right">
                  {{ deviceDetails.quality }}
                </div>
              </div>
              <div class="div-one">
                <div class="one-left">
                  品质细分
                </div>
                <div class="one-right">
                  {{ deviceDetails.subsection }}
                </div>
              </div>
              <div class="div-one">
                <div class="one-left">
                  盒子编号
                </div>
                <div class="one-right">
                  {{ deviceDetails.boxNumber }}
                </div>
              </div>
              <div class="div-one">
                <div class="one-left">
                  证书编号
                </div>
                <div class="one-right">
                  {{ deviceDetails.certificateNumber }}
                </div>
              </div>
              <div class="div-one">
                <div class="one-left">
                  发票号
                </div>
                <div class="one-right">
                  <el-input v-model="deviceDetails.billNumber" clearable>
                  </el-input>
                </div>
              </div>
            </div>
            <p class="font-title-style">图片信息</p>
            <div class="upload-imgs">
              <div
                style="display:flex;position:relative;"
                id="delImg"
                class="delImg"
              >
                <div
                  v-for="(imgurl, index) of imgList"
                  :key="index"
                  style="margin-left:10px;position:relative;"
                >
                  <img
                    v-if="imgurl !== '' && imgurl !== null"
                    :src="
                      imgurl.length < 42 ? img + '/file/' + imgurl : imgurl
                    "
                    width="100px"
                    height="100px"
                    style="border-radius:5px;object-fit:cover;"
                  />
                </div>
              </div>
            </div>
            <p class="font-title-style">备注信息</p>
            <div class="font-div">
              <div class="div-one-note">
                <div class="one-left">
                  产品备注
                </div>
                <div class="one-right">
                  <el-input
                    type="textarea"
                    v-model="deviceDetails.note"
                    readonly
                  >
                  </el-input>
                </div>
              </div>
            </div>
          </el-tab-pane>
          <el-tab-pane label="价格信息" name="qq">
            <p class="font-title-style" style="margin-top: 0;">
              价格信息
            </p>
            <div class="font-div">
              <div class="div-one">
                <div class="one-left">
                  计价单位
                </div>
                <div class="one-right">
                  <el-radio-group
                    v-model="deviceDetails.chargeUnit"
                    :disabled="true"
                  >
                    <el-radio label="粒">粒</el-radio>
                    <el-radio label="ct">ct</el-radio>
                    <el-radio label="g">g</el-radio>
                  </el-radio-group>
                </div>
              </div>
              <div class="div-one">
                <div class="one-left">
                  单价
                </div>
                <div class="one-right">
                  {{ deviceDetails.unitPrice }}
                </div>
              </div>
              <div class="div-one">
                <div class="one-left">
                  币种
                </div>
                <div class="one-right">
                  <el-radio-group
                    v-model="deviceDetails.currency"
                    :disabled="true"
                  >
                    <el-radio label="CNY">CNY</el-radio>
                    <el-radio label="EUR">EUR</el-radio>
                    <el-radio label="USD">USD</el-radio>
                    <el-radio label="HKD">HKD</el-radio>
                  </el-radio-group>
                </div>
              </div>
              <div class="div-one">
                <div class="one-left">
                  总数量
                </div>
                <div class="one-right">
                  {{
                    deviceDetails.chargeUnit == "粒"
                      ? deviceDetails.number + " " + deviceDetails.chargeUnit
                      : deviceDetails.number
                  }}
                </div>
              </div>
              <div class="div-one">
                <div class="one-left">
                  总重量
                </div>
                <div class="one-right">
                  {{
                    deviceDetails.chargeUnit != "粒"
                      ? deviceDetails.weight + " " + deviceDetails.chargeUnit
                      : "--"
                  }}
                </div>
              </div>
              <div class="div-one">
                <div class="one-left">
                  总价
                </div>
                <div class="one-right">
                  {{
                    deviceDetails.totalPrice + " " + deviceDetails.currency
                  }}
                </div>
              </div>
              <div class="div-one">
                <div class="one-left">
                  零售单价
                </div>
                <div class="one-right">
                  {{ deviceDetails.retailPrice }}
                </div>
              </div>
              <div class="div-one">
                <div class="one-left">
                  批发单价
                </div>
                <div class="one-right">
                  {{ deviceDetails.wholesalePrice }}
                </div>
              </div>
              <div class="div-one">
                <div class="one-left">
                  外币兑人民币汇率
                </div>
                <div class="one-right">
                  {{ deviceDetails.totalCnRate }}
                </div>
              </div>
              <div class="div-one">
                <div class="one-left">
                  总价人民币金额
                </div>
                <div class="one-right">
                  {{ deviceDetails.totalCnPrice }}
                </div>
              </div>
              <div class="div-one">
                <div class="one-left">
                  港币兑人民币汇率
                </div>
                <div class="one-right">
                  {{ deviceDetails.totalHkRate }}
                </div>
              </div>
              <div class="div-one">
                <div class="one-left">
                  总价港币金额
                </div>
                <div class="one-right">
                  {{ deviceDetails.totalHkPrice }}
                </div>
              </div>
            </div>
            <p class="font-title-style">备注信息</p>
            <div class="font-div">
              <div class="div-one-note" id="one-note">
                <div class="one-left">
                  成本备注
                </div>
                <div class="one-right">
                  <el-input
                    type="textarea"
                    v-model="deviceDetails.totalPriceNote"
                    readonly
                  >
                  </el-input>
                </div>
              </div>
            </div>
          </el-tab-pane>
          <el-tab-pane label="历史记录" name="ss">
            <p class="font-title-style" style="margin-top: 0;">
              材料状态：{{
                deviceDetails.state == 0
                  ? "库存中"
                  : deviceDetails.state == 1
                  ? "运输中"
                  : deviceDetails.state == 2
                  ? "加工中"
                  : deviceDetails.state == 3
                  ? "加工完成"
                  : "已出售"
              }}
            </p>
            <el-timeline>
              <el-timeline-item
                color="#3d82fe"
                size="large"
                v-for="(activity, index) in deviceDetails.stockInOutList"
                :key="index"
              >
                <div style="display: flex;align-items: center;">
                  <p style="margin:0 20px 14px 0;width: 72px;">
                    {{ activity.time.slice(0, 10) }}
                  </p>
                  <p style="margin-top:0" v-html="activity.describe"></p>
                </div>
                <p
                  v-if="activity.note !== ''"
                  style="margin: 0;color:#919090;margin-left:92px;word-break: break-all;word-wrap: break-word"
                >
                  {{ activity.note }}
                </p>
              </el-timeline-item>
            </el-timeline>
          </el-tab-pane>
        </el-tabs>
      </div>
      <div slot="footer">
        <el-button @click="dialogDeviceDetailsVisible = false"
          >取 消</el-button
        >
        <el-button type="primary" @click="dialogDeviceDetailsVisible = false"
          >确 定</el-button
        >
      </div>
    </el-dialog>
    <el-dialog
      title="设计稿列表"
      :visible.sync="chooseimgshow"
      :append-to-body="false"
      :close-on-press-escape="false"
      :close-on-click-modal="false"
      :before-close="handleClose"
      :modal-append-to-body="false"
      width="40%"
    >
      <div style="display:flex;padding: 30px 20px 0 20px;">
        <el-input
          placeholder="请输入设计师，设计名称"
          v-model="designListKeyword"
        ></el-input
        ><el-button
          style="margin-left: 10px;"
          @click="getproducibleDesignList"
          >搜索</el-button
        >
      </div>
      <div style="padding: 20px;">
        <el-radio-group
          v-model="statusDesign"
          @change="getproducibleDesignList"
        >
          <el-radio label="0">全部</el-radio>
          <el-radio label="1">未生产</el-radio>
        </el-radio-group>
      </div>
      <el-table
        :data="producibleDesignList"
        style="width: 90%;margin:auto;"
        highlight-current-row
        border
        @current-change="chooseimglist"
        ref="multipleTableDesign"
      >
        <el-table-column prop="name" label="设计名称"> </el-table-column>
        <el-table-column prop="designerName" label="设计师名称">
        </el-table-column>
        <el-table-column prop="designId" label="设计图片">
          <template slot-scope="scope">
            <img
              v-image-preview
              :src="img + '/file/' + firstimg(scope.row.img)"
              style="width: 100px;height: 100px;object-fit: cover;"
            />
          </template>
        </el-table-column>
      </el-table>
      <div slot="footer">
        <el-button type="primary" @click="chooseimgshow = false"
          >确 定</el-button
        >
      </div>
    </el-dialog>
  </div>
</div>
"},null]}